
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000082  00800100  00000742  000007d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000742  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  00800182  00800182  00000858  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000858  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000888  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  000008c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000107b  00000000  00000000  00000984  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009b7  00000000  00000000  000019ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000075c  00000000  00000000  000023b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000230  00000000  00000000  00002b14  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005c1  00000000  00000000  00002d44  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006b4  00000000  00000000  00003305  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  000039b9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	c1 c0       	rjmp	.+386    	; 0x188 <__vector_1>
   6:	00 00       	nop
   8:	d3 c0       	rjmp	.+422    	; 0x1b0 <__vector_2>
   a:	00 00       	nop
   c:	e5 c0       	rjmp	.+458    	; 0x1d8 <__vector_3>
   e:	00 00       	nop
  10:	f7 c0       	rjmp	.+494    	; 0x200 <__vector_4>
  12:	00 00       	nop
  14:	09 c1       	rjmp	.+530    	; 0x228 <__vector_5>
  16:	00 00       	nop
  18:	1b c1       	rjmp	.+566    	; 0x250 <__vector_6>
  1a:	00 00       	nop
  1c:	2d c1       	rjmp	.+602    	; 0x278 <__vector_7>
  1e:	00 00       	nop
  20:	3f c1       	rjmp	.+638    	; 0x2a0 <__vector_8>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e4       	ldi	r30, 0x42	; 66
  a0:	f7 e0       	ldi	r31, 0x07	; 7
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 38       	cpi	r26, 0x82	; 130
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e8       	ldi	r26, 0x82	; 130
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a2 39       	cpi	r26, 0x92	; 146
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	02 d1       	rcall	.+516    	; 0x2c8 <main>
  c4:	3c c3       	rjmp	.+1656   	; 0x73e <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <USART_init>:
void USART_Transmit_number(int number){
	USART_Transmit((number / 1000) + '0');
	USART_Transmit(((number % 1000) / 100) + '0');
	USART_Transmit((number % 100) / 10 + '0');
	USART_Transmit((number % 10 + '0'));
}
  c8:	90 93 90 00 	sts	0x0090, r25	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
  cc:	89 b9       	out	0x09, r24	; 9
  ce:	88 e1       	ldi	r24, 0x18	; 24
  d0:	8a b9       	out	0x0a, r24	; 10
  d2:	86 e0       	ldi	r24, 0x06	; 6
  d4:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
  d8:	08 95       	ret

000000da <USART_Transmit>:
  da:	5d 9b       	sbis	0x0b, 5	; 11
  dc:	fe cf       	rjmp	.-4      	; 0xda <USART_Transmit>
  de:	8c b9       	out	0x0c, r24	; 12
  e0:	08 95       	ret

000000e2 <USART_Transmit_String>:
  e2:	cf 93       	push	r28
  e4:	df 93       	push	r29
  e6:	ec 01       	movw	r28, r24
  e8:	88 81       	ld	r24, Y
  ea:	88 23       	and	r24, r24
  ec:	29 f0       	breq	.+10     	; 0xf8 <USART_Transmit_String+0x16>
  ee:	21 96       	adiw	r28, 0x01	; 1
  f0:	f4 df       	rcall	.-24     	; 0xda <USART_Transmit>
  f2:	89 91       	ld	r24, Y+
  f4:	81 11       	cpse	r24, r1
  f6:	fc cf       	rjmp	.-8      	; 0xf0 <USART_Transmit_String+0xe>
  f8:	df 91       	pop	r29
  fa:	cf 91       	pop	r28
  fc:	08 95       	ret

000000fe <ADC_SingleConversion_read>:
  fe:	86 b1       	in	r24, 0x06	; 6
 100:	80 6c       	ori	r24, 0xC0	; 192
 102:	86 b9       	out	0x06, r24	; 6
 104:	36 99       	sbic	0x06, 6	; 6
 106:	fe cf       	rjmp	.-4      	; 0x104 <ADC_SingleConversion_read+0x6>
 108:	24 b1       	in	r18, 0x04	; 4
 10a:	85 b1       	in	r24, 0x05	; 5
 10c:	37 98       	cbi	0x06, 7	; 6
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	98 2f       	mov	r25, r24
 112:	88 27       	eor	r24, r24
 114:	82 0f       	add	r24, r18
 116:	91 1d       	adc	r25, r1
 118:	08 95       	ret

0000011a <Timer_Init>:

void Timer_Init(){
	TCCR0 = ( 1 << WGM00 ) | ( 1 << WGM01 ) | ( 1 << COM01 ) | ( 4 << CS0 );
 11a:	8c e6       	ldi	r24, 0x6C	; 108
 11c:	83 bf       	out	0x33, r24	; 51
	TIMSK = ( 1 << OCIE0 );
 11e:	82 e0       	ldi	r24, 0x02	; 2
 120:	87 bf       	out	0x37, r24	; 55
 122:	08 95       	ret

00000124 <interrupt_Init>:
}

void interrupt_Init(){
	EIMSK = ( 1 << INT0 ) | ( 1 << INT1 );
 124:	83 e0       	ldi	r24, 0x03	; 3
 126:	89 bf       	out	0x39, r24	; 57
	EICRA = ( 1 << ISC01 ) | ( 1 << ISC11 );
 128:	8a e0       	ldi	r24, 0x0A	; 10
 12a:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
 12e:	08 95       	ret

00000130 <Check_Password>:
		USART_Transmit_String("$T,");
		USART_Transmit_String("Correct!");
		state = 8;
	}
	else{
		USART_Transmit_String("$C\r");
 130:	8a e1       	ldi	r24, 0x1A	; 26
 132:	91 e0       	ldi	r25, 0x01	; 1
 134:	d6 df       	rcall	.-84     	; 0xe2 <USART_Transmit_String>
		USART_Transmit_String("$G, 1, 7\r");
 136:	8e e1       	ldi	r24, 0x1E	; 30
 138:	91 e0       	ldi	r25, 0x01	; 1
 13a:	d3 df       	rcall	.-90     	; 0xe2 <USART_Transmit_String>
		USART_Transmit_String("$T,");
 13c:	88 e2       	ldi	r24, 0x28	; 40
 13e:	91 e0       	ldi	r25, 0x01	; 1
 140:	d0 df       	rcall	.-96     	; 0xe2 <USART_Transmit_String>
		USART_Transmit_String("Wrong Password!");
 142:	8c e2       	ldi	r24, 0x2C	; 44
 144:	91 e0       	ldi	r25, 0x01	; 1
 146:	cd df       	rcall	.-102    	; 0xe2 <USART_Transmit_String>
 148:	81 e0       	ldi	r24, 0x01	; 1
		state = 1;
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <state+0x1>
 150:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <state>
 154:	08 95       	ret

00000156 <Open_Door>:
 156:	e0 e0       	ldi	r30, 0x00	; 0

}

void Open_Door(){
	for(int i = 0; i < 2; i++){
		OCR0 = Level[1];
 158:	f1 e0       	ldi	r31, 0x01	; 1
 15a:	81 81       	ldd	r24, Z+1	; 0x01
 15c:	81 bf       	out	0x31, r24	; 49
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 15e:	2f ef       	ldi	r18, 0xFF	; 255
 160:	83 e2       	ldi	r24, 0x23	; 35
 162:	94 ef       	ldi	r25, 0xF4	; 244
 164:	21 50       	subi	r18, 0x01	; 1
 166:	80 40       	sbci	r24, 0x00	; 0
 168:	90 40       	sbci	r25, 0x00	; 0
 16a:	e1 f7       	brne	.-8      	; 0x164 <Open_Door+0xe>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <Open_Door+0x18>
 16e:	00 00       	nop
 170:	81 81       	ldd	r24, Z+1	; 0x01
 172:	81 bf       	out	0x31, r24	; 49
 174:	2f ef       	ldi	r18, 0xFF	; 255
 176:	83 e2       	ldi	r24, 0x23	; 35
 178:	94 ef       	ldi	r25, 0xF4	; 244
 17a:	21 50       	subi	r18, 0x01	; 1
 17c:	80 40       	sbci	r24, 0x00	; 0
 17e:	90 40       	sbci	r25, 0x00	; 0
 180:	e1 f7       	brne	.-8      	; 0x17a <Open_Door+0x24>
 182:	00 c0       	rjmp	.+0      	; 0x184 <Open_Door+0x2e>
 184:	00 00       	nop
 186:	08 95       	ret

00000188 <__vector_1>:
		_delay_ms(5000);
	}
}

ISR(INT0_vect){
 188:	1f 92       	push	r1
 18a:	0f 92       	push	r0
 18c:	0f b6       	in	r0, 0x3f	; 63
 18e:	0f 92       	push	r0
 190:	11 24       	eor	r1, r1
 192:	8f 93       	push	r24
 194:	9f 93       	push	r25
	PS_temp = 1;
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	90 93 8b 01 	sts	0x018B, r25	; 0x80018b <PS_temp+0x1>
 19e:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <PS_temp>
}
 1a2:	9f 91       	pop	r25
 1a4:	8f 91       	pop	r24
 1a6:	0f 90       	pop	r0
 1a8:	0f be       	out	0x3f, r0	; 63
 1aa:	0f 90       	pop	r0
 1ac:	1f 90       	pop	r1
 1ae:	18 95       	reti

000001b0 <__vector_2>:
ISR(INT1_vect){
 1b0:	1f 92       	push	r1
 1b2:	0f 92       	push	r0
 1b4:	0f b6       	in	r0, 0x3f	; 63
 1b6:	0f 92       	push	r0
 1b8:	11 24       	eor	r1, r1
 1ba:	8f 93       	push	r24
 1bc:	9f 93       	push	r25
	PS_temp = 2;
 1be:	82 e0       	ldi	r24, 0x02	; 2
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	90 93 8b 01 	sts	0x018B, r25	; 0x80018b <PS_temp+0x1>
 1c6:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <PS_temp>
}
 1ca:	9f 91       	pop	r25
 1cc:	8f 91       	pop	r24
 1ce:	0f 90       	pop	r0
 1d0:	0f be       	out	0x3f, r0	; 63
 1d2:	0f 90       	pop	r0
 1d4:	1f 90       	pop	r1
 1d6:	18 95       	reti

000001d8 <__vector_3>:
ISR(INT2_vect){
 1d8:	1f 92       	push	r1
 1da:	0f 92       	push	r0
 1dc:	0f b6       	in	r0, 0x3f	; 63
 1de:	0f 92       	push	r0
 1e0:	11 24       	eor	r1, r1
 1e2:	8f 93       	push	r24
 1e4:	9f 93       	push	r25
	PS_temp = 3;
 1e6:	83 e0       	ldi	r24, 0x03	; 3
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	90 93 8b 01 	sts	0x018B, r25	; 0x80018b <PS_temp+0x1>
 1ee:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <PS_temp>
}
 1f2:	9f 91       	pop	r25
 1f4:	8f 91       	pop	r24
 1f6:	0f 90       	pop	r0
 1f8:	0f be       	out	0x3f, r0	; 63
 1fa:	0f 90       	pop	r0
 1fc:	1f 90       	pop	r1
 1fe:	18 95       	reti

00000200 <__vector_4>:
ISR(INT3_vect){
 200:	1f 92       	push	r1
 202:	0f 92       	push	r0
 204:	0f b6       	in	r0, 0x3f	; 63
 206:	0f 92       	push	r0
 208:	11 24       	eor	r1, r1
 20a:	8f 93       	push	r24
 20c:	9f 93       	push	r25
	PS_temp = 4;
 20e:	84 e0       	ldi	r24, 0x04	; 4
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	90 93 8b 01 	sts	0x018B, r25	; 0x80018b <PS_temp+0x1>
 216:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <PS_temp>
}
 21a:	9f 91       	pop	r25
 21c:	8f 91       	pop	r24
 21e:	0f 90       	pop	r0
 220:	0f be       	out	0x3f, r0	; 63
 222:	0f 90       	pop	r0
 224:	1f 90       	pop	r1
 226:	18 95       	reti

00000228 <__vector_5>:
ISR(INT4_vect){
 228:	1f 92       	push	r1
 22a:	0f 92       	push	r0
 22c:	0f b6       	in	r0, 0x3f	; 63
 22e:	0f 92       	push	r0
 230:	11 24       	eor	r1, r1
 232:	8f 93       	push	r24
 234:	9f 93       	push	r25
	PS_temp = 5;
 236:	85 e0       	ldi	r24, 0x05	; 5
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	90 93 8b 01 	sts	0x018B, r25	; 0x80018b <PS_temp+0x1>
 23e:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <PS_temp>
}
 242:	9f 91       	pop	r25
 244:	8f 91       	pop	r24
 246:	0f 90       	pop	r0
 248:	0f be       	out	0x3f, r0	; 63
 24a:	0f 90       	pop	r0
 24c:	1f 90       	pop	r1
 24e:	18 95       	reti

00000250 <__vector_6>:
ISR(INT5_vect){
 250:	1f 92       	push	r1
 252:	0f 92       	push	r0
 254:	0f b6       	in	r0, 0x3f	; 63
 256:	0f 92       	push	r0
 258:	11 24       	eor	r1, r1
 25a:	8f 93       	push	r24
 25c:	9f 93       	push	r25
	PS_temp = 6;
 25e:	86 e0       	ldi	r24, 0x06	; 6
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	90 93 8b 01 	sts	0x018B, r25	; 0x80018b <PS_temp+0x1>
 266:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <PS_temp>
}
 26a:	9f 91       	pop	r25
 26c:	8f 91       	pop	r24
 26e:	0f 90       	pop	r0
 270:	0f be       	out	0x3f, r0	; 63
 272:	0f 90       	pop	r0
 274:	1f 90       	pop	r1
 276:	18 95       	reti

00000278 <__vector_7>:
ISR(INT6_vect){
 278:	1f 92       	push	r1
 27a:	0f 92       	push	r0
 27c:	0f b6       	in	r0, 0x3f	; 63
 27e:	0f 92       	push	r0
 280:	11 24       	eor	r1, r1
 282:	8f 93       	push	r24
 284:	9f 93       	push	r25
	PS_temp = 7;
 286:	87 e0       	ldi	r24, 0x07	; 7
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	90 93 8b 01 	sts	0x018B, r25	; 0x80018b <PS_temp+0x1>
 28e:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <PS_temp>
}
 292:	9f 91       	pop	r25
 294:	8f 91       	pop	r24
 296:	0f 90       	pop	r0
 298:	0f be       	out	0x3f, r0	; 63
 29a:	0f 90       	pop	r0
 29c:	1f 90       	pop	r1
 29e:	18 95       	reti

000002a0 <__vector_8>:
ISR(INT7_vect){
 2a0:	1f 92       	push	r1
 2a2:	0f 92       	push	r0
 2a4:	0f b6       	in	r0, 0x3f	; 63
 2a6:	0f 92       	push	r0
 2a8:	11 24       	eor	r1, r1
 2aa:	8f 93       	push	r24
 2ac:	9f 93       	push	r25
	PS_temp = 8;
 2ae:	88 e0       	ldi	r24, 0x08	; 8
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	90 93 8b 01 	sts	0x018B, r25	; 0x80018b <PS_temp+0x1>
 2b6:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <PS_temp>
}
 2ba:	9f 91       	pop	r25
 2bc:	8f 91       	pop	r24
 2be:	0f 90       	pop	r0
 2c0:	0f be       	out	0x3f, r0	; 63
 2c2:	0f 90       	pop	r0
 2c4:	1f 90       	pop	r1
 2c6:	18 95       	reti

000002c8 <main>:
{
	int ADC_Output1;
	int ADC_Output2;
	int CS = 0;
	
	DDRD = 0x00; // 스위치 입력
 2c8:	11 ba       	out	0x11, r1	; 17
	DDRF = 0x00; // 적외선 입력
 2ca:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	DDRA = 0xFF; // LCD 출력
 2ce:	8f ef       	ldi	r24, 0xFF	; 255
 2d0:	8a bb       	out	0x1a, r24	; 26
	//DDRC = 0xFF; // LED 출력
	DDRB = 0xFF; // 모터 출력   
 2d2:	87 bb       	out	0x17, r24	; 23
	
	SREG = 0x80;
 2d4:	80 e8       	ldi	r24, 0x80	; 128
 2d6:	8f bf       	out	0x3f, r24	; 63
	state = 0;
 2d8:	10 92 8f 01 	sts	0x018F, r1	; 0x80018f <state+0x1>
 2dc:	10 92 8e 01 	sts	0x018E, r1	; 0x80018e <state>
	
	USART_init(MYUBRR);
 2e0:	87 e6       	ldi	r24, 0x67	; 103
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	f1 de       	rcall	.-542    	; 0xc8 <USART_init>
	interrupt_Init();
 2e6:	1e df       	rcall	.-452    	; 0x124 <interrupt_Init>
	Timer_Init();
 2e8:	18 df       	rcall	.-464    	; 0x11a <Timer_Init>
	USART_Transmit_String("$I\r");
 2ea:	8c e3       	ldi	r24, 0x3C	; 60
 2ec:	91 e0       	ldi	r25, 0x01	; 1
 2ee:	f9 de       	rcall	.-526    	; 0xe2 <USART_Transmit_String>
 2f0:	22 24       	eor	r2, r2
		USART_Transmit(*str++);
	}
}

void ADC_SingleConversion_Init(unsigned char port){
	ADMUX = port;
 2f2:	23 94       	inc	r2
 2f4:	68 94       	set
 2f6:	33 24       	eor	r3, r3
 2f8:	31 f8       	bld	r3, 1
 2fa:	0f 2e       	mov	r0, r31
 2fc:	f2 e0       	ldi	r31, 0x02	; 2
 2fe:	af 2e       	mov	r10, r31
 300:	f1 e0       	ldi	r31, 0x01	; 1
 302:	bf 2e       	mov	r11, r31
 304:	f0 2d       	mov	r31, r0
 306:	02 e6       	ldi	r16, 0x62	; 98
					Check_Password();
					state = 8;
				}
				else if(state == 8){
					for(int i = 0; i < 8; i++){
						PORTF = LED_flicker[i];
 308:	10 e0       	ldi	r17, 0x00	; 0
 30a:	0f 2e       	mov	r0, r31
						state = 6;
					}
				}
				else if(state == 6){
					if(PIND == 0x01 | PIND == 0x02 | PIND == 0x04 | PIND == 0x08 | PIND == 0x10 | PIND == 0x20 | PIND == 0x40 | PIND == 0x80){
						PS[3] = PS_temp;
 30c:	f2 e8       	ldi	r31, 0x82	; 130
 30e:	cf 2e       	mov	r12, r31
 310:	f1 e0       	ldi	r31, 0x01	; 1
 312:	df 2e       	mov	r13, r31
 314:	f0 2d       	mov	r31, r0
 316:	0f 2e       	mov	r0, r31
						PS[1] = PS_temp;
						USART_Transmit_String("$G, 2, 8\r");
						USART_Transmit_String("$T,");
						USART_Transmit_String(PS[1]);
						USART_Transmit('\r');
						state = 5;
 318:	f5 e0       	ldi	r31, 0x05	; 5
 31a:	4f 2e       	mov	r4, r31
 31c:	51 2c       	mov	r5, r1
 31e:	f0 2d       	mov	r31, r0
 320:	68 94       	set
				else if(state == 3){
						USART_Transmit_String("$G, 2, 7\r");
						USART_Transmit_String("$T,");
						USART_Transmit_String(PS[0]);
						USART_Transmit('\r');
						state = 4;
 322:	88 24       	eor	r8, r8
 324:	82 f8       	bld	r8, 2
 326:	91 2c       	mov	r9, r1
 328:	0f 2e       	mov	r0, r31
					}
				}
				else if(state == 2){
					if(CS == 0){
						if(PIND == 0x01 | PIND == 0x02 | PIND == 0x04 | PIND == 0x08 | PIND == 0x10 | PIND == 0x20 | PIND == 0x40 | PIND == 0x80){
							PASSWORD[0] = PS_temp;
 32a:	f2 e1       	ldi	r31, 0x12	; 18
 32c:	6f 2e       	mov	r6, r31
 32e:	f1 e0       	ldi	r31, 0x01	; 1
 330:	7f 2e       	mov	r7, r31
 332:	f0 2d       	mov	r31, r0
 334:	ee 24       	eor	r14, r14
		ADC_Output2 = ADC_SingleConversion_read();
		_delay_ms(100);
		
				if(state == 0){	
					if(ADC_Output1 > 600 || ADC_Output2 > 600 ){
						state = 1;
 336:	e3 94       	inc	r14
 338:	f1 2c       	mov	r15, r1
		USART_Transmit(*str++);
	}
}

void ADC_SingleConversion_Init(unsigned char port){
	ADMUX = port;
 33a:	27 b8       	out	0x07, r2	; 7
	USART_Transmit_String("$I\r");
	
	while(1){
		
		ADC_SingleConversion_Init(0x01);
		ADC_Output1 = ADC_SingleConversion_read();
 33c:	e0 de       	rcall	.-576    	; 0xfe <ADC_SingleConversion_read>
 33e:	ec 01       	movw	r28, r24
 340:	2f ef       	ldi	r18, 0xFF	; 255
 342:	31 ee       	ldi	r19, 0xE1	; 225
 344:	44 e0       	ldi	r20, 0x04	; 4
 346:	21 50       	subi	r18, 0x01	; 1
 348:	30 40       	sbci	r19, 0x00	; 0
 34a:	40 40       	sbci	r20, 0x00	; 0
 34c:	e1 f7       	brne	.-8      	; 0x346 <main+0x7e>
 34e:	00 c0       	rjmp	.+0      	; 0x350 <main+0x88>
 350:	00 00       	nop
		USART_Transmit(*str++);
	}
}

void ADC_SingleConversion_Init(unsigned char port){
	ADMUX = port;
 352:	37 b8       	out	0x07, r3	; 7
		
		ADC_SingleConversion_Init(0x01);
		ADC_Output1 = ADC_SingleConversion_read();
		_delay_ms(100);
		ADC_SingleConversion_Init(0x02);
		ADC_Output2 = ADC_SingleConversion_read();
 354:	d4 de       	rcall	.-600    	; 0xfe <ADC_SingleConversion_read>
 356:	af ef       	ldi	r26, 0xFF	; 255
 358:	b1 ee       	ldi	r27, 0xE1	; 225
 35a:	e4 e0       	ldi	r30, 0x04	; 4
 35c:	a1 50       	subi	r26, 0x01	; 1
 35e:	b0 40       	sbci	r27, 0x00	; 0
 360:	e0 40       	sbci	r30, 0x00	; 0
 362:	e1 f7       	brne	.-8      	; 0x35c <main+0x94>
 364:	00 c0       	rjmp	.+0      	; 0x366 <main+0x9e>
 366:	00 00       	nop
 368:	20 91 8e 01 	lds	r18, 0x018E	; 0x80018e <state>
		_delay_ms(100);
		
				if(state == 0){	
 36c:	30 91 8f 01 	lds	r19, 0x018F	; 0x80018f <state+0x1>
 370:	21 15       	cp	r18, r1
 372:	31 05       	cpc	r19, r1
 374:	59 f4       	brne	.+22     	; 0x38c <main+0xc4>
 376:	c9 35       	cpi	r28, 0x59	; 89
					if(ADC_Output1 > 600 || ADC_Output2 > 600 ){
 378:	d2 40       	sbci	r29, 0x02	; 2
 37a:	1c f4       	brge	.+6      	; 0x382 <main+0xba>
 37c:	89 35       	cpi	r24, 0x59	; 89
 37e:	92 40       	sbci	r25, 0x02	; 2
 380:	e4 f2       	brlt	.-72     	; 0x33a <main+0x72>
 382:	f0 92 8f 01 	sts	0x018F, r15	; 0x80018f <state+0x1>
						state = 1;
 386:	e0 92 8e 01 	sts	0x018E, r14	; 0x80018e <state>
 38a:	d7 cf       	rjmp	.-82     	; 0x33a <main+0x72>
 38c:	21 30       	cpi	r18, 0x01	; 1
					}
				}
				else if(state == 1){
 38e:	31 05       	cpc	r19, r1
 390:	09 f0       	breq	.+2      	; 0x394 <main+0xcc>
 392:	4d c0       	rjmp	.+154    	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
					USART_Transmit_String("$C\r");
 394:	8a e1       	ldi	r24, 0x1A	; 26
 396:	91 e0       	ldi	r25, 0x01	; 1
 398:	a4 de       	rcall	.-696    	; 0xe2 <USART_Transmit_String>
					USART_Transmit_String("$G, 1, 2\r");
 39a:	80 e4       	ldi	r24, 0x40	; 64
 39c:	91 e0       	ldi	r25, 0x01	; 1
 39e:	a1 de       	rcall	.-702    	; 0xe2 <USART_Transmit_String>
					USART_Transmit_String("$T,");
 3a0:	88 e2       	ldi	r24, 0x28	; 40
 3a2:	91 e0       	ldi	r25, 0x01	; 1
 3a4:	9e de       	rcall	.-708    	; 0xe2 <USART_Transmit_String>
 3a6:	8a e4       	ldi	r24, 0x4A	; 74
					USART_Transmit_String("Enter Password");
 3a8:	91 e0       	ldi	r25, 0x01	; 1
 3aa:	9b de       	rcall	.-714    	; 0xe2 <USART_Transmit_String>
 3ac:	8d e0       	ldi	r24, 0x0D	; 13
 3ae:	95 de       	rcall	.-726    	; 0xda <USART_Transmit>
					USART_Transmit('\r');
 3b0:	80 b3       	in	r24, 0x10	; 16
 3b2:	81 78       	andi	r24, 0x81	; 129
 3b4:	81 38       	cpi	r24, 0x81	; 129
					if((PIND & 0b10000001) == 0b10000001){
 3b6:	09 f4       	brne	.+2      	; 0x3ba <main+0xf2>
 3b8:	c0 cf       	rjmp	.-128    	; 0x33a <main+0x72>
 3ba:	80 b3       	in	r24, 0x10	; 16
 3bc:	70 b3       	in	r23, 0x10	; 16
 3be:	60 b3       	in	r22, 0x10	; 16
						state == 2;
					}
					else if(PIND == 0x01 | PIND == 0x02 | PIND == 0x04 | PIND == 0x08 | PIND == 0x10 | PIND == 0x20 | PIND == 0x40 | PIND == 0x80){
 3c0:	50 b3       	in	r21, 0x10	; 16
 3c2:	40 b3       	in	r20, 0x10	; 16
 3c4:	30 b3       	in	r19, 0x10	; 16
 3c6:	20 b3       	in	r18, 0x10	; 16
 3c8:	e0 b3       	in	r30, 0x10	; 16
 3ca:	92 2d       	mov	r25, r2
 3cc:	81 30       	cpi	r24, 0x01	; 1
 3ce:	09 f0       	breq	.+2      	; 0x3d2 <main+0x10a>
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	82 2d       	mov	r24, r2
 3d4:	72 30       	cpi	r23, 0x02	; 2
 3d6:	09 f0       	breq	.+2      	; 0x3da <main+0x112>
 3d8:	80 e0       	ldi	r24, 0x00	; 0
 3da:	98 2b       	or	r25, r24
 3dc:	82 2d       	mov	r24, r2
 3de:	64 30       	cpi	r22, 0x04	; 4
 3e0:	09 f0       	breq	.+2      	; 0x3e4 <main+0x11c>
 3e2:	80 e0       	ldi	r24, 0x00	; 0
 3e4:	89 2b       	or	r24, r25
 3e6:	92 2d       	mov	r25, r2
 3e8:	58 30       	cpi	r21, 0x08	; 8
 3ea:	09 f0       	breq	.+2      	; 0x3ee <main+0x126>
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	98 2b       	or	r25, r24
 3f0:	82 2d       	mov	r24, r2
 3f2:	40 31       	cpi	r20, 0x10	; 16
 3f4:	09 f0       	breq	.+2      	; 0x3f8 <main+0x130>
 3f6:	80 e0       	ldi	r24, 0x00	; 0
 3f8:	89 2b       	or	r24, r25
 3fa:	92 2d       	mov	r25, r2
 3fc:	30 32       	cpi	r19, 0x20	; 32
 3fe:	09 f0       	breq	.+2      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	98 2b       	or	r25, r24
 404:	82 2d       	mov	r24, r2
 406:	20 34       	cpi	r18, 0x40	; 64
 408:	09 f0       	breq	.+2      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 40a:	80 e0       	ldi	r24, 0x00	; 0
 40c:	89 2b       	or	r24, r25
 40e:	39 f4       	brne	.+14     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 410:	82 2d       	mov	r24, r2
 412:	e0 38       	cpi	r30, 0x80	; 128
 414:	09 f0       	breq	.+2      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 416:	80 e0       	ldi	r24, 0x00	; 0
 418:	88 23       	and	r24, r24
 41a:	09 f4       	brne	.+2      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 41c:	8e cf       	rjmp	.-228    	; 0x33a <main+0x72>
 41e:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <PS_temp>
 422:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <PS_temp+0x1>
						PS[0] = PS_temp;
 426:	d6 01       	movw	r26, r12
 428:	8d 93       	st	X+, r24
 42a:	9c 93       	st	X, r25
 42c:	86 cf       	rjmp	.-244    	; 0x33a <main+0x72>
 42e:	22 30       	cpi	r18, 0x02	; 2
 430:	31 05       	cpc	r19, r1
 432:	09 f0       	breq	.+2      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
						state == 3;
					}
				}
				else if(state == 2){
 434:	46 c0       	rjmp	.+140    	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
 436:	80 b3       	in	r24, 0x10	; 16
 438:	70 b3       	in	r23, 0x10	; 16
 43a:	60 b3       	in	r22, 0x10	; 16
					if(CS == 0){
						if(PIND == 0x01 | PIND == 0x02 | PIND == 0x04 | PIND == 0x08 | PIND == 0x10 | PIND == 0x20 | PIND == 0x40 | PIND == 0x80){
 43c:	50 b3       	in	r21, 0x10	; 16
 43e:	40 b3       	in	r20, 0x10	; 16
 440:	30 b3       	in	r19, 0x10	; 16
 442:	20 b3       	in	r18, 0x10	; 16
 444:	e0 b3       	in	r30, 0x10	; 16
 446:	92 2d       	mov	r25, r2
 448:	81 30       	cpi	r24, 0x01	; 1
 44a:	09 f0       	breq	.+2      	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	82 2d       	mov	r24, r2
 450:	72 30       	cpi	r23, 0x02	; 2
 452:	09 f0       	breq	.+2      	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
 454:	80 e0       	ldi	r24, 0x00	; 0
 456:	98 2b       	or	r25, r24
 458:	82 2d       	mov	r24, r2
 45a:	64 30       	cpi	r22, 0x04	; 4
 45c:	09 f0       	breq	.+2      	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 45e:	80 e0       	ldi	r24, 0x00	; 0
 460:	89 2b       	or	r24, r25
 462:	92 2d       	mov	r25, r2
 464:	58 30       	cpi	r21, 0x08	; 8
 466:	09 f0       	breq	.+2      	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
 468:	90 e0       	ldi	r25, 0x00	; 0
 46a:	98 2b       	or	r25, r24
 46c:	82 2d       	mov	r24, r2
 46e:	40 31       	cpi	r20, 0x10	; 16
 470:	09 f0       	breq	.+2      	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
 472:	80 e0       	ldi	r24, 0x00	; 0
 474:	89 2b       	or	r24, r25
 476:	92 2d       	mov	r25, r2
 478:	30 32       	cpi	r19, 0x20	; 32
 47a:	09 f0       	breq	.+2      	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
 47c:	90 e0       	ldi	r25, 0x00	; 0
 47e:	98 2b       	or	r25, r24
 480:	82 2d       	mov	r24, r2
 482:	20 34       	cpi	r18, 0x40	; 64
 484:	09 f0       	breq	.+2      	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
 486:	80 e0       	ldi	r24, 0x00	; 0
 488:	89 2b       	or	r24, r25
 48a:	39 f4       	brne	.+14     	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
 48c:	82 2d       	mov	r24, r2
 48e:	e0 38       	cpi	r30, 0x80	; 128
 490:	09 f0       	breq	.+2      	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
 492:	80 e0       	ldi	r24, 0x00	; 0
 494:	88 23       	and	r24, r24
 496:	09 f4       	brne	.+2      	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
 498:	50 cf       	rjmp	.-352    	; 0x33a <main+0x72>
 49a:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <PS_temp>
							PASSWORD[0] = PS_temp;
 49e:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <PS_temp+0x1>
 4a2:	e3 01       	movw	r28, r6
 4a4:	99 83       	std	Y+1, r25	; 0x01
 4a6:	88 83       	st	Y, r24
							USART_Transmit_String("$G, 2, 7\r");
 4a8:	89 e5       	ldi	r24, 0x59	; 89
 4aa:	91 e0       	ldi	r25, 0x01	; 1
 4ac:	1a de       	rcall	.-972    	; 0xe2 <USART_Transmit_String>
							USART_Transmit_String("$T,");
 4ae:	88 e2       	ldi	r24, 0x28	; 40
 4b0:	91 e0       	ldi	r25, 0x01	; 1
 4b2:	17 de       	rcall	.-978    	; 0xe2 <USART_Transmit_String>
							USART_Transmit_String(PS[0]);
 4b4:	f6 01       	movw	r30, r12
 4b6:	80 81       	ld	r24, Z
 4b8:	91 81       	ldd	r25, Z+1	; 0x01
 4ba:	13 de       	rcall	.-986    	; 0xe2 <USART_Transmit_String>
							USART_Transmit('\r');
 4bc:	8d e0       	ldi	r24, 0x0D	; 13
 4be:	0d de       	rcall	.-998    	; 0xda <USART_Transmit>
 4c0:	3c cf       	rjmp	.-392    	; 0x33a <main+0x72>
							USART_Transmit('\r');
							state = 1;
						}
					}
				 }
				else if(state == 3){
 4c2:	23 30       	cpi	r18, 0x03	; 3
 4c4:	31 05       	cpc	r19, r1
 4c6:	89 f4       	brne	.+34     	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>
						USART_Transmit_String("$G, 2, 7\r");
 4c8:	89 e5       	ldi	r24, 0x59	; 89
 4ca:	91 e0       	ldi	r25, 0x01	; 1
 4cc:	0a de       	rcall	.-1004   	; 0xe2 <USART_Transmit_String>
 4ce:	88 e2       	ldi	r24, 0x28	; 40
						USART_Transmit_String("$T,");
 4d0:	91 e0       	ldi	r25, 0x01	; 1
 4d2:	07 de       	rcall	.-1010   	; 0xe2 <USART_Transmit_String>
 4d4:	d6 01       	movw	r26, r12
 4d6:	8d 91       	ld	r24, X+
						USART_Transmit_String(PS[0]);
 4d8:	9c 91       	ld	r25, X
 4da:	03 de       	rcall	.-1018   	; 0xe2 <USART_Transmit_String>
 4dc:	8d e0       	ldi	r24, 0x0D	; 13
 4de:	fd dd       	rcall	.-1030   	; 0xda <USART_Transmit>
 4e0:	90 92 8f 01 	sts	0x018F, r9	; 0x80018f <state+0x1>
						USART_Transmit('\r');
 4e4:	80 92 8e 01 	sts	0x018E, r8	; 0x80018e <state>
						state = 4;
 4e8:	28 cf       	rjmp	.-432    	; 0x33a <main+0x72>
 4ea:	24 30       	cpi	r18, 0x04	; 4
 4ec:	31 05       	cpc	r19, r1
 4ee:	09 f0       	breq	.+2      	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
 4f0:	49 c0       	rjmp	.+146    	; 0x584 <__LOCK_REGION_LENGTH__+0x184>
					}
				else if(state == 4){
 4f2:	80 b3       	in	r24, 0x10	; 16
 4f4:	70 b3       	in	r23, 0x10	; 16
 4f6:	60 b3       	in	r22, 0x10	; 16
 4f8:	50 b3       	in	r21, 0x10	; 16
					if(PIND == 0x01 | PIND == 0x02 | PIND == 0x04 | PIND == 0x08 | PIND == 0x10 | PIND == 0x20 | PIND == 0x40 | PIND == 0x80){
 4fa:	40 b3       	in	r20, 0x10	; 16
 4fc:	30 b3       	in	r19, 0x10	; 16
 4fe:	20 b3       	in	r18, 0x10	; 16
 500:	e0 b3       	in	r30, 0x10	; 16
 502:	92 2d       	mov	r25, r2
 504:	81 30       	cpi	r24, 0x01	; 1
 506:	09 f0       	breq	.+2      	; 0x50a <__LOCK_REGION_LENGTH__+0x10a>
 508:	90 e0       	ldi	r25, 0x00	; 0
 50a:	82 2d       	mov	r24, r2
 50c:	72 30       	cpi	r23, 0x02	; 2
 50e:	09 f0       	breq	.+2      	; 0x512 <__LOCK_REGION_LENGTH__+0x112>
 510:	80 e0       	ldi	r24, 0x00	; 0
 512:	98 2b       	or	r25, r24
 514:	82 2d       	mov	r24, r2
 516:	64 30       	cpi	r22, 0x04	; 4
 518:	09 f0       	breq	.+2      	; 0x51c <__LOCK_REGION_LENGTH__+0x11c>
 51a:	80 e0       	ldi	r24, 0x00	; 0
 51c:	89 2b       	or	r24, r25
 51e:	92 2d       	mov	r25, r2
 520:	58 30       	cpi	r21, 0x08	; 8
 522:	09 f0       	breq	.+2      	; 0x526 <__LOCK_REGION_LENGTH__+0x126>
 524:	90 e0       	ldi	r25, 0x00	; 0
 526:	98 2b       	or	r25, r24
 528:	82 2d       	mov	r24, r2
 52a:	40 31       	cpi	r20, 0x10	; 16
 52c:	09 f0       	breq	.+2      	; 0x530 <__LOCK_REGION_LENGTH__+0x130>
 52e:	80 e0       	ldi	r24, 0x00	; 0
 530:	89 2b       	or	r24, r25
 532:	92 2d       	mov	r25, r2
 534:	30 32       	cpi	r19, 0x20	; 32
 536:	09 f0       	breq	.+2      	; 0x53a <__LOCK_REGION_LENGTH__+0x13a>
 538:	90 e0       	ldi	r25, 0x00	; 0
 53a:	98 2b       	or	r25, r24
 53c:	82 2d       	mov	r24, r2
 53e:	20 34       	cpi	r18, 0x40	; 64
 540:	09 f0       	breq	.+2      	; 0x544 <__LOCK_REGION_LENGTH__+0x144>
 542:	80 e0       	ldi	r24, 0x00	; 0
 544:	89 2b       	or	r24, r25
 546:	39 f4       	brne	.+14     	; 0x556 <__LOCK_REGION_LENGTH__+0x156>
 548:	82 2d       	mov	r24, r2
 54a:	e0 38       	cpi	r30, 0x80	; 128
 54c:	09 f0       	breq	.+2      	; 0x550 <__LOCK_REGION_LENGTH__+0x150>
 54e:	80 e0       	ldi	r24, 0x00	; 0
 550:	88 23       	and	r24, r24
 552:	09 f4       	brne	.+2      	; 0x556 <__LOCK_REGION_LENGTH__+0x156>
 554:	f2 ce       	rjmp	.-540    	; 0x33a <main+0x72>
 556:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <PS_temp>
						PS[1] = PS_temp;
 55a:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <PS_temp+0x1>
 55e:	e6 01       	movw	r28, r12
 560:	9b 83       	std	Y+3, r25	; 0x03
 562:	8a 83       	std	Y+2, r24	; 0x02
 564:	83 e6       	ldi	r24, 0x63	; 99
						USART_Transmit_String("$G, 2, 8\r");
 566:	91 e0       	ldi	r25, 0x01	; 1
 568:	bc dd       	rcall	.-1160   	; 0xe2 <USART_Transmit_String>
 56a:	88 e2       	ldi	r24, 0x28	; 40
 56c:	91 e0       	ldi	r25, 0x01	; 1
						USART_Transmit_String("$T,");
 56e:	b9 dd       	rcall	.-1166   	; 0xe2 <USART_Transmit_String>
 570:	8a 81       	ldd	r24, Y+2	; 0x02
 572:	9b 81       	ldd	r25, Y+3	; 0x03
 574:	b6 dd       	rcall	.-1172   	; 0xe2 <USART_Transmit_String>
						USART_Transmit_String(PS[1]);
 576:	8d e0       	ldi	r24, 0x0D	; 13
 578:	b0 dd       	rcall	.-1184   	; 0xda <USART_Transmit>
 57a:	50 92 8f 01 	sts	0x018F, r5	; 0x80018f <state+0x1>
						USART_Transmit('\r');
 57e:	40 92 8e 01 	sts	0x018E, r4	; 0x80018e <state>
 582:	db ce       	rjmp	.-586    	; 0x33a <main+0x72>
						state = 5;
 584:	25 30       	cpi	r18, 0x05	; 5
 586:	31 05       	cpc	r19, r1
 588:	09 f0       	breq	.+2      	; 0x58c <__LOCK_REGION_LENGTH__+0x18c>
 58a:	4e c0       	rjmp	.+156    	; 0x628 <__LOCK_REGION_LENGTH__+0x228>
 58c:	80 b3       	in	r24, 0x10	; 16
					}
				}
				else if(state == 5){
 58e:	70 b3       	in	r23, 0x10	; 16
 590:	60 b3       	in	r22, 0x10	; 16
 592:	50 b3       	in	r21, 0x10	; 16
 594:	40 b3       	in	r20, 0x10	; 16
					if(PIND == 0x01 | PIND == 0x02 | PIND == 0x04 | PIND == 0x08 | PIND == 0x10 | PIND == 0x20 | PIND == 0x40 | PIND == 0x80){
 596:	30 b3       	in	r19, 0x10	; 16
 598:	20 b3       	in	r18, 0x10	; 16
 59a:	e0 b3       	in	r30, 0x10	; 16
 59c:	92 2d       	mov	r25, r2
 59e:	81 30       	cpi	r24, 0x01	; 1
 5a0:	09 f0       	breq	.+2      	; 0x5a4 <__LOCK_REGION_LENGTH__+0x1a4>
 5a2:	90 e0       	ldi	r25, 0x00	; 0
 5a4:	82 2d       	mov	r24, r2
 5a6:	72 30       	cpi	r23, 0x02	; 2
 5a8:	09 f0       	breq	.+2      	; 0x5ac <__LOCK_REGION_LENGTH__+0x1ac>
 5aa:	80 e0       	ldi	r24, 0x00	; 0
 5ac:	98 2b       	or	r25, r24
 5ae:	82 2d       	mov	r24, r2
 5b0:	64 30       	cpi	r22, 0x04	; 4
 5b2:	09 f0       	breq	.+2      	; 0x5b6 <__LOCK_REGION_LENGTH__+0x1b6>
 5b4:	80 e0       	ldi	r24, 0x00	; 0
 5b6:	89 2b       	or	r24, r25
 5b8:	92 2d       	mov	r25, r2
 5ba:	58 30       	cpi	r21, 0x08	; 8
 5bc:	09 f0       	breq	.+2      	; 0x5c0 <__LOCK_REGION_LENGTH__+0x1c0>
 5be:	90 e0       	ldi	r25, 0x00	; 0
 5c0:	98 2b       	or	r25, r24
 5c2:	82 2d       	mov	r24, r2
 5c4:	40 31       	cpi	r20, 0x10	; 16
 5c6:	09 f0       	breq	.+2      	; 0x5ca <__LOCK_REGION_LENGTH__+0x1ca>
 5c8:	80 e0       	ldi	r24, 0x00	; 0
 5ca:	89 2b       	or	r24, r25
 5cc:	92 2d       	mov	r25, r2
 5ce:	30 32       	cpi	r19, 0x20	; 32
 5d0:	09 f0       	breq	.+2      	; 0x5d4 <__LOCK_REGION_LENGTH__+0x1d4>
 5d2:	90 e0       	ldi	r25, 0x00	; 0
 5d4:	98 2b       	or	r25, r24
 5d6:	82 2d       	mov	r24, r2
 5d8:	20 34       	cpi	r18, 0x40	; 64
 5da:	09 f0       	breq	.+2      	; 0x5de <__LOCK_REGION_LENGTH__+0x1de>
 5dc:	80 e0       	ldi	r24, 0x00	; 0
 5de:	89 2b       	or	r24, r25
 5e0:	39 f4       	brne	.+14     	; 0x5f0 <__LOCK_REGION_LENGTH__+0x1f0>
 5e2:	82 2d       	mov	r24, r2
 5e4:	e0 38       	cpi	r30, 0x80	; 128
 5e6:	09 f0       	breq	.+2      	; 0x5ea <__LOCK_REGION_LENGTH__+0x1ea>
 5e8:	80 e0       	ldi	r24, 0x00	; 0
 5ea:	88 23       	and	r24, r24
 5ec:	09 f4       	brne	.+2      	; 0x5f0 <__LOCK_REGION_LENGTH__+0x1f0>
 5ee:	a5 ce       	rjmp	.-694    	; 0x33a <main+0x72>
 5f0:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <PS_temp>
						PS[2] = PS_temp;
 5f4:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <PS_temp+0x1>
 5f8:	f6 01       	movw	r30, r12
 5fa:	95 83       	std	Z+5, r25	; 0x05
 5fc:	84 83       	std	Z+4, r24	; 0x04
 5fe:	8d e6       	ldi	r24, 0x6D	; 109
 600:	91 e0       	ldi	r25, 0x01	; 1
						USART_Transmit_String("$G, 2, 9\r");
 602:	6f dd       	rcall	.-1314   	; 0xe2 <USART_Transmit_String>
 604:	88 e2       	ldi	r24, 0x28	; 40
 606:	91 e0       	ldi	r25, 0x01	; 1
 608:	6c dd       	rcall	.-1320   	; 0xe2 <USART_Transmit_String>
						USART_Transmit_String("$T,");
 60a:	d6 01       	movw	r26, r12
 60c:	14 96       	adiw	r26, 0x04	; 4
 60e:	8d 91       	ld	r24, X+
 610:	9c 91       	ld	r25, X
						USART_Transmit_String(PS[2]);
 612:	15 97       	sbiw	r26, 0x05	; 5
 614:	66 dd       	rcall	.-1332   	; 0xe2 <USART_Transmit_String>
 616:	8d e0       	ldi	r24, 0x0D	; 13
 618:	60 dd       	rcall	.-1344   	; 0xda <USART_Transmit>
 61a:	c6 e0       	ldi	r28, 0x06	; 6
 61c:	d0 e0       	ldi	r29, 0x00	; 0
 61e:	d0 93 8f 01 	sts	0x018F, r29	; 0x80018f <state+0x1>
						USART_Transmit('\r');
 622:	c0 93 8e 01 	sts	0x018E, r28	; 0x80018e <state>
						state = 6;
 626:	89 ce       	rjmp	.-750    	; 0x33a <main+0x72>
 628:	26 30       	cpi	r18, 0x06	; 6
 62a:	31 05       	cpc	r19, r1
 62c:	09 f0       	breq	.+2      	; 0x630 <__LOCK_REGION_LENGTH__+0x230>
 62e:	4e c0       	rjmp	.+156    	; 0x6cc <__LOCK_REGION_LENGTH__+0x2cc>
 630:	80 b3       	in	r24, 0x10	; 16
 632:	70 b3       	in	r23, 0x10	; 16
					}
				}
				else if(state == 6){
 634:	60 b3       	in	r22, 0x10	; 16
 636:	50 b3       	in	r21, 0x10	; 16
 638:	40 b3       	in	r20, 0x10	; 16
 63a:	30 b3       	in	r19, 0x10	; 16
					if(PIND == 0x01 | PIND == 0x02 | PIND == 0x04 | PIND == 0x08 | PIND == 0x10 | PIND == 0x20 | PIND == 0x40 | PIND == 0x80){
 63c:	20 b3       	in	r18, 0x10	; 16
 63e:	e0 b3       	in	r30, 0x10	; 16
 640:	92 2d       	mov	r25, r2
 642:	81 30       	cpi	r24, 0x01	; 1
 644:	09 f0       	breq	.+2      	; 0x648 <__LOCK_REGION_LENGTH__+0x248>
 646:	90 e0       	ldi	r25, 0x00	; 0
 648:	82 2d       	mov	r24, r2
 64a:	72 30       	cpi	r23, 0x02	; 2
 64c:	09 f0       	breq	.+2      	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 64e:	80 e0       	ldi	r24, 0x00	; 0
 650:	98 2b       	or	r25, r24
 652:	82 2d       	mov	r24, r2
 654:	64 30       	cpi	r22, 0x04	; 4
 656:	09 f0       	breq	.+2      	; 0x65a <__LOCK_REGION_LENGTH__+0x25a>
 658:	80 e0       	ldi	r24, 0x00	; 0
 65a:	98 2b       	or	r25, r24
 65c:	82 2d       	mov	r24, r2
 65e:	58 30       	cpi	r21, 0x08	; 8
 660:	09 f0       	breq	.+2      	; 0x664 <__LOCK_REGION_LENGTH__+0x264>
 662:	80 e0       	ldi	r24, 0x00	; 0
 664:	98 2b       	or	r25, r24
 666:	82 2d       	mov	r24, r2
 668:	40 31       	cpi	r20, 0x10	; 16
 66a:	09 f0       	breq	.+2      	; 0x66e <__LOCK_REGION_LENGTH__+0x26e>
 66c:	80 e0       	ldi	r24, 0x00	; 0
 66e:	98 2b       	or	r25, r24
 670:	82 2d       	mov	r24, r2
 672:	30 32       	cpi	r19, 0x20	; 32
 674:	09 f0       	breq	.+2      	; 0x678 <__LOCK_REGION_LENGTH__+0x278>
 676:	80 e0       	ldi	r24, 0x00	; 0
 678:	98 2b       	or	r25, r24
 67a:	82 2d       	mov	r24, r2
 67c:	20 34       	cpi	r18, 0x40	; 64
 67e:	09 f0       	breq	.+2      	; 0x682 <__LOCK_REGION_LENGTH__+0x282>
 680:	80 e0       	ldi	r24, 0x00	; 0
 682:	89 2b       	or	r24, r25
 684:	39 f4       	brne	.+14     	; 0x694 <__LOCK_REGION_LENGTH__+0x294>
 686:	82 2d       	mov	r24, r2
 688:	e0 38       	cpi	r30, 0x80	; 128
 68a:	09 f0       	breq	.+2      	; 0x68e <__LOCK_REGION_LENGTH__+0x28e>
 68c:	80 e0       	ldi	r24, 0x00	; 0
 68e:	88 23       	and	r24, r24
 690:	09 f4       	brne	.+2      	; 0x694 <__LOCK_REGION_LENGTH__+0x294>
 692:	53 ce       	rjmp	.-858    	; 0x33a <main+0x72>
 694:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <PS_temp>
						PS[3] = PS_temp;
 698:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <PS_temp+0x1>
 69c:	f6 01       	movw	r30, r12
 69e:	97 83       	std	Z+7, r25	; 0x07
 6a0:	86 83       	std	Z+6, r24	; 0x06
 6a2:	87 e7       	ldi	r24, 0x77	; 119
						USART_Transmit_String("$G, 2, 10\r");
 6a4:	91 e0       	ldi	r25, 0x01	; 1
 6a6:	1d dd       	rcall	.-1478   	; 0xe2 <USART_Transmit_String>
 6a8:	88 e2       	ldi	r24, 0x28	; 40
 6aa:	91 e0       	ldi	r25, 0x01	; 1
						USART_Transmit_String("$T,");
 6ac:	1a dd       	rcall	.-1484   	; 0xe2 <USART_Transmit_String>
 6ae:	d6 01       	movw	r26, r12
 6b0:	16 96       	adiw	r26, 0x06	; 6
 6b2:	8d 91       	ld	r24, X+
						USART_Transmit_String(PS[3]);
 6b4:	9c 91       	ld	r25, X
 6b6:	17 97       	sbiw	r26, 0x07	; 7
 6b8:	14 dd       	rcall	.-1496   	; 0xe2 <USART_Transmit_String>
 6ba:	8d e0       	ldi	r24, 0x0D	; 13
 6bc:	0e dd       	rcall	.-1508   	; 0xda <USART_Transmit>
 6be:	c7 e0       	ldi	r28, 0x07	; 7
 6c0:	d0 e0       	ldi	r29, 0x00	; 0
						USART_Transmit('\r');
 6c2:	d0 93 8f 01 	sts	0x018F, r29	; 0x80018f <state+0x1>
 6c6:	c0 93 8e 01 	sts	0x018E, r28	; 0x80018e <state>
						state = 7;
 6ca:	37 ce       	rjmp	.-914    	; 0x33a <main+0x72>
 6cc:	27 30       	cpi	r18, 0x07	; 7
 6ce:	31 05       	cpc	r19, r1
 6d0:	41 f4       	brne	.+16     	; 0x6e2 <__LOCK_REGION_LENGTH__+0x2e2>
 6d2:	2e dd       	rcall	.-1444   	; 0x130 <Check_Password>
 6d4:	e8 e0       	ldi	r30, 0x08	; 8
					}
				}
				else if(state == 7){
 6d6:	f0 e0       	ldi	r31, 0x00	; 0
 6d8:	f0 93 8f 01 	sts	0x018F, r31	; 0x80018f <state+0x1>
					Check_Password();
 6dc:	e0 93 8e 01 	sts	0x018E, r30	; 0x80018e <state>
					state = 8;
 6e0:	2c ce       	rjmp	.-936    	; 0x33a <main+0x72>
 6e2:	28 30       	cpi	r18, 0x08	; 8
 6e4:	31 05       	cpc	r19, r1
 6e6:	09 f0       	breq	.+2      	; 0x6ea <__LOCK_REGION_LENGTH__+0x2ea>
 6e8:	28 ce       	rjmp	.-944    	; 0x33a <main+0x72>
 6ea:	e2 e1       	ldi	r30, 0x12	; 18
 6ec:	f1 e0       	ldi	r31, 0x01	; 1
				}
				else if(state == 8){
 6ee:	a2 e0       	ldi	r26, 0x02	; 2
 6f0:	b1 e0       	ldi	r27, 0x01	; 1
 6f2:	8c 91       	ld	r24, X
 6f4:	12 96       	adiw	r26, 0x02	; 2
 6f6:	e8 01       	movw	r28, r16
 6f8:	88 83       	st	Y, r24
 6fa:	df ef       	ldi	r29, 0xFF	; 255
 6fc:	21 ee       	ldi	r18, 0xE1	; 225
					for(int i = 0; i < 8; i++){
						PORTF = LED_flicker[i];
 6fe:	34 e0       	ldi	r19, 0x04	; 4
 700:	d1 50       	subi	r29, 0x01	; 1
 702:	20 40       	sbci	r18, 0x00	; 0
 704:	30 40       	sbci	r19, 0x00	; 0
 706:	e1 f7       	brne	.-8      	; 0x700 <__LOCK_REGION_LENGTH__+0x300>
 708:	00 c0       	rjmp	.+0      	; 0x70a <__LOCK_REGION_LENGTH__+0x30a>
 70a:	00 00       	nop
 70c:	ea 17       	cp	r30, r26
 70e:	fb 07       	cpc	r31, r27
 710:	81 f7       	brne	.-32     	; 0x6f2 <__LOCK_REGION_LENGTH__+0x2f2>
 712:	32 97       	sbiw	r30, 0x02	; 2
 714:	80 81       	ld	r24, Z
				else if(state == 7){
					Check_Password();
					state = 8;
				}
				else if(state == 8){
					for(int i = 0; i < 8; i++){
 716:	d8 01       	movw	r26, r16
 718:	8c 93       	st	X, r24
 71a:	bf ef       	ldi	r27, 0xFF	; 255
 71c:	c1 ee       	ldi	r28, 0xE1	; 225
						PORTF = LED_flicker[i];
						_delay_ms(100);
					}
					for(int i = 7; i >= 0; i--){
						PORTF = LED_flicker[i];
 71e:	d4 e0       	ldi	r29, 0x04	; 4
 720:	b1 50       	subi	r27, 0x01	; 1
 722:	c0 40       	sbci	r28, 0x00	; 0
 724:	d0 40       	sbci	r29, 0x00	; 0
 726:	e1 f7       	brne	.-8      	; 0x720 <__LOCK_REGION_LENGTH__+0x320>
 728:	00 c0       	rjmp	.+0      	; 0x72a <__LOCK_REGION_LENGTH__+0x32a>
 72a:	00 00       	nop
 72c:	ea 15       	cp	r30, r10
 72e:	fb 05       	cpc	r31, r11
 730:	81 f7       	brne	.-32     	; 0x712 <__LOCK_REGION_LENGTH__+0x312>
 732:	11 dd       	rcall	.-1502   	; 0x156 <Open_Door>
 734:	10 92 8f 01 	sts	0x018F, r1	; 0x80018f <state+0x1>
				else if(state == 8){
					for(int i = 0; i < 8; i++){
						PORTF = LED_flicker[i];
						_delay_ms(100);
					}
					for(int i = 7; i >= 0; i--){
 738:	10 92 8e 01 	sts	0x018E, r1	; 0x80018e <state>
						PORTF = LED_flicker[i];
						_delay_ms(100);
					}
					Open_Door();
 73c:	fe cd       	rjmp	.-1028   	; 0x33a <main+0x72>

0000073e <_exit>:
 73e:	f8 94       	cli

00000740 <__stop_program>:
					state = 0;
 740:	ff cf       	rjmp	.-2      	; 0x740 <__stop_program>
