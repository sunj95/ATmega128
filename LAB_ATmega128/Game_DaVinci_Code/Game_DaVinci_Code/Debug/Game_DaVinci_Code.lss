
Game_DaVinci_Code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001c6  00800100  00000ce0  00000d74  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ce0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000d2  008002c6  008002c6  00000f3a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f3a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000f6c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  00000fa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001672  00000000  00000000  00001028  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008b3  00000000  00000000  0000269a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c7c  00000000  00000000  00002f4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  00003bcc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000056e  00000000  00000000  00003d4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008cd  00000000  00000000  000042ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00004b87  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	12 e0       	ldi	r17, 0x02	; 2
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 ee       	ldi	r30, 0xE0	; 224
  a0:	fc e0       	ldi	r31, 0x0C	; 12
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 3c       	cpi	r26, 0xC6	; 198
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	23 e0       	ldi	r18, 0x03	; 3
  b4:	a6 ec       	ldi	r26, 0xC6	; 198
  b6:	b2 e0       	ldi	r27, 0x02	; 2
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a8 39       	cpi	r26, 0x98	; 152
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	5a d1       	rcall	.+692    	; 0x378 <main>
  c4:	0b c6       	rjmp	.+3094   	; 0xcdc <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <Timer_Init>:
/*******************************************************************/
/*                         Timer Functions                         */
/*******************************************************************/

void Timer_Init(){
	TCCR0 = (1<<CS0);
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	83 bf       	out	0x33, r24	; 51
	TIMSK = (1<<TOIE0);
  cc:	87 bf       	out	0x37, r24	; 55
	TCNT0 = 0;
  ce:	12 be       	out	0x32, r1	; 50
  d0:	08 95       	ret

000000d2 <USART0_Init>:
/*******************************************************************/
/*                         USART Functions                         */
/*******************************************************************/

void USART0_Init(unsigned int ubrr){ // Set USART0 Registers
	UBRR0H = (unsigned char)(ubrr >> 8); // UBRR's High bits
  d2:	90 93 90 00 	sts	0x0090, r25	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L = (unsigned char)(ubrr);		 // UBRR;s Low bits -> UBRR : 103
  d6:	89 b9       	out	0x09, r24	; 9
	UCSR0B = (1<<RXEN0) | (1<<TXEN0); // Receive Enable, Transmit Enable
  d8:	88 e1       	ldi	r24, 0x18	; 24
  da:	8a b9       	out	0x0a, r24	; 10
	UCSR0C = (1<<UCSZ00) | (1<<UCSZ01);			// Set Data bits to 8 bits
  dc:	86 e0       	ldi	r24, 0x06	; 6
  de:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
  e2:	08 95       	ret

000000e4 <USART0_Transmit>:
}

void USART0_Transmit(char data){
	while(!((UCSR0A)  & (1<<UDRE0))); // Wait for Data Register empty
  e4:	5d 9b       	sbis	0x0b, 5	; 11
  e6:	fe cf       	rjmp	.-4      	; 0xe4 <USART0_Transmit>
	UDR0 = data;
  e8:	8c b9       	out	0x0c, r24	; 12
  ea:	08 95       	ret

000000ec <USART0_Transmit_String>:
}

void USART0_Transmit_String(char *str){
  ec:	cf 93       	push	r28
  ee:	df 93       	push	r29
  f0:	ec 01       	movw	r28, r24
	while(*str != '\0') USART0_Transmit(*str++);
  f2:	88 81       	ld	r24, Y
  f4:	88 23       	and	r24, r24
  f6:	29 f0       	breq	.+10     	; 0x102 <USART0_Transmit_String+0x16>
  f8:	21 96       	adiw	r28, 0x01	; 1
  fa:	f4 df       	rcall	.-24     	; 0xe4 <USART0_Transmit>
  fc:	89 91       	ld	r24, Y+
  fe:	81 11       	cpse	r24, r1
 100:	fc cf       	rjmp	.-8      	; 0xfa <USART0_Transmit_String+0xe>
}
 102:	df 91       	pop	r29
 104:	cf 91       	pop	r28
 106:	08 95       	ret

00000108 <USART0_Receive>:

char USART0_Receive(void){
	while(!(UCSR0A & (1<<RXC0))); // Wait for Receive Buffer is empty
 108:	5f 9b       	sbis	0x0b, 7	; 11
 10a:	fe cf       	rjmp	.-4      	; 0x108 <USART0_Receive>
	return UDR0;
 10c:	8c b1       	in	r24, 0x0c	; 12
}
 10e:	08 95       	ret

00000110 <USART1_Init>:

void USART1_Init(unsigned int ubrr){ // Set USART0 Registers
	UBRR1H = (unsigned char)(ubrr >> 8); // UBRR's High bits
 110:	90 93 98 00 	sts	0x0098, r25	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
	UBRR1L = (unsigned char)(ubrr);		 // UBRR;s Low bits -> UBRR : 103
 114:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
	UCSR1B = (1<<RXEN1) | (1<<TXEN1); // Receive Enable, Transmit Enable
 118:	88 e1       	ldi	r24, 0x18	; 24
 11a:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
	UCSR1C = (1<<UCSZ10) | (1<<UCSZ11);			// Set Data bits to 8 bits
 11e:	86 e0       	ldi	r24, 0x06	; 6
 120:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <__TEXT_REGION_LENGTH__+0x7e009d>
 124:	08 95       	ret

00000126 <USART1_Transmit>:
}

void USART1_Transmit(char data){
	while(!((UCSR1A)  & (1<<UDRE1))); // Wait for Data Register empty
 126:	eb e9       	ldi	r30, 0x9B	; 155
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	90 81       	ld	r25, Z
 12c:	95 ff       	sbrs	r25, 5
 12e:	fd cf       	rjmp	.-6      	; 0x12a <USART1_Transmit+0x4>
	UDR1 = data;
 130:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
 134:	08 95       	ret

00000136 <USART1_Transmit_String>:
}

void USART1_Transmit_String(char *str){
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
 13a:	ec 01       	movw	r28, r24
	while(*str != '\0') USART1_Transmit(*str++);
 13c:	88 81       	ld	r24, Y
 13e:	88 23       	and	r24, r24
 140:	29 f0       	breq	.+10     	; 0x14c <USART1_Transmit_String+0x16>
 142:	21 96       	adiw	r28, 0x01	; 1
 144:	f0 df       	rcall	.-32     	; 0x126 <USART1_Transmit>
 146:	89 91       	ld	r24, Y+
 148:	81 11       	cpse	r24, r1
 14a:	fc cf       	rjmp	.-8      	; 0x144 <USART1_Transmit_String+0xe>
}
 14c:	df 91       	pop	r29
 14e:	cf 91       	pop	r28
 150:	08 95       	ret

00000152 <USART_Transmit_number>:

/*******************************************************************/
/*                          USER Functions                         */
/*******************************************************************/
void USART_Transmit_number(char USART_NUM,char num){
	if(num == 0){
 152:	61 11       	cpse	r22, r1
 154:	0b c0       	rjmp	.+22     	; 0x16c <USART_Transmit_number+0x1a>
		if(USART_NUM == 0) USART0_Transmit('0');
 156:	81 11       	cpse	r24, r1
 158:	03 c0       	rjmp	.+6      	; 0x160 <USART_Transmit_number+0xe>
 15a:	80 e3       	ldi	r24, 0x30	; 48
 15c:	c3 cf       	rjmp	.-122    	; 0xe4 <USART0_Transmit>
 15e:	08 95       	ret
		else if(USART_NUM == 1) USART1_Transmit('0');
 160:	81 30       	cpi	r24, 0x01	; 1
 162:	09 f0       	breq	.+2      	; 0x166 <USART_Transmit_number+0x14>
 164:	a0 c0       	rjmp	.+320    	; 0x2a6 <USART_Transmit_number+0x154>
 166:	80 e3       	ldi	r24, 0x30	; 48
 168:	de cf       	rjmp	.-68     	; 0x126 <USART1_Transmit>
 16a:	08 95       	ret
	}
	else if(num == 1){
 16c:	61 30       	cpi	r22, 0x01	; 1
 16e:	59 f4       	brne	.+22     	; 0x186 <USART_Transmit_number+0x34>
		if(USART_NUM == 0) USART0_Transmit('1');
 170:	81 11       	cpse	r24, r1
 172:	03 c0       	rjmp	.+6      	; 0x17a <USART_Transmit_number+0x28>
 174:	81 e3       	ldi	r24, 0x31	; 49
 176:	b6 cf       	rjmp	.-148    	; 0xe4 <USART0_Transmit>
 178:	08 95       	ret
		else if(USART_NUM == 1) USART1_Transmit('1');
 17a:	81 30       	cpi	r24, 0x01	; 1
 17c:	09 f0       	breq	.+2      	; 0x180 <USART_Transmit_number+0x2e>
 17e:	93 c0       	rjmp	.+294    	; 0x2a6 <USART_Transmit_number+0x154>
 180:	81 e3       	ldi	r24, 0x31	; 49
 182:	d1 cf       	rjmp	.-94     	; 0x126 <USART1_Transmit>
 184:	08 95       	ret
	}
	else if(num == 2){
 186:	62 30       	cpi	r22, 0x02	; 2
		if(USART_NUM == 0) USART0_Transmit('2');
 188:	59 f4       	brne	.+22     	; 0x1a0 <USART_Transmit_number+0x4e>
 18a:	81 11       	cpse	r24, r1
 18c:	03 c0       	rjmp	.+6      	; 0x194 <USART_Transmit_number+0x42>
 18e:	82 e3       	ldi	r24, 0x32	; 50
 190:	a9 cf       	rjmp	.-174    	; 0xe4 <USART0_Transmit>
		else if(USART_NUM == 1) USART1_Transmit('2');
 192:	08 95       	ret
 194:	81 30       	cpi	r24, 0x01	; 1
 196:	09 f0       	breq	.+2      	; 0x19a <USART_Transmit_number+0x48>
 198:	86 c0       	rjmp	.+268    	; 0x2a6 <USART_Transmit_number+0x154>
 19a:	82 e3       	ldi	r24, 0x32	; 50
 19c:	c4 cf       	rjmp	.-120    	; 0x126 <USART1_Transmit>
	}
	else if(num == 3){
 19e:	08 95       	ret
 1a0:	63 30       	cpi	r22, 0x03	; 3
		if(USART_NUM == 0) USART0_Transmit('3');
 1a2:	59 f4       	brne	.+22     	; 0x1ba <USART_Transmit_number+0x68>
 1a4:	81 11       	cpse	r24, r1
 1a6:	03 c0       	rjmp	.+6      	; 0x1ae <USART_Transmit_number+0x5c>
 1a8:	83 e3       	ldi	r24, 0x33	; 51
 1aa:	9c cf       	rjmp	.-200    	; 0xe4 <USART0_Transmit>
		else if(USART_NUM == 1) USART1_Transmit('3');
 1ac:	08 95       	ret
 1ae:	81 30       	cpi	r24, 0x01	; 1
 1b0:	09 f0       	breq	.+2      	; 0x1b4 <USART_Transmit_number+0x62>
 1b2:	79 c0       	rjmp	.+242    	; 0x2a6 <USART_Transmit_number+0x154>
 1b4:	83 e3       	ldi	r24, 0x33	; 51
 1b6:	b7 cf       	rjmp	.-146    	; 0x126 <USART1_Transmit>
	}
	else if(num == 4){
 1b8:	08 95       	ret
 1ba:	64 30       	cpi	r22, 0x04	; 4
		if(USART_NUM == 0) USART0_Transmit('4');
 1bc:	59 f4       	brne	.+22     	; 0x1d4 <USART_Transmit_number+0x82>
 1be:	81 11       	cpse	r24, r1
 1c0:	03 c0       	rjmp	.+6      	; 0x1c8 <USART_Transmit_number+0x76>
 1c2:	84 e3       	ldi	r24, 0x34	; 52
 1c4:	8f cf       	rjmp	.-226    	; 0xe4 <USART0_Transmit>
		else if(USART_NUM == 1) USART1_Transmit('4');
 1c6:	08 95       	ret
 1c8:	81 30       	cpi	r24, 0x01	; 1
 1ca:	09 f0       	breq	.+2      	; 0x1ce <USART_Transmit_number+0x7c>
 1cc:	6c c0       	rjmp	.+216    	; 0x2a6 <USART_Transmit_number+0x154>
 1ce:	84 e3       	ldi	r24, 0x34	; 52
 1d0:	aa cf       	rjmp	.-172    	; 0x126 <USART1_Transmit>
	}
	else if(num == 5){
 1d2:	08 95       	ret
		if(USART_NUM == 0) USART0_Transmit('5');
 1d4:	65 30       	cpi	r22, 0x05	; 5
 1d6:	59 f4       	brne	.+22     	; 0x1ee <USART_Transmit_number+0x9c>
 1d8:	81 11       	cpse	r24, r1
 1da:	03 c0       	rjmp	.+6      	; 0x1e2 <USART_Transmit_number+0x90>
 1dc:	85 e3       	ldi	r24, 0x35	; 53
 1de:	82 cf       	rjmp	.-252    	; 0xe4 <USART0_Transmit>
		else if(USART_NUM == 1) USART1_Transmit('5');
 1e0:	08 95       	ret
 1e2:	81 30       	cpi	r24, 0x01	; 1
 1e4:	09 f0       	breq	.+2      	; 0x1e8 <USART_Transmit_number+0x96>
 1e6:	5f c0       	rjmp	.+190    	; 0x2a6 <USART_Transmit_number+0x154>
 1e8:	85 e3       	ldi	r24, 0x35	; 53
	}
	else if(num == 6){
 1ea:	9d cf       	rjmp	.-198    	; 0x126 <USART1_Transmit>
 1ec:	08 95       	ret
		if(USART_NUM == 0) USART0_Transmit('6');
 1ee:	66 30       	cpi	r22, 0x06	; 6
 1f0:	59 f4       	brne	.+22     	; 0x208 <USART_Transmit_number+0xb6>
 1f2:	81 11       	cpse	r24, r1
 1f4:	03 c0       	rjmp	.+6      	; 0x1fc <USART_Transmit_number+0xaa>
 1f6:	86 e3       	ldi	r24, 0x36	; 54
		else if(USART_NUM == 1) USART1_Transmit('6');
 1f8:	75 cf       	rjmp	.-278    	; 0xe4 <USART0_Transmit>
 1fa:	08 95       	ret
 1fc:	81 30       	cpi	r24, 0x01	; 1
 1fe:	09 f0       	breq	.+2      	; 0x202 <USART_Transmit_number+0xb0>
 200:	52 c0       	rjmp	.+164    	; 0x2a6 <USART_Transmit_number+0x154>
 202:	86 e3       	ldi	r24, 0x36	; 54
	}
	else if(num == 7){
 204:	90 cf       	rjmp	.-224    	; 0x126 <USART1_Transmit>
 206:	08 95       	ret
		if(USART_NUM == 0) USART0_Transmit('7');
 208:	67 30       	cpi	r22, 0x07	; 7
 20a:	59 f4       	brne	.+22     	; 0x222 <USART_Transmit_number+0xd0>
 20c:	81 11       	cpse	r24, r1
 20e:	03 c0       	rjmp	.+6      	; 0x216 <USART_Transmit_number+0xc4>
 210:	87 e3       	ldi	r24, 0x37	; 55
		else if(USART_NUM == 1) USART1_Transmit('7');
 212:	68 cf       	rjmp	.-304    	; 0xe4 <USART0_Transmit>
 214:	08 95       	ret
 216:	81 30       	cpi	r24, 0x01	; 1
 218:	09 f0       	breq	.+2      	; 0x21c <USART_Transmit_number+0xca>
 21a:	45 c0       	rjmp	.+138    	; 0x2a6 <USART_Transmit_number+0x154>
 21c:	87 e3       	ldi	r24, 0x37	; 55
	}
	else if(num == 8){
 21e:	83 cf       	rjmp	.-250    	; 0x126 <USART1_Transmit>
 220:	08 95       	ret
		if(USART_NUM == 0) USART0_Transmit('8');
 222:	68 30       	cpi	r22, 0x08	; 8
 224:	59 f4       	brne	.+22     	; 0x23c <USART_Transmit_number+0xea>
 226:	81 11       	cpse	r24, r1
 228:	03 c0       	rjmp	.+6      	; 0x230 <USART_Transmit_number+0xde>
		else if(USART_NUM == 1) USART1_Transmit('8');
 22a:	88 e3       	ldi	r24, 0x38	; 56
 22c:	5b cf       	rjmp	.-330    	; 0xe4 <USART0_Transmit>
 22e:	08 95       	ret
 230:	81 30       	cpi	r24, 0x01	; 1
 232:	09 f0       	breq	.+2      	; 0x236 <USART_Transmit_number+0xe4>
 234:	38 c0       	rjmp	.+112    	; 0x2a6 <USART_Transmit_number+0x154>
 236:	88 e3       	ldi	r24, 0x38	; 56
	}
	else if(num == 9){
 238:	76 cf       	rjmp	.-276    	; 0x126 <USART1_Transmit>
		if(USART_NUM == 0) USART0_Transmit('9');
 23a:	08 95       	ret
 23c:	69 30       	cpi	r22, 0x09	; 9
 23e:	51 f4       	brne	.+20     	; 0x254 <USART_Transmit_number+0x102>
 240:	81 11       	cpse	r24, r1
 242:	03 c0       	rjmp	.+6      	; 0x24a <USART_Transmit_number+0xf8>
		else if(USART_NUM == 1) USART1_Transmit('9');
 244:	89 e3       	ldi	r24, 0x39	; 57
 246:	4e cf       	rjmp	.-356    	; 0xe4 <USART0_Transmit>
 248:	08 95       	ret
 24a:	81 30       	cpi	r24, 0x01	; 1
 24c:	61 f5       	brne	.+88     	; 0x2a6 <USART_Transmit_number+0x154>
 24e:	89 e3       	ldi	r24, 0x39	; 57
	}
	else if(num == 10){
 250:	6a cf       	rjmp	.-300    	; 0x126 <USART1_Transmit>
		if(USART_NUM == 0) USART0_Transmit_String("10");
 252:	08 95       	ret
 254:	6a 30       	cpi	r22, 0x0A	; 10
 256:	61 f4       	brne	.+24     	; 0x270 <USART_Transmit_number+0x11e>
 258:	81 11       	cpse	r24, r1
 25a:	04 c0       	rjmp	.+8      	; 0x264 <USART_Transmit_number+0x112>
 25c:	80 e0       	ldi	r24, 0x00	; 0
		else if(USART_NUM == 1) USART1_Transmit_String("10");
 25e:	91 e0       	ldi	r25, 0x01	; 1
 260:	45 cf       	rjmp	.-374    	; 0xec <USART0_Transmit_String>
 262:	08 95       	ret
 264:	81 30       	cpi	r24, 0x01	; 1
 266:	f9 f4       	brne	.+62     	; 0x2a6 <USART_Transmit_number+0x154>
 268:	80 e0       	ldi	r24, 0x00	; 0
	}
	else if(num == 11){
 26a:	91 e0       	ldi	r25, 0x01	; 1
 26c:	64 cf       	rjmp	.-312    	; 0x136 <USART1_Transmit_String>
		if(USART_NUM == 0) USART0_Transmit_String("11");
 26e:	08 95       	ret
 270:	6b 30       	cpi	r22, 0x0B	; 11
 272:	61 f4       	brne	.+24     	; 0x28c <USART_Transmit_number+0x13a>
 274:	81 11       	cpse	r24, r1
 276:	04 c0       	rjmp	.+8      	; 0x280 <USART_Transmit_number+0x12e>
 278:	83 e0       	ldi	r24, 0x03	; 3
		else if(USART_NUM == 1) USART1_Transmit_String("11");
 27a:	91 e0       	ldi	r25, 0x01	; 1
 27c:	37 cf       	rjmp	.-402    	; 0xec <USART0_Transmit_String>
 27e:	08 95       	ret
 280:	81 30       	cpi	r24, 0x01	; 1
 282:	89 f4       	brne	.+34     	; 0x2a6 <USART_Transmit_number+0x154>
 284:	83 e0       	ldi	r24, 0x03	; 3
 286:	91 e0       	ldi	r25, 0x01	; 1
	}
	else if(num == 12){
 288:	56 cf       	rjmp	.-340    	; 0x136 <USART1_Transmit_String>
 28a:	08 95       	ret
		if(USART_NUM == 0) USART0_Transmit_String("12");
 28c:	6c 30       	cpi	r22, 0x0C	; 12
 28e:	59 f4       	brne	.+22     	; 0x2a6 <USART_Transmit_number+0x154>
 290:	81 11       	cpse	r24, r1
 292:	04 c0       	rjmp	.+8      	; 0x29c <USART_Transmit_number+0x14a>
 294:	86 e0       	ldi	r24, 0x06	; 6
 296:	91 e0       	ldi	r25, 0x01	; 1
 298:	29 cf       	rjmp	.-430    	; 0xec <USART0_Transmit_String>
		else if(USART_NUM == 1) USART1_Transmit_String("12");
 29a:	08 95       	ret
 29c:	81 30       	cpi	r24, 0x01	; 1
 29e:	19 f4       	brne	.+6      	; 0x2a6 <USART_Transmit_number+0x154>
 2a0:	86 e0       	ldi	r24, 0x06	; 6
 2a2:	91 e0       	ldi	r25, 0x01	; 1
 2a4:	48 cf       	rjmp	.-368    	; 0x136 <USART1_Transmit_String>
 2a6:	08 95       	ret

000002a8 <showP2toP1>:
	}
}

void showP2toP1 (void){
 2a8:	0f 93       	push	r16
 2aa:	1f 93       	push	r17
 2ac:	cf 93       	push	r28
 2ae:	df 93       	push	r29
	USART0_Transmit_String("P2 Deck : "); // display P2 deck to P1
 2b0:	89 e0       	ldi	r24, 0x09	; 9
 2b2:	91 e0       	ldi	r25, 0x01	; 1
 2b4:	1b df       	rcall	.-458    	; 0xec <USART0_Transmit_String>
	for(int jj=0; jj<p2_card_cnt; jj++){
 2b6:	80 91 cb 02 	lds	r24, 0x02CB	; 0x8002cb <p2_card_cnt>
 2ba:	88 23       	and	r24, r24
 2bc:	e9 f0       	breq	.+58     	; 0x2f8 <showP2toP1+0x50>
 2be:	c8 e0       	ldi	r28, 0x08	; 8
 2c0:	d3 e0       	ldi	r29, 0x03	; 3
 2c2:	00 e0       	ldi	r16, 0x00	; 0
 2c4:	10 e0       	ldi	r17, 0x00	; 0
		if(p2_deck[jj].opened == 0) USART0_Transmit_String("XX");
 2c6:	8b 81       	ldd	r24, Y+3	; 0x03
 2c8:	81 11       	cpse	r24, r1
 2ca:	04 c0       	rjmp	.+8      	; 0x2d4 <showP2toP1+0x2c>
 2cc:	84 e1       	ldi	r24, 0x14	; 20
 2ce:	91 e0       	ldi	r25, 0x01	; 1
 2d0:	0d df       	rcall	.-486    	; 0xec <USART0_Transmit_String>
 2d2:	06 c0       	rjmp	.+12     	; 0x2e0 <showP2toP1+0x38>
		else{
			USART_Transmit_number(0, p2_deck[jj].color);
 2d4:	68 81       	ld	r22, Y
 2d6:	80 e0       	ldi	r24, 0x00	; 0
 2d8:	3c df       	rcall	.-392    	; 0x152 <USART_Transmit_number>
			USART_Transmit_number(0, p2_deck[jj].number);
 2da:	69 81       	ldd	r22, Y+1	; 0x01
 2dc:	80 e0       	ldi	r24, 0x00	; 0
 2de:	39 df       	rcall	.-398    	; 0x152 <USART_Transmit_number>
		}
		USART0_Transmit_String("   ");
 2e0:	87 e1       	ldi	r24, 0x17	; 23
 2e2:	91 e0       	ldi	r25, 0x01	; 1
 2e4:	03 df       	rcall	.-506    	; 0xec <USART0_Transmit_String>
 2e6:	0f 5f       	subi	r16, 0xFF	; 255
	}
}

void showP2toP1 (void){
	USART0_Transmit_String("P2 Deck : "); // display P2 deck to P1
	for(int jj=0; jj<p2_card_cnt; jj++){
 2e8:	1f 4f       	sbci	r17, 0xFF	; 255
 2ea:	24 96       	adiw	r28, 0x04	; 4
 2ec:	80 91 cb 02 	lds	r24, 0x02CB	; 0x8002cb <p2_card_cnt>
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	08 17       	cp	r16, r24
 2f4:	19 07       	cpc	r17, r25
 2f6:	3c f3       	brlt	.-50     	; 0x2c6 <showP2toP1+0x1e>
			USART_Transmit_number(0, p2_deck[jj].color);
			USART_Transmit_number(0, p2_deck[jj].number);
		}
		USART0_Transmit_String("   ");
	}
	USART0_Transmit_String("\r\n");
 2f8:	81 e9       	ldi	r24, 0x91	; 145
 2fa:	92 e0       	ldi	r25, 0x02	; 2
 2fc:	f7 de       	rcall	.-530    	; 0xec <USART0_Transmit_String>
 2fe:	df 91       	pop	r29
}
 300:	cf 91       	pop	r28
 302:	1f 91       	pop	r17
 304:	0f 91       	pop	r16
 306:	08 95       	ret

00000308 <showP1toP2>:
 308:	0f 93       	push	r16

void showP1toP2 (void){
 30a:	1f 93       	push	r17
 30c:	cf 93       	push	r28
 30e:	df 93       	push	r29
	USART1_Transmit_String("P1 Deck : "); // display P1 deck to P2
 310:	8b e1       	ldi	r24, 0x1B	; 27
 312:	91 e0       	ldi	r25, 0x01	; 1
 314:	10 df       	rcall	.-480    	; 0x136 <USART1_Transmit_String>
	for(int jj=0; jj<p1_card_cnt; jj++){
 316:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <p1_card_cnt>
 31a:	88 23       	and	r24, r24
 31c:	e9 f0       	breq	.+58     	; 0x358 <showP1toP2+0x50>
 31e:	cf ec       	ldi	r28, 0xCF	; 207
 320:	d2 e0       	ldi	r29, 0x02	; 2
 322:	00 e0       	ldi	r16, 0x00	; 0
 324:	10 e0       	ldi	r17, 0x00	; 0
		if(p1_deck[jj].opened == 0) USART1_Transmit_String("XX");
 326:	8b 81       	ldd	r24, Y+3	; 0x03
 328:	81 11       	cpse	r24, r1
 32a:	04 c0       	rjmp	.+8      	; 0x334 <showP1toP2+0x2c>
 32c:	84 e1       	ldi	r24, 0x14	; 20
 32e:	91 e0       	ldi	r25, 0x01	; 1
 330:	02 df       	rcall	.-508    	; 0x136 <USART1_Transmit_String>
 332:	06 c0       	rjmp	.+12     	; 0x340 <showP1toP2+0x38>
		else{
			USART_Transmit_number(1, p1_deck[jj].color);
 334:	68 81       	ld	r22, Y
 336:	81 e0       	ldi	r24, 0x01	; 1
 338:	0c df       	rcall	.-488    	; 0x152 <USART_Transmit_number>
			USART_Transmit_number(1, p1_deck[jj].number);
 33a:	69 81       	ldd	r22, Y+1	; 0x01
 33c:	81 e0       	ldi	r24, 0x01	; 1
 33e:	09 df       	rcall	.-494    	; 0x152 <USART_Transmit_number>
		}
		USART1_Transmit_String("   ");
 340:	87 e1       	ldi	r24, 0x17	; 23
 342:	91 e0       	ldi	r25, 0x01	; 1
 344:	f8 de       	rcall	.-528    	; 0x136 <USART1_Transmit_String>
 346:	0f 5f       	subi	r16, 0xFF	; 255
	USART0_Transmit_String("\r\n");
}

void showP1toP2 (void){
	USART1_Transmit_String("P1 Deck : "); // display P1 deck to P2
	for(int jj=0; jj<p1_card_cnt; jj++){
 348:	1f 4f       	sbci	r17, 0xFF	; 255
 34a:	24 96       	adiw	r28, 0x04	; 4
 34c:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <p1_card_cnt>
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	08 17       	cp	r16, r24
 354:	19 07       	cpc	r17, r25
 356:	3c f3       	brlt	.-50     	; 0x326 <showP1toP2+0x1e>
			USART_Transmit_number(1, p1_deck[jj].color);
			USART_Transmit_number(1, p1_deck[jj].number);
		}
		USART1_Transmit_String("   ");
	}
	USART1_Transmit_String("\r\n");
 358:	81 e9       	ldi	r24, 0x91	; 145
 35a:	92 e0       	ldi	r25, 0x02	; 2
 35c:	ec de       	rcall	.-552    	; 0x136 <USART1_Transmit_String>
 35e:	df 91       	pop	r29
}
 360:	cf 91       	pop	r28
 362:	1f 91       	pop	r17
 364:	0f 91       	pop	r16
 366:	08 95       	ret

00000368 <USART1_Receive>:
 368:	eb e9       	ldi	r30, 0x9B	; 155
void USART1_Transmit_String(char *str){
	while(*str != '\0') USART1_Transmit(*str++);
}

char USART1_Receive(void){
	while(!(UCSR1A & (1<<RXC1))); // Wait for Receive Buffer is empty
 36a:	f0 e0       	ldi	r31, 0x00	; 0
 36c:	80 81       	ld	r24, Z
 36e:	88 23       	and	r24, r24
 370:	ec f7       	brge	.-6      	; 0x36c <USART1_Receive+0x4>
	return UDR1;
 372:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
}
 376:	08 95       	ret

00000378 <main>:
struct card_deck deck[NUM_CARD];
struct card_deck p1_deck[NUM_CARD/2];
struct card_deck p2_deck[NUM_CARD/2];

int main(void)
{
 378:	2f 92       	push	r2
 37a:	3f 92       	push	r3
 37c:	4f 92       	push	r4
 37e:	5f 92       	push	r5
 380:	6f 92       	push	r6
 382:	7f 92       	push	r7
 384:	8f 92       	push	r8
 386:	9f 92       	push	r9
 388:	af 92       	push	r10
 38a:	bf 92       	push	r11
 38c:	cf 92       	push	r12
 38e:	df 92       	push	r13
 390:	ef 92       	push	r14
 392:	ff 92       	push	r15
 394:	0f 93       	push	r16
 396:	1f 93       	push	r17
 398:	cf 93       	push	r28
 39a:	df 93       	push	r29
	USART0_Init(103);
 39c:	87 e6       	ldi	r24, 0x67	; 103
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	98 de       	rcall	.-720    	; 0xd2 <USART0_Init>
	USART1_Init(103);
 3a2:	87 e6       	ldi	r24, 0x67	; 103
 3a4:	90 e0       	ldi	r25, 0x00	; 0
	Timer_Init();
 3a6:	b4 de       	rcall	.-664    	; 0x110 <USART1_Init>
 3a8:	8f de       	rcall	.-738    	; 0xc8 <Timer_Init>
 3aa:	0f 2e       	mov	r0, r31
 3ac:	f8 e3       	ldi	r31, 0x38	; 56
 3ae:	4f 2e       	mov	r4, r31
 3b0:	f3 e0       	ldi	r31, 0x03	; 3
 3b2:	5f 2e       	mov	r5, r31
 3b4:	f0 2d       	mov	r31, r0
 3b6:	f2 01       	movw	r30, r4
	
	for(int i=0;i<NUM_CARD;i++){				// 카드 덱 초기화
 3b8:	80 e0       	ldi	r24, 0x00	; 0
 3ba:	90 e0       	ldi	r25, 0x00	; 0
		if(i%2 == 0){
			deck[i].color = 0;
			deck[i].number = i/2;
		}
		else if(i%2 == 1){
			deck[i].color = 1;
 3bc:	41 e0       	ldi	r20, 0x01	; 1
	USART0_Init(103);
	USART1_Init(103);
	Timer_Init();
	
	for(int i=0;i<NUM_CARD;i++){				// 카드 덱 초기화
		if(i%2 == 0){
 3be:	80 fd       	sbrc	r24, 0
 3c0:	0c c0       	rjmp	.+24     	; 0x3da <main+0x62>
 3c2:	df 01       	movw	r26, r30
			deck[i].color = 0;
 3c4:	10 82       	st	Z, r1
			deck[i].number = i/2;
 3c6:	9c 01       	movw	r18, r24
 3c8:	99 23       	and	r25, r25
 3ca:	14 f4       	brge	.+4      	; 0x3d0 <main+0x58>
 3cc:	2f 5f       	subi	r18, 0xFF	; 255
 3ce:	3f 4f       	sbci	r19, 0xFF	; 255
 3d0:	35 95       	asr	r19
 3d2:	27 95       	ror	r18
 3d4:	11 96       	adiw	r26, 0x01	; 1
 3d6:	2c 93       	st	X, r18
 3d8:	19 c0       	rjmp	.+50     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
		}
		else if(i%2 == 1){
 3da:	9c 01       	movw	r18, r24
 3dc:	21 70       	andi	r18, 0x01	; 1
 3de:	30 78       	andi	r19, 0x80	; 128
 3e0:	33 23       	and	r19, r19
 3e2:	34 f4       	brge	.+12     	; 0x3f0 <main+0x78>
 3e4:	21 50       	subi	r18, 0x01	; 1
 3e6:	31 09       	sbc	r19, r1
 3e8:	2e 6f       	ori	r18, 0xFE	; 254
 3ea:	3f 6f       	ori	r19, 0xFF	; 255
 3ec:	2f 5f       	subi	r18, 0xFF	; 255
 3ee:	3f 4f       	sbci	r19, 0xFF	; 255
 3f0:	21 30       	cpi	r18, 0x01	; 1
 3f2:	31 05       	cpc	r19, r1
 3f4:	59 f4       	brne	.+22     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 3f6:	df 01       	movw	r26, r30
			deck[i].color = 1;
 3f8:	40 83       	st	Z, r20
			deck[i].number = i/2;
 3fa:	9c 01       	movw	r18, r24
 3fc:	99 23       	and	r25, r25
 3fe:	14 f4       	brge	.+4      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 400:	2f 5f       	subi	r18, 0xFF	; 255
 402:	3f 4f       	sbci	r19, 0xFF	; 255
 404:	35 95       	asr	r19
 406:	27 95       	ror	r18
 408:	11 96       	adiw	r26, 0x01	; 1
 40a:	2c 93       	st	X, r18
		}
		deck[i].owner = 0;
 40c:	12 82       	std	Z+2, r1	; 0x02
		deck[i].opened = 0;
 40e:	13 82       	std	Z+3, r1	; 0x03
{
	USART0_Init(103);
	USART1_Init(103);
	Timer_Init();
	
	for(int i=0;i<NUM_CARD;i++){				// 카드 덱 초기화
 410:	01 96       	adiw	r24, 0x01	; 1
 412:	34 96       	adiw	r30, 0x04	; 4
 414:	88 31       	cpi	r24, 0x18	; 24
 416:	91 05       	cpc	r25, r1
 418:	91 f6       	brne	.-92     	; 0x3be <main+0x46>
 41a:	ef ec       	ldi	r30, 0xCF	; 207
 41c:	f2 e0       	ldi	r31, 0x02	; 2
 41e:	8f ef       	ldi	r24, 0xFF	; 255
 420:	84 83       	std	Z+4, r24	; 0x04
 422:	85 83       	std	Z+5, r24	; 0x05
 424:	91 e0       	ldi	r25, 0x01	; 1
 426:	96 83       	std	Z+6, r25	; 0x06
 428:	17 82       	std	Z+7, r1	; 0x07
 42a:	e8 e0       	ldi	r30, 0x08	; 8
 42c:	f3 e0       	ldi	r31, 0x03	; 3
 42e:	84 83       	std	Z+4, r24	; 0x04
 430:	85 83       	std	Z+5, r24	; 0x05
 432:	82 e0       	ldi	r24, 0x02	; 2
 434:	86 83       	std	Z+6, r24	; 0x06
 436:	17 82       	std	Z+7, r1	; 0x07
				get_number_2[2] = get_number_2[0]*10 + get_number_2[1];
				state = 14;
			}
		} // state 13 end
		if(state == 14){ // state 14
			temp = p1_deck[(int)get_number_1[2]].number;
 438:	00 e0       	ldi	r16, 0x00	; 0
 43a:	13 e0       	ldi	r17, 0x03	; 3
			if(temp == get_number_2[2]){
 43c:	0f 2e       	mov	r0, r31
 43e:	f3 e0       	ldi	r31, 0x03	; 3
 440:	ef 2e       	mov	r14, r31
 442:	f3 e0       	ldi	r31, 0x03	; 3
 444:	ff 2e       	mov	r15, r31
 446:	f0 2d       	mov	r31, r0
			}
			else{
				USART1_Transmit_String("Wrong\r\n");
				USART1_Transmit_String("Player 1's Turn\r\n");
				USART1_Transmit_String("-------------------------------------------\r\n");
				state = 3;
 448:	0f 2e       	mov	r0, r31
 44a:	f3 e0       	ldi	r31, 0x03	; 3
 44c:	cf 2e       	mov	r12, r31
 44e:	d1 2c       	mov	r13, r1
 450:	f0 2d       	mov	r31, r0
 452:	0f 2e       	mov	r0, r31
 454:	f8 e9       	ldi	r31, 0x98	; 152
 456:	af 2e       	mov	r10, r31
 458:	f3 e0       	ldi	r31, 0x03	; 3
 45a:	bf 2e       	mov	r11, r31
 45c:	f0 2d       	mov	r31, r0
				}
				showP1toP2();
				p1_opened_cnt++;
				p2_corr_flag = 1;
				if(p2_card_cnt == p2_opened_cnt) state = 31;
				else state = 10;
 45e:	0f 2e       	mov	r0, r31
 460:	fa e0       	ldi	r31, 0x0A	; 10
 462:	6f 2e       	mov	r6, r31
 464:	71 2c       	mov	r7, r1
 466:	f0 2d       	mov	r31, r0
			USART1_Transmit(rx);
			USART1_Transmit_String("\r\n");
			if((rx >= '0')&&(rx <= '9')){
				get_number_2[1] = rx-48;
				get_number_2[2] = get_number_2[0]*10 + get_number_2[1];
				state = 14;
 468:	0f 2e       	mov	r0, r31
 46a:	fe e0       	ldi	r31, 0x0E	; 14
 46c:	2f 2e       	mov	r2, r31
 46e:	31 2c       	mov	r3, r1
 470:	f0 2d       	mov	r31, r0
			state = 3;
		} // state 2 end
		if(state == 3){ // state : give 1 card to player 1
			temp = p1_card_cnt + 1;
			while(p1_card_cnt < temp){
				random_value = TCNT0%NUM_CARD;
 472:	0f 2e       	mov	r0, r31
 474:	fb ea       	ldi	r31, 0xAB	; 171
 476:	8f 2e       	mov	r8, r31
 478:	f0 2d       	mov	r31, r0
 47a:	0f 2e       	mov	r0, r31
 47c:	f8 e1       	ldi	r31, 0x18	; 24
 47e:	9f 2e       	mov	r9, r31
 480:	f0 2d       	mov	r31, r0
		p2_deck[1].owner = 2;
		p2_deck[1].opened = 0;
	}
    while (1) 
    {
		if(state == 0){ // state 0 : checking player 1 connected
 482:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <state>
 486:	90 91 ce 02 	lds	r25, 0x02CE	; 0x8002ce <state+0x1>
 48a:	89 2b       	or	r24, r25
			USART0_Transmit_String("Press Y to Start\r\n");
 48c:	91 f4       	brne	.+36     	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
 48e:	86 e2       	ldi	r24, 0x26	; 38
 490:	91 e0       	ldi	r25, 0x01	; 1
			USART1_Transmit_String("Waiting for Player 1\r\n");
 492:	2c de       	rcall	.-936    	; 0xec <USART0_Transmit_String>
 494:	89 e3       	ldi	r24, 0x39	; 57
 496:	91 e0       	ldi	r25, 0x01	; 1
 498:	4e de       	rcall	.-868    	; 0x136 <USART1_Transmit_String>
			rx = USART0_Receive();
 49a:	36 de       	rcall	.-916    	; 0x108 <USART0_Receive>
 49c:	80 93 ff 02 	sts	0x02FF, r24	; 0x8002ff <rx>
 4a0:	89 35       	cpi	r24, 0x59	; 89
			if(rx == 'Y') state = 1;
 4a2:	39 f4       	brne	.+14     	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
 4a4:	81 e0       	ldi	r24, 0x01	; 1
 4a6:	90 e0       	ldi	r25, 0x00	; 0
 4a8:	90 93 ce 02 	sts	0x02CE, r25	; 0x8002ce <state+0x1>
 4ac:	80 93 cd 02 	sts	0x02CD, r24	; 0x8002cd <state>
 4b0:	06 c0       	rjmp	.+12     	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
 4b2:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <state>
		} // state 0 end
		if(state == 1){ // state 1 : checking player 1 connected
 4b6:	90 91 ce 02 	lds	r25, 0x02CE	; 0x8002ce <state+0x1>
 4ba:	01 97       	sbiw	r24, 0x01	; 1
 4bc:	91 f4       	brne	.+36     	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
			USART0_Transmit_String("Waiting for Player 2\r\n");
 4be:	80 e5       	ldi	r24, 0x50	; 80
 4c0:	91 e0       	ldi	r25, 0x01	; 1
 4c2:	14 de       	rcall	.-984    	; 0xec <USART0_Transmit_String>
			USART1_Transmit_String("Press Y to Start\r\n");
 4c4:	86 e2       	ldi	r24, 0x26	; 38
 4c6:	91 e0       	ldi	r25, 0x01	; 1
 4c8:	36 de       	rcall	.-916    	; 0x136 <USART1_Transmit_String>
 4ca:	4e df       	rcall	.-356    	; 0x368 <USART1_Receive>
			rx = USART1_Receive();
 4cc:	80 93 ff 02 	sts	0x02FF, r24	; 0x8002ff <rx>
 4d0:	89 35       	cpi	r24, 0x59	; 89
 4d2:	39 f4       	brne	.+14     	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
			if(rx == 'Y') state = 2;
 4d4:	82 e0       	ldi	r24, 0x02	; 2
 4d6:	90 e0       	ldi	r25, 0x00	; 0
 4d8:	90 93 ce 02 	sts	0x02CE, r25	; 0x8002ce <state+0x1>
 4dc:	80 93 cd 02 	sts	0x02CD, r24	; 0x8002cd <state>
 4e0:	08 c0       	rjmp	.+16     	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
 4e2:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <state>
		} // state 1 end
		if(state == 2){ // state 2 : give card to players
 4e6:	90 91 ce 02 	lds	r25, 0x02CE	; 0x8002ce <state+0x1>
 4ea:	82 30       	cpi	r24, 0x02	; 2
 4ec:	91 05       	cpc	r25, r1
 4ee:	09 f0       	breq	.+2      	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
 4f0:	c7 c0       	rjmp	.+398    	; 0x680 <__LOCK_REGION_LENGTH__+0x280>
 4f2:	31 e0       	ldi	r19, 0x01	; 1
 4f4:	22 c0       	rjmp	.+68     	; 0x53a <__LOCK_REGION_LENGTH__+0x13a>
			while(p1_card_cnt < 4){	// give Player 1 Cards
				random_value = TCNT0%NUM_CARD;
				if(deck[random_value].owner == 0){
					deck[random_value].owner = 1;
 4f6:	92 b7       	in	r25, 0x32	; 50
 4f8:	98 9d       	mul	r25, r8
			rx = USART1_Receive();
			if(rx == 'Y') state = 2;
		} // state 1 end
		if(state == 2){ // state 2 : give card to players
			while(p1_card_cnt < 4){	// give Player 1 Cards
				random_value = TCNT0%NUM_CARD;
 4fa:	81 2d       	mov	r24, r1
 4fc:	11 24       	eor	r1, r1
 4fe:	82 95       	swap	r24
 500:	8f 70       	andi	r24, 0x0F	; 15
 502:	89 9d       	mul	r24, r9
 504:	90 19       	sub	r25, r0
 506:	11 24       	eor	r1, r1
 508:	90 93 07 03 	sts	0x0307, r25	; 0x800307 <random_value>
 50c:	89 2f       	mov	r24, r25
 50e:	90 e0       	ldi	r25, 0x00	; 0
				if(deck[random_value].owner == 0){
 510:	fc 01       	movw	r30, r24
 512:	ee 0f       	add	r30, r30
 514:	ff 1f       	adc	r31, r31
 516:	ee 0f       	add	r30, r30
 518:	ff 1f       	adc	r31, r31
 51a:	e8 5c       	subi	r30, 0xC8	; 200
 51c:	fc 4f       	sbci	r31, 0xFC	; 252
 51e:	42 81       	ldd	r20, Z+2	; 0x02
 520:	41 11       	cpse	r20, r1
 522:	0d c0       	rjmp	.+26     	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
 524:	88 0f       	add	r24, r24
 526:	99 1f       	adc	r25, r25
					deck[random_value].owner = 1;
 528:	88 0f       	add	r24, r24
 52a:	99 1f       	adc	r25, r25
 52c:	fc 01       	movw	r30, r24
 52e:	e8 5c       	subi	r30, 0xC8	; 200
 530:	fc 4f       	sbci	r31, 0xFC	; 252
 532:	32 83       	std	Z+2, r19	; 0x02
 534:	2f 5f       	subi	r18, 0xFF	; 255
 536:	20 93 cc 02 	sts	0x02CC, r18	; 0x8002cc <p1_card_cnt>
					p1_card_cnt++;
 53a:	20 91 cc 02 	lds	r18, 0x02CC	; 0x8002cc <p1_card_cnt>
			USART1_Transmit_String("Press Y to Start\r\n");
			rx = USART1_Receive();
			if(rx == 'Y') state = 2;
		} // state 1 end
		if(state == 2){ // state 2 : give card to players
			while(p1_card_cnt < 4){	// give Player 1 Cards
 53e:	24 30       	cpi	r18, 0x04	; 4
 540:	d0 f2       	brcs	.-76     	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>
 542:	32 e0       	ldi	r19, 0x02	; 2
 544:	22 c0       	rjmp	.+68     	; 0x58a <__LOCK_REGION_LENGTH__+0x18a>
				}
			}
			while(p2_card_cnt < 4){	// give Player 2 Cards
				random_value = TCNT0%NUM_CARD;
				if(deck[random_value].owner == 0){
					deck[random_value].owner = 2;
 546:	92 b7       	in	r25, 0x32	; 50
 548:	98 9d       	mul	r25, r8
					deck[random_value].owner = 1;
					p1_card_cnt++;
				}
			}
			while(p2_card_cnt < 4){	// give Player 2 Cards
				random_value = TCNT0%NUM_CARD;
 54a:	81 2d       	mov	r24, r1
 54c:	11 24       	eor	r1, r1
 54e:	82 95       	swap	r24
 550:	8f 70       	andi	r24, 0x0F	; 15
 552:	89 9d       	mul	r24, r9
 554:	90 19       	sub	r25, r0
 556:	11 24       	eor	r1, r1
 558:	90 93 07 03 	sts	0x0307, r25	; 0x800307 <random_value>
 55c:	89 2f       	mov	r24, r25
 55e:	90 e0       	ldi	r25, 0x00	; 0
				if(deck[random_value].owner == 0){
 560:	fc 01       	movw	r30, r24
 562:	ee 0f       	add	r30, r30
 564:	ff 1f       	adc	r31, r31
 566:	ee 0f       	add	r30, r30
 568:	ff 1f       	adc	r31, r31
 56a:	e8 5c       	subi	r30, 0xC8	; 200
 56c:	fc 4f       	sbci	r31, 0xFC	; 252
 56e:	42 81       	ldd	r20, Z+2	; 0x02
 570:	41 11       	cpse	r20, r1
 572:	0d c0       	rjmp	.+26     	; 0x58e <__LOCK_REGION_LENGTH__+0x18e>
 574:	88 0f       	add	r24, r24
 576:	99 1f       	adc	r25, r25
					deck[random_value].owner = 2;
 578:	88 0f       	add	r24, r24
 57a:	99 1f       	adc	r25, r25
 57c:	fc 01       	movw	r30, r24
 57e:	e8 5c       	subi	r30, 0xC8	; 200
 580:	fc 4f       	sbci	r31, 0xFC	; 252
 582:	32 83       	std	Z+2, r19	; 0x02
 584:	2f 5f       	subi	r18, 0xFF	; 255
 586:	20 93 cb 02 	sts	0x02CB, r18	; 0x8002cb <p2_card_cnt>
					p2_card_cnt++;
 58a:	20 91 cb 02 	lds	r18, 0x02CB	; 0x8002cb <p2_card_cnt>
				if(deck[random_value].owner == 0){
					deck[random_value].owner = 1;
					p1_card_cnt++;
				}
			}
			while(p2_card_cnt < 4){	// give Player 2 Cards
 58e:	24 30       	cpi	r18, 0x04	; 4
 590:	d0 f2       	brcs	.-76     	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
 592:	10 92 c8 02 	sts	0x02C8, r1	; 0x8002c8 <temp>
				if(deck[random_value].owner == 0){
					deck[random_value].owner = 2;
					p2_card_cnt++;
				}
			}
			temp = 0;
 596:	8b e1       	ldi	r24, 0x1B	; 27
			USART0_Transmit_String("P1 Deck : "); // display P1 deck to P1
 598:	91 e0       	ldi	r25, 0x01	; 1
 59a:	a8 dd       	rcall	.-1200   	; 0xec <USART0_Transmit_String>
 59c:	e2 01       	movw	r28, r4
 59e:	8a 81       	ldd	r24, Y+2	; 0x02
 5a0:	81 30       	cpi	r24, 0x01	; 1
			for(int i=0; i<NUM_CARD; i++){
				if(deck[i].owner == 1){
 5a2:	41 f5       	brne	.+80     	; 0x5f4 <__LOCK_REGION_LENGTH__+0x1f4>
 5a4:	e0 91 c8 02 	lds	r30, 0x02C8	; 0x8002c8 <temp>
					p1_deck[temp] = deck[i];
 5a8:	f0 e0       	ldi	r31, 0x00	; 0
 5aa:	ee 0f       	add	r30, r30
 5ac:	ff 1f       	adc	r31, r31
 5ae:	ee 0f       	add	r30, r30
 5b0:	ff 1f       	adc	r31, r31
 5b2:	e1 53       	subi	r30, 0x31	; 49
 5b4:	fd 4f       	sbci	r31, 0xFD	; 253
 5b6:	88 81       	ld	r24, Y
 5b8:	39 81       	ldd	r19, Y+1	; 0x01
 5ba:	2a 81       	ldd	r18, Y+2	; 0x02
 5bc:	9b 81       	ldd	r25, Y+3	; 0x03
 5be:	68 2f       	mov	r22, r24
 5c0:	80 83       	st	Z, r24
 5c2:	31 83       	std	Z+1, r19	; 0x01
 5c4:	22 83       	std	Z+2, r18	; 0x02
 5c6:	93 83       	std	Z+3, r25	; 0x03
 5c8:	80 e0       	ldi	r24, 0x00	; 0
					USART_Transmit_number(0, p1_deck[temp].color);
 5ca:	c3 dd       	rcall	.-1146   	; 0x152 <USART_Transmit_number>
 5cc:	e0 91 c8 02 	lds	r30, 0x02C8	; 0x8002c8 <temp>
					USART_Transmit_number(0, p1_deck[temp].number); 
 5d0:	f0 e0       	ldi	r31, 0x00	; 0
 5d2:	ee 0f       	add	r30, r30
 5d4:	ff 1f       	adc	r31, r31
 5d6:	ee 0f       	add	r30, r30
 5d8:	ff 1f       	adc	r31, r31
 5da:	e1 53       	subi	r30, 0x31	; 49
 5dc:	fd 4f       	sbci	r31, 0xFD	; 253
 5de:	61 81       	ldd	r22, Z+1	; 0x01
 5e0:	80 e0       	ldi	r24, 0x00	; 0
 5e2:	b7 dd       	rcall	.-1170   	; 0x152 <USART_Transmit_number>
 5e4:	87 e1       	ldi	r24, 0x17	; 23
					USART0_Transmit_String("   ");
 5e6:	91 e0       	ldi	r25, 0x01	; 1
 5e8:	81 dd       	rcall	.-1278   	; 0xec <USART0_Transmit_String>
 5ea:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <temp>
					temp++;
 5ee:	8f 5f       	subi	r24, 0xFF	; 255
 5f0:	80 93 c8 02 	sts	0x02C8, r24	; 0x8002c8 <temp>
 5f4:	24 96       	adiw	r28, 0x04	; 4
					p2_card_cnt++;
				}
			}
			temp = 0;
			USART0_Transmit_String("P1 Deck : "); // display P1 deck to P1
			for(int i=0; i<NUM_CARD; i++){
 5f6:	ac 16       	cp	r10, r28
 5f8:	bd 06       	cpc	r11, r29
 5fa:	89 f6       	brne	.-94     	; 0x59e <__LOCK_REGION_LENGTH__+0x19e>
					USART_Transmit_number(0, p1_deck[temp].number); 
					USART0_Transmit_String("   ");
					temp++;
				}
			}
			USART0_Transmit_String("\r\n");
 5fc:	81 e9       	ldi	r24, 0x91	; 145
 5fe:	92 e0       	ldi	r25, 0x02	; 2
 600:	75 dd       	rcall	.-1302   	; 0xec <USART0_Transmit_String>
 602:	10 92 c8 02 	sts	0x02C8, r1	; 0x8002c8 <temp>
			temp = 0;
 606:	89 e0       	ldi	r24, 0x09	; 9
			USART1_Transmit_String("P2 Deck : "); // display P2 deck to P2
 608:	91 e0       	ldi	r25, 0x01	; 1
 60a:	95 dd       	rcall	.-1238   	; 0x136 <USART1_Transmit_String>
 60c:	e2 01       	movw	r28, r4
 60e:	8a 81       	ldd	r24, Y+2	; 0x02
 610:	82 30       	cpi	r24, 0x02	; 2
			for(int i=0; i<NUM_CARD; i++){
				if(deck[i].owner == 2){
 612:	41 f5       	brne	.+80     	; 0x664 <__LOCK_REGION_LENGTH__+0x264>
 614:	e0 91 c8 02 	lds	r30, 0x02C8	; 0x8002c8 <temp>
					p2_deck[temp] = deck[i];
 618:	f0 e0       	ldi	r31, 0x00	; 0
 61a:	ee 0f       	add	r30, r30
 61c:	ff 1f       	adc	r31, r31
 61e:	ee 0f       	add	r30, r30
 620:	ff 1f       	adc	r31, r31
 622:	e8 5f       	subi	r30, 0xF8	; 248
 624:	fc 4f       	sbci	r31, 0xFC	; 252
 626:	88 81       	ld	r24, Y
 628:	39 81       	ldd	r19, Y+1	; 0x01
 62a:	2a 81       	ldd	r18, Y+2	; 0x02
 62c:	9b 81       	ldd	r25, Y+3	; 0x03
 62e:	68 2f       	mov	r22, r24
 630:	80 83       	st	Z, r24
 632:	31 83       	std	Z+1, r19	; 0x01
 634:	22 83       	std	Z+2, r18	; 0x02
 636:	93 83       	std	Z+3, r25	; 0x03
					USART_Transmit_number(1, p2_deck[temp].color);
 638:	81 e0       	ldi	r24, 0x01	; 1
 63a:	8b dd       	rcall	.-1258   	; 0x152 <USART_Transmit_number>
					USART_Transmit_number(1, p2_deck[temp].number); 
 63c:	e0 91 c8 02 	lds	r30, 0x02C8	; 0x8002c8 <temp>
 640:	f0 e0       	ldi	r31, 0x00	; 0
 642:	ee 0f       	add	r30, r30
 644:	ff 1f       	adc	r31, r31
 646:	ee 0f       	add	r30, r30
 648:	ff 1f       	adc	r31, r31
 64a:	e8 5f       	subi	r30, 0xF8	; 248
 64c:	fc 4f       	sbci	r31, 0xFC	; 252
 64e:	61 81       	ldd	r22, Z+1	; 0x01
 650:	81 e0       	ldi	r24, 0x01	; 1
					USART1_Transmit_String("   ");
 652:	7f dd       	rcall	.-1282   	; 0x152 <USART_Transmit_number>
 654:	87 e1       	ldi	r24, 0x17	; 23
 656:	91 e0       	ldi	r25, 0x01	; 1
 658:	6e dd       	rcall	.-1316   	; 0x136 <USART1_Transmit_String>
					temp++;
 65a:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <temp>
 65e:	8f 5f       	subi	r24, 0xFF	; 255
 660:	80 93 c8 02 	sts	0x02C8, r24	; 0x8002c8 <temp>
 664:	24 96       	adiw	r28, 0x04	; 4
				}
			}
			USART0_Transmit_String("\r\n");
			temp = 0;
			USART1_Transmit_String("P2 Deck : "); // display P2 deck to P2
			for(int i=0; i<NUM_CARD; i++){
 666:	ac 16       	cp	r10, r28
 668:	bd 06       	cpc	r11, r29
 66a:	89 f6       	brne	.-94     	; 0x60e <__LOCK_REGION_LENGTH__+0x20e>
					USART_Transmit_number(1, p2_deck[temp].number); 
					USART1_Transmit_String("   ");
					temp++;
				}
			}
			USART1_Transmit_String("\r\n");
 66c:	81 e9       	ldi	r24, 0x91	; 145
 66e:	92 e0       	ldi	r25, 0x02	; 2
 670:	62 dd       	rcall	.-1340   	; 0x136 <USART1_Transmit_String>
 672:	1a de       	rcall	.-972    	; 0x2a8 <showP2toP1>
			showP2toP1();
 674:	49 de       	rcall	.-878    	; 0x308 <showP1toP2>
 676:	d0 92 ce 02 	sts	0x02CE, r13	; 0x8002ce <state+0x1>
			showP1toP2();				
 67a:	c0 92 cd 02 	sts	0x02CD, r12	; 0x8002cd <state>
			state = 3;
 67e:	04 c0       	rjmp	.+8      	; 0x688 <__LOCK_REGION_LENGTH__+0x288>
 680:	83 30       	cpi	r24, 0x03	; 3
 682:	91 05       	cpc	r25, r1
 684:	09 f0       	breq	.+2      	; 0x688 <__LOCK_REGION_LENGTH__+0x288>
		} // state 2 end
		if(state == 3){ // state : give 1 card to player 1
 686:	6d c0       	rjmp	.+218    	; 0x762 <__LOCK_REGION_LENGTH__+0x362>
 688:	30 91 cc 02 	lds	r19, 0x02CC	; 0x8002cc <p1_card_cnt>
 68c:	3f 5f       	subi	r19, 0xFF	; 255
			temp = p1_card_cnt + 1;
 68e:	30 93 c8 02 	sts	0x02C8, r19	; 0x8002c8 <temp>
 692:	41 e0       	ldi	r20, 0x01	; 1
 694:	22 c0       	rjmp	.+68     	; 0x6da <__LOCK_REGION_LENGTH__+0x2da>
 696:	92 b7       	in	r25, 0x32	; 50
			while(p1_card_cnt < temp){
				random_value = TCNT0%NUM_CARD;
				if(deck[random_value].owner == 0){
					deck[random_value].owner = 1;
 698:	98 9d       	mul	r25, r8
			showP1toP2();				
			state = 3;
		} // state 2 end
		if(state == 3){ // state : give 1 card to player 1
			temp = p1_card_cnt + 1;
			while(p1_card_cnt < temp){
 69a:	81 2d       	mov	r24, r1
				random_value = TCNT0%NUM_CARD;
 69c:	11 24       	eor	r1, r1
 69e:	82 95       	swap	r24
 6a0:	8f 70       	andi	r24, 0x0F	; 15
 6a2:	89 9d       	mul	r24, r9
 6a4:	90 19       	sub	r25, r0
 6a6:	11 24       	eor	r1, r1
 6a8:	90 93 07 03 	sts	0x0307, r25	; 0x800307 <random_value>
 6ac:	89 2f       	mov	r24, r25
 6ae:	90 e0       	ldi	r25, 0x00	; 0
 6b0:	fc 01       	movw	r30, r24
				if(deck[random_value].owner == 0){
 6b2:	ee 0f       	add	r30, r30
 6b4:	ff 1f       	adc	r31, r31
 6b6:	ee 0f       	add	r30, r30
 6b8:	ff 1f       	adc	r31, r31
 6ba:	e8 5c       	subi	r30, 0xC8	; 200
 6bc:	fc 4f       	sbci	r31, 0xFC	; 252
 6be:	52 81       	ldd	r21, Z+2	; 0x02
 6c0:	51 11       	cpse	r21, r1
 6c2:	0d c0       	rjmp	.+26     	; 0x6de <__LOCK_REGION_LENGTH__+0x2de>
 6c4:	88 0f       	add	r24, r24
 6c6:	99 1f       	adc	r25, r25
					deck[random_value].owner = 1;
 6c8:	88 0f       	add	r24, r24
 6ca:	99 1f       	adc	r25, r25
 6cc:	fc 01       	movw	r30, r24
 6ce:	e8 5c       	subi	r30, 0xC8	; 200
 6d0:	fc 4f       	sbci	r31, 0xFC	; 252
 6d2:	42 83       	std	Z+2, r20	; 0x02
 6d4:	2f 5f       	subi	r18, 0xFF	; 255
 6d6:	20 93 cc 02 	sts	0x02CC, r18	; 0x8002cc <p1_card_cnt>
					p1_card_cnt++;
 6da:	20 91 cc 02 	lds	r18, 0x02CC	; 0x8002cc <p1_card_cnt>
			showP1toP2();				
			state = 3;
		} // state 2 end
		if(state == 3){ // state : give 1 card to player 1
			temp = p1_card_cnt + 1;
			while(p1_card_cnt < temp){
 6de:	23 17       	cp	r18, r19
 6e0:	d0 f2       	brcs	.-76     	; 0x696 <__LOCK_REGION_LENGTH__+0x296>
 6e2:	10 92 c8 02 	sts	0x02C8, r1	; 0x8002c8 <temp>
				if(deck[random_value].owner == 0){
					deck[random_value].owner = 1;
					p1_card_cnt++;
				}
			}
			temp = 0;
 6e6:	8b e1       	ldi	r24, 0x1B	; 27
 6e8:	91 e0       	ldi	r25, 0x01	; 1
			USART0_Transmit_String("P1 Deck : ");
 6ea:	00 dd       	rcall	.-1536   	; 0xec <USART0_Transmit_String>
 6ec:	e2 01       	movw	r28, r4
 6ee:	8a 81       	ldd	r24, Y+2	; 0x02
 6f0:	81 30       	cpi	r24, 0x01	; 1
 6f2:	41 f5       	brne	.+80     	; 0x744 <__LOCK_REGION_LENGTH__+0x344>
			for(int i=0; i<NUM_CARD; i++){
				if(deck[i].owner == 1){
 6f4:	e0 91 c8 02 	lds	r30, 0x02C8	; 0x8002c8 <temp>
					p1_deck[temp] = deck[i];
 6f8:	f0 e0       	ldi	r31, 0x00	; 0
 6fa:	ee 0f       	add	r30, r30
 6fc:	ff 1f       	adc	r31, r31
 6fe:	ee 0f       	add	r30, r30
 700:	ff 1f       	adc	r31, r31
 702:	e1 53       	subi	r30, 0x31	; 49
 704:	fd 4f       	sbci	r31, 0xFD	; 253
 706:	88 81       	ld	r24, Y
 708:	39 81       	ldd	r19, Y+1	; 0x01
 70a:	2a 81       	ldd	r18, Y+2	; 0x02
 70c:	9b 81       	ldd	r25, Y+3	; 0x03
 70e:	68 2f       	mov	r22, r24
 710:	80 83       	st	Z, r24
 712:	31 83       	std	Z+1, r19	; 0x01
 714:	22 83       	std	Z+2, r18	; 0x02
 716:	93 83       	std	Z+3, r25	; 0x03
					USART_Transmit_number(0, p1_deck[temp].color);
 718:	80 e0       	ldi	r24, 0x00	; 0
 71a:	1b dd       	rcall	.-1482   	; 0x152 <USART_Transmit_number>
 71c:	e0 91 c8 02 	lds	r30, 0x02C8	; 0x8002c8 <temp>
					USART_Transmit_number(0, p1_deck[temp].number);
 720:	f0 e0       	ldi	r31, 0x00	; 0
 722:	ee 0f       	add	r30, r30
 724:	ff 1f       	adc	r31, r31
 726:	ee 0f       	add	r30, r30
 728:	ff 1f       	adc	r31, r31
 72a:	e1 53       	subi	r30, 0x31	; 49
 72c:	fd 4f       	sbci	r31, 0xFD	; 253
 72e:	61 81       	ldd	r22, Z+1	; 0x01
 730:	80 e0       	ldi	r24, 0x00	; 0
 732:	0f dd       	rcall	.-1506   	; 0x152 <USART_Transmit_number>
					USART0_Transmit_String("   ");
 734:	87 e1       	ldi	r24, 0x17	; 23
 736:	91 e0       	ldi	r25, 0x01	; 1
 738:	d9 dc       	rcall	.-1614   	; 0xec <USART0_Transmit_String>
 73a:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <temp>
					temp++;
 73e:	8f 5f       	subi	r24, 0xFF	; 255
 740:	80 93 c8 02 	sts	0x02C8, r24	; 0x8002c8 <temp>
 744:	24 96       	adiw	r28, 0x04	; 4
 746:	ca 15       	cp	r28, r10
					p1_card_cnt++;
				}
			}
			temp = 0;
			USART0_Transmit_String("P1 Deck : ");
			for(int i=0; i<NUM_CARD; i++){
 748:	db 05       	cpc	r29, r11
 74a:	89 f6       	brne	.-94     	; 0x6ee <__LOCK_REGION_LENGTH__+0x2ee>
 74c:	81 e9       	ldi	r24, 0x91	; 145
					USART_Transmit_number(0, p1_deck[temp].number);
					USART0_Transmit_String("   ");
					temp++;
				}
			}
			USART0_Transmit_String("\r\n");
 74e:	92 e0       	ldi	r25, 0x02	; 2
 750:	cd dc       	rcall	.-1638   	; 0xec <USART0_Transmit_String>
 752:	aa dd       	rcall	.-1196   	; 0x2a8 <showP2toP1>
 754:	85 e0       	ldi	r24, 0x05	; 5
			showP2toP1();
 756:	90 e0       	ldi	r25, 0x00	; 0
 758:	90 93 ce 02 	sts	0x02CE, r25	; 0x8002ce <state+0x1>
			state = 5;
 75c:	80 93 cd 02 	sts	0x02CD, r24	; 0x8002cd <state>
 760:	75 c0       	rjmp	.+234    	; 0x84c <__LOCK_REGION_LENGTH__+0x44c>
 762:	04 97       	sbiw	r24, 0x04	; 4
 764:	09 f0       	breq	.+2      	; 0x768 <__LOCK_REGION_LENGTH__+0x368>
 766:	6b c0       	rjmp	.+214    	; 0x83e <__LOCK_REGION_LENGTH__+0x43e>
		}
		
		if(state == 4){ // state : give 1 card to player 2
 768:	30 91 cb 02 	lds	r19, 0x02CB	; 0x8002cb <p2_card_cnt>
 76c:	3f 5f       	subi	r19, 0xFF	; 255
			temp = p2_card_cnt + 1;
 76e:	30 93 c8 02 	sts	0x02C8, r19	; 0x8002c8 <temp>
 772:	42 e0       	ldi	r20, 0x02	; 2
 774:	22 c0       	rjmp	.+68     	; 0x7ba <__LOCK_REGION_LENGTH__+0x3ba>
 776:	92 b7       	in	r25, 0x32	; 50
			while(p2_card_cnt < temp){
				random_value = TCNT0%NUM_CARD;
				if(deck[random_value].owner == 0){
					deck[random_value].owner = 2;
 778:	98 9d       	mul	r25, r8
			state = 5;
		}
		
		if(state == 4){ // state : give 1 card to player 2
			temp = p2_card_cnt + 1;
			while(p2_card_cnt < temp){
 77a:	81 2d       	mov	r24, r1
				random_value = TCNT0%NUM_CARD;
 77c:	11 24       	eor	r1, r1
 77e:	82 95       	swap	r24
 780:	8f 70       	andi	r24, 0x0F	; 15
 782:	89 9d       	mul	r24, r9
 784:	90 19       	sub	r25, r0
 786:	11 24       	eor	r1, r1
 788:	90 93 07 03 	sts	0x0307, r25	; 0x800307 <random_value>
 78c:	89 2f       	mov	r24, r25
 78e:	90 e0       	ldi	r25, 0x00	; 0
 790:	fc 01       	movw	r30, r24
				if(deck[random_value].owner == 0){
 792:	ee 0f       	add	r30, r30
 794:	ff 1f       	adc	r31, r31
 796:	ee 0f       	add	r30, r30
 798:	ff 1f       	adc	r31, r31
 79a:	e8 5c       	subi	r30, 0xC8	; 200
 79c:	fc 4f       	sbci	r31, 0xFC	; 252
 79e:	52 81       	ldd	r21, Z+2	; 0x02
 7a0:	51 11       	cpse	r21, r1
 7a2:	0d c0       	rjmp	.+26     	; 0x7be <__LOCK_REGION_LENGTH__+0x3be>
 7a4:	88 0f       	add	r24, r24
 7a6:	99 1f       	adc	r25, r25
					deck[random_value].owner = 2;
 7a8:	88 0f       	add	r24, r24
 7aa:	99 1f       	adc	r25, r25
 7ac:	fc 01       	movw	r30, r24
 7ae:	e8 5c       	subi	r30, 0xC8	; 200
 7b0:	fc 4f       	sbci	r31, 0xFC	; 252
 7b2:	42 83       	std	Z+2, r20	; 0x02
 7b4:	2f 5f       	subi	r18, 0xFF	; 255
 7b6:	20 93 cb 02 	sts	0x02CB, r18	; 0x8002cb <p2_card_cnt>
					p2_card_cnt++;
 7ba:	20 91 cb 02 	lds	r18, 0x02CB	; 0x8002cb <p2_card_cnt>
			state = 5;
		}
		
		if(state == 4){ // state : give 1 card to player 2
			temp = p2_card_cnt + 1;
			while(p2_card_cnt < temp){
 7be:	23 17       	cp	r18, r19
 7c0:	d0 f2       	brcs	.-76     	; 0x776 <__LOCK_REGION_LENGTH__+0x376>
 7c2:	10 92 c8 02 	sts	0x02C8, r1	; 0x8002c8 <temp>
				if(deck[random_value].owner == 0){
					deck[random_value].owner = 2;
					p2_card_cnt++;
				}
			}
			temp = 0;
 7c6:	89 e0       	ldi	r24, 0x09	; 9
			USART1_Transmit_String("P2 Deck : ");
 7c8:	91 e0       	ldi	r25, 0x01	; 1
 7ca:	b5 dc       	rcall	.-1686   	; 0x136 <USART1_Transmit_String>
 7cc:	e2 01       	movw	r28, r4
 7ce:	8a 81       	ldd	r24, Y+2	; 0x02
 7d0:	82 30       	cpi	r24, 0x02	; 2
			for(int i=0; i<NUM_CARD; i++){
				if(deck[i].owner == 2){
 7d2:	41 f5       	brne	.+80     	; 0x824 <__LOCK_REGION_LENGTH__+0x424>
 7d4:	e0 91 c8 02 	lds	r30, 0x02C8	; 0x8002c8 <temp>
					p2_deck[temp] = deck[i];
 7d8:	f0 e0       	ldi	r31, 0x00	; 0
 7da:	ee 0f       	add	r30, r30
 7dc:	ff 1f       	adc	r31, r31
 7de:	ee 0f       	add	r30, r30
 7e0:	ff 1f       	adc	r31, r31
 7e2:	e8 5f       	subi	r30, 0xF8	; 248
 7e4:	fc 4f       	sbci	r31, 0xFC	; 252
 7e6:	88 81       	ld	r24, Y
 7e8:	39 81       	ldd	r19, Y+1	; 0x01
 7ea:	2a 81       	ldd	r18, Y+2	; 0x02
 7ec:	9b 81       	ldd	r25, Y+3	; 0x03
 7ee:	68 2f       	mov	r22, r24
 7f0:	80 83       	st	Z, r24
 7f2:	31 83       	std	Z+1, r19	; 0x01
 7f4:	22 83       	std	Z+2, r18	; 0x02
 7f6:	93 83       	std	Z+3, r25	; 0x03
					USART_Transmit_number(1, p2_deck[temp].color);
 7f8:	81 e0       	ldi	r24, 0x01	; 1
					USART_Transmit_number(1, p2_deck[temp].number);
 7fa:	ab dc       	rcall	.-1706   	; 0x152 <USART_Transmit_number>
 7fc:	e0 91 c8 02 	lds	r30, 0x02C8	; 0x8002c8 <temp>
 800:	f0 e0       	ldi	r31, 0x00	; 0
 802:	ee 0f       	add	r30, r30
 804:	ff 1f       	adc	r31, r31
 806:	ee 0f       	add	r30, r30
 808:	ff 1f       	adc	r31, r31
 80a:	e8 5f       	subi	r30, 0xF8	; 248
 80c:	fc 4f       	sbci	r31, 0xFC	; 252
 80e:	61 81       	ldd	r22, Z+1	; 0x01
 810:	81 e0       	ldi	r24, 0x01	; 1
 812:	9f dc       	rcall	.-1730   	; 0x152 <USART_Transmit_number>
					USART1_Transmit_String("   ");
 814:	87 e1       	ldi	r24, 0x17	; 23
 816:	91 e0       	ldi	r25, 0x01	; 1
 818:	8e dc       	rcall	.-1764   	; 0x136 <USART1_Transmit_String>
 81a:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <temp>
					temp++;
 81e:	8f 5f       	subi	r24, 0xFF	; 255
 820:	80 93 c8 02 	sts	0x02C8, r24	; 0x8002c8 <temp>
 824:	24 96       	adiw	r28, 0x04	; 4
					p2_card_cnt++;
				}
			}
			temp = 0;
			USART1_Transmit_String("P2 Deck : ");
			for(int i=0; i<NUM_CARD; i++){
 826:	ac 16       	cp	r10, r28
					USART_Transmit_number(1, p2_deck[temp].number);
					USART1_Transmit_String("   ");
					temp++;
				}
			}
			USART1_Transmit_String("\r\n");
 828:	bd 06       	cpc	r11, r29
 82a:	89 f6       	brne	.-94     	; 0x7ce <__LOCK_REGION_LENGTH__+0x3ce>
 82c:	81 e9       	ldi	r24, 0x91	; 145
			showP1toP2();
 82e:	92 e0       	ldi	r25, 0x02	; 2
 830:	82 dc       	rcall	.-1788   	; 0x136 <USART1_Transmit_String>
			state = 10;
 832:	6a dd       	rcall	.-1324   	; 0x308 <showP1toP2>
 834:	70 92 ce 02 	sts	0x02CE, r7	; 0x8002ce <state+0x1>
 838:	60 92 cd 02 	sts	0x02CD, r6	; 0x8002cd <state>
		}
		if(state == 5){ // state 5 
 83c:	6a c0       	rjmp	.+212    	; 0x912 <__LOCK_REGION_LENGTH__+0x512>
 83e:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <state>
 842:	90 91 ce 02 	lds	r25, 0x02CE	; 0x8002ce <state+0x1>
 846:	05 97       	sbiw	r24, 0x05	; 5
 848:	09 f0       	breq	.+2      	; 0x84c <__LOCK_REGION_LENGTH__+0x44c>
			//_delay_ms(1);
			if(p1_corr_flag == 0) USART0_Transmit_String("Choose Card to Open : ");
 84a:	3d c0       	rjmp	.+122    	; 0x8c6 <__LOCK_REGION_LENGTH__+0x4c6>
 84c:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <p1_corr_flag>
 850:	81 11       	cpse	r24, r1
 852:	04 c0       	rjmp	.+8      	; 0x85c <__LOCK_REGION_LENGTH__+0x45c>
 854:	87 e6       	ldi	r24, 0x67	; 103
 856:	91 e0       	ldi	r25, 0x01	; 1
 858:	49 dc       	rcall	.-1902   	; 0xec <USART0_Transmit_String>
 85a:	05 c0       	rjmp	.+10     	; 0x866 <__LOCK_REGION_LENGTH__+0x466>
			else if(p1_corr_flag == 1) USART0_Transmit_String("Choose Card to Open, Press P to Pass : "); // 몇 번째에 있는 카드 선택인지
 85c:	81 30       	cpi	r24, 0x01	; 1
 85e:	19 f4       	brne	.+6      	; 0x866 <__LOCK_REGION_LENGTH__+0x466>
 860:	8e e7       	ldi	r24, 0x7E	; 126
 862:	91 e0       	ldi	r25, 0x01	; 1
 864:	43 dc       	rcall	.-1914   	; 0xec <USART0_Transmit_String>
			rx = USART0_Receive();
 866:	50 dc       	rcall	.-1888   	; 0x108 <USART0_Receive>
 868:	80 93 ff 02 	sts	0x02FF, r24	; 0x8002ff <rx>
			USART0_Transmit(rx);
 86c:	3b dc       	rcall	.-1930   	; 0xe4 <USART0_Transmit>
			if((rx >= '0')&&(rx <= '9')){
 86e:	90 91 ff 02 	lds	r25, 0x02FF	; 0x8002ff <rx>
 872:	80 ed       	ldi	r24, 0xD0	; 208
 874:	89 0f       	add	r24, r25
 876:	8a 30       	cpi	r24, 0x0A	; 10
 878:	68 f4       	brcc	.+26     	; 0x894 <__LOCK_REGION_LENGTH__+0x494>
				get_number_1[0] = rx-48;
 87a:	d8 01       	movw	r26, r16
 87c:	8c 93       	st	X, r24
				state = 6;	
 87e:	26 e0       	ldi	r18, 0x06	; 6
 880:	30 e0       	ldi	r19, 0x00	; 0
 882:	30 93 ce 02 	sts	0x02CE, r19	; 0x8002ce <state+0x1>
 886:	20 93 cd 02 	sts	0x02CD, r18	; 0x8002cd <state>
			}
			if(p1_corr_flag == 1 && rx == 'P'){
 88a:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <p1_corr_flag>
 88e:	81 30       	cpi	r24, 0x01	; 1
 890:	01 f5       	brne	.+64     	; 0x8d2 <__LOCK_REGION_LENGTH__+0x4d2>
 892:	07 c2       	rjmp	.+1038   	; 0xca2 <__LOCK_REGION_LENGTH__+0x8a2>
 894:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <p1_corr_flag>
 898:	81 30       	cpi	r24, 0x01	; 1
 89a:	a9 f4       	brne	.+42     	; 0x8c6 <__LOCK_REGION_LENGTH__+0x4c6>
				USART0_Transmit_String("\r\n");
 89c:	90 35       	cpi	r25, 0x50	; 80
 89e:	99 f4       	brne	.+38     	; 0x8c6 <__LOCK_REGION_LENGTH__+0x4c6>
 8a0:	81 e9       	ldi	r24, 0x91	; 145
 8a2:	92 e0       	ldi	r25, 0x02	; 2
				USART0_Transmit_String("Passed\r\n");
 8a4:	23 dc       	rcall	.-1978   	; 0xec <USART0_Transmit_String>
 8a6:	86 ea       	ldi	r24, 0xA6	; 166
 8a8:	91 e0       	ldi	r25, 0x01	; 1
 8aa:	20 dc       	rcall	.-1984   	; 0xec <USART0_Transmit_String>
				USART0_Transmit_String("-------------------------------------------\r\n");
 8ac:	8f ea       	ldi	r24, 0xAF	; 175
 8ae:	91 e0       	ldi	r25, 0x01	; 1
 8b0:	1d dc       	rcall	.-1990   	; 0xec <USART0_Transmit_String>
 8b2:	8d ed       	ldi	r24, 0xDD	; 221
				USART1_Transmit_String("Player 1 Passed, It's your turn\r\n");
 8b4:	91 e0       	ldi	r25, 0x01	; 1
 8b6:	3f dc       	rcall	.-1922   	; 0x136 <USART1_Transmit_String>
 8b8:	84 e0       	ldi	r24, 0x04	; 4
 8ba:	90 e0       	ldi	r25, 0x00	; 0
				state = 4;
 8bc:	90 93 ce 02 	sts	0x02CE, r25	; 0x8002ce <state+0x1>
 8c0:	80 93 cd 02 	sts	0x02CD, r24	; 0x8002cd <state>
 8c4:	41 c0       	rjmp	.+130    	; 0x948 <__LOCK_REGION_LENGTH__+0x548>
 8c6:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <state>
			}
		} // state 3 end
		if(state == 6){ // state 4
 8ca:	90 91 ce 02 	lds	r25, 0x02CE	; 0x8002ce <state+0x1>
 8ce:	06 97       	sbiw	r24, 0x06	; 6
 8d0:	01 f5       	brne	.+64     	; 0x912 <__LOCK_REGION_LENGTH__+0x512>
 8d2:	10 92 c7 02 	sts	0x02C7, r1	; 0x8002c7 <p1_corr_flag>
			p1_corr_flag = 0;
			rx = USART0_Receive();
 8d6:	18 dc       	rcall	.-2000   	; 0x108 <USART0_Receive>
 8d8:	80 93 ff 02 	sts	0x02FF, r24	; 0x8002ff <rx>
			USART0_Transmit(rx);
 8dc:	03 dc       	rcall	.-2042   	; 0xe4 <USART0_Transmit>
 8de:	81 e9       	ldi	r24, 0x91	; 145
			USART0_Transmit_String("\r\n");
 8e0:	92 e0       	ldi	r25, 0x02	; 2
 8e2:	04 dc       	rcall	.-2040   	; 0xec <USART0_Transmit_String>
 8e4:	80 91 ff 02 	lds	r24, 0x02FF	; 0x8002ff <rx>
			if((rx >= '0')&&(rx <= '9')){
 8e8:	80 53       	subi	r24, 0x30	; 48
 8ea:	8a 30       	cpi	r24, 0x0A	; 10
 8ec:	90 f4       	brcc	.+36     	; 0x912 <__LOCK_REGION_LENGTH__+0x512>
 8ee:	f8 01       	movw	r30, r16
 8f0:	81 83       	std	Z+1, r24	; 0x01
				get_number_1[1] = rx-48;
 8f2:	90 81       	ld	r25, Z
 8f4:	99 0f       	add	r25, r25
				get_number_1[2] = get_number_1[0]*10 + get_number_1[1] - 1;
 8f6:	29 2f       	mov	r18, r25
 8f8:	22 0f       	add	r18, r18
 8fa:	22 0f       	add	r18, r18
 8fc:	92 0f       	add	r25, r18
 8fe:	89 0f       	add	r24, r25
 900:	81 50       	subi	r24, 0x01	; 1
 902:	82 83       	std	Z+2, r24	; 0x02
 904:	87 e0       	ldi	r24, 0x07	; 7
				//_delay_ms(1);
				state = 7;
 906:	90 e0       	ldi	r25, 0x00	; 0
 908:	90 93 ce 02 	sts	0x02CE, r25	; 0x8002ce <state+0x1>
 90c:	80 93 cd 02 	sts	0x02CD, r24	; 0x8002cd <state>
 910:	06 c0       	rjmp	.+12     	; 0x91e <__LOCK_REGION_LENGTH__+0x51e>
			}			
		} // state 4 end
		if(state == 7){ // state 5
 912:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <state>
 916:	90 91 ce 02 	lds	r25, 0x02CE	; 0x8002ce <state+0x1>
 91a:	07 97       	sbiw	r24, 0x07	; 7
 91c:	a9 f4       	brne	.+42     	; 0x948 <__LOCK_REGION_LENGTH__+0x548>
			USART0_Transmit_String("Number? : "); // 카드가 무엇인지
 91e:	8f ef       	ldi	r24, 0xFF	; 255
 920:	91 e0       	ldi	r25, 0x01	; 1
 922:	e4 db       	rcall	.-2104   	; 0xec <USART0_Transmit_String>
 924:	f1 db       	rcall	.-2078   	; 0x108 <USART0_Receive>
			rx = USART0_Receive();
 926:	80 93 ff 02 	sts	0x02FF, r24	; 0x8002ff <rx>
 92a:	dc db       	rcall	.-2120   	; 0xe4 <USART0_Transmit>
 92c:	80 91 ff 02 	lds	r24, 0x02FF	; 0x8002ff <rx>
			USART0_Transmit(rx);
 930:	80 53       	subi	r24, 0x30	; 48
			if((rx >= '0')&&(rx <= '9')){
 932:	8a 30       	cpi	r24, 0x0A	; 10
 934:	48 f4       	brcc	.+18     	; 0x948 <__LOCK_REGION_LENGTH__+0x548>
 936:	d7 01       	movw	r26, r14
 938:	8c 93       	st	X, r24
 93a:	88 e0       	ldi	r24, 0x08	; 8
				get_number_2[0] = rx-48;
 93c:	90 e0       	ldi	r25, 0x00	; 0
 93e:	90 93 ce 02 	sts	0x02CE, r25	; 0x8002ce <state+0x1>
				state = 8;
 942:	80 93 cd 02 	sts	0x02CD, r24	; 0x8002cd <state>
 946:	06 c0       	rjmp	.+12     	; 0x954 <__LOCK_REGION_LENGTH__+0x554>
 948:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <state>
 94c:	90 91 ce 02 	lds	r25, 0x02CE	; 0x8002ce <state+0x1>
			}
		} // state 5 end
		if(state == 8){ // state 8
 950:	08 97       	sbiw	r24, 0x08	; 8
 952:	e9 f4       	brne	.+58     	; 0x98e <__LOCK_REGION_LENGTH__+0x58e>
 954:	d9 db       	rcall	.-2126   	; 0x108 <USART0_Receive>
 956:	80 93 ff 02 	sts	0x02FF, r24	; 0x8002ff <rx>
			rx = USART0_Receive();
 95a:	c4 db       	rcall	.-2168   	; 0xe4 <USART0_Transmit>
 95c:	81 e9       	ldi	r24, 0x91	; 145
 95e:	92 e0       	ldi	r25, 0x02	; 2
 960:	c5 db       	rcall	.-2166   	; 0xec <USART0_Transmit_String>
			USART0_Transmit(rx);
 962:	80 91 ff 02 	lds	r24, 0x02FF	; 0x8002ff <rx>
			USART0_Transmit_String("\r\n");
 966:	80 53       	subi	r24, 0x30	; 48
 968:	8a 30       	cpi	r24, 0x0A	; 10
 96a:	88 f4       	brcc	.+34     	; 0x98e <__LOCK_REGION_LENGTH__+0x58e>
			if((rx >= '0')&&(rx <= '9')){
 96c:	f7 01       	movw	r30, r14
 96e:	81 83       	std	Z+1, r24	; 0x01
 970:	90 81       	ld	r25, Z
 972:	99 0f       	add	r25, r25
 974:	29 2f       	mov	r18, r25
				get_number_2[1] = rx-48;
 976:	22 0f       	add	r18, r18
 978:	22 0f       	add	r18, r18
				get_number_2[2] = get_number_2[0]*10 + get_number_2[1];
 97a:	92 0f       	add	r25, r18
 97c:	89 0f       	add	r24, r25
 97e:	82 83       	std	Z+2, r24	; 0x02
 980:	89 e0       	ldi	r24, 0x09	; 9
 982:	90 e0       	ldi	r25, 0x00	; 0
 984:	90 93 ce 02 	sts	0x02CE, r25	; 0x8002ce <state+0x1>
 988:	80 93 cd 02 	sts	0x02CD, r24	; 0x8002cd <state>
				state = 9;
 98c:	08 c0       	rjmp	.+16     	; 0x99e <__LOCK_REGION_LENGTH__+0x59e>
 98e:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <state>
 992:	90 91 ce 02 	lds	r25, 0x02CE	; 0x8002ce <state+0x1>
 996:	89 30       	cpi	r24, 0x09	; 9
			}
		} // state 8 end
		if(state == 9){ // state 5
 998:	91 05       	cpc	r25, r1
 99a:	09 f0       	breq	.+2      	; 0x99e <__LOCK_REGION_LENGTH__+0x59e>
 99c:	61 c0       	rjmp	.+194    	; 0xa60 <__LOCK_REGION_LENGTH__+0x660>
 99e:	d8 01       	movw	r26, r16
 9a0:	12 96       	adiw	r26, 0x02	; 2
 9a2:	ec 91       	ld	r30, X
 9a4:	f0 e0       	ldi	r31, 0x00	; 0
 9a6:	ee 0f       	add	r30, r30
			temp = p2_deck[(int)get_number_1[2]].number;
 9a8:	ff 1f       	adc	r31, r31
 9aa:	ee 0f       	add	r30, r30
 9ac:	ff 1f       	adc	r31, r31
 9ae:	e8 5f       	subi	r30, 0xF8	; 248
 9b0:	fc 4f       	sbci	r31, 0xFC	; 252
 9b2:	81 81       	ldd	r24, Z+1	; 0x01
 9b4:	80 93 c8 02 	sts	0x02C8, r24	; 0x8002c8 <temp>
 9b8:	f7 01       	movw	r30, r14
 9ba:	92 81       	ldd	r25, Z+2	; 0x02
 9bc:	89 13       	cpse	r24, r25
 9be:	40 c0       	rjmp	.+128    	; 0xa40 <__LOCK_REGION_LENGTH__+0x640>
			if(temp == get_number_2[2]){
 9c0:	8a e0       	ldi	r24, 0x0A	; 10
 9c2:	92 e0       	ldi	r25, 0x02	; 2
 9c4:	93 db       	rcall	.-2266   	; 0xec <USART0_Transmit_String>
 9c6:	d8 01       	movw	r26, r16
				USART0_Transmit_String("Correct\r\n");
 9c8:	12 96       	adiw	r26, 0x02	; 2
 9ca:	cc 91       	ld	r28, X
 9cc:	d0 e0       	ldi	r29, 0x00	; 0
 9ce:	fe 01       	movw	r30, r28
				p2_deck[(int)get_number_1[2]].opened = 1;
 9d0:	ee 0f       	add	r30, r30
 9d2:	ff 1f       	adc	r31, r31
 9d4:	ee 0f       	add	r30, r30
 9d6:	ff 1f       	adc	r31, r31
 9d8:	e8 5f       	subi	r30, 0xF8	; 248
 9da:	fc 4f       	sbci	r31, 0xFC	; 252
 9dc:	81 e0       	ldi	r24, 0x01	; 1
 9de:	83 83       	std	Z+3, r24	; 0x03
 9e0:	91 81       	ldd	r25, Z+1	; 0x01
 9e2:	f2 01       	movw	r30, r4
 9e4:	cc 0f       	add	r28, r28
 9e6:	dd 1f       	adc	r29, r29
				for(int i=0;i<NUM_CARD;i++){
					if(deck[i].number == p2_deck[(int)get_number_1[2]].number){
 9e8:	cc 0f       	add	r28, r28
 9ea:	dd 1f       	adc	r29, r29
						if(deck[i].color == p2_deck[(int)get_number_1[2]].color){
 9ec:	c8 5f       	subi	r28, 0xF8	; 248
 9ee:	dc 4f       	sbci	r29, 0xFC	; 252
 9f0:	31 e0       	ldi	r19, 0x01	; 1
 9f2:	81 81       	ldd	r24, Z+1	; 0x01
							deck[i].opened = 1;
 9f4:	89 13       	cpse	r24, r25
			temp = p2_deck[(int)get_number_1[2]].number;
			if(temp == get_number_2[2]){
				USART0_Transmit_String("Correct\r\n");
				p2_deck[(int)get_number_1[2]].opened = 1;
				for(int i=0;i<NUM_CARD;i++){
					if(deck[i].number == p2_deck[(int)get_number_1[2]].number){
 9f6:	05 c0       	rjmp	.+10     	; 0xa02 <__LOCK_REGION_LENGTH__+0x602>
 9f8:	20 81       	ld	r18, Z
 9fa:	88 81       	ld	r24, Y
						if(deck[i].color == p2_deck[(int)get_number_1[2]].color){
 9fc:	28 13       	cpse	r18, r24
 9fe:	01 c0       	rjmp	.+2      	; 0xa02 <__LOCK_REGION_LENGTH__+0x602>
 a00:	33 83       	std	Z+3, r19	; 0x03
 a02:	34 96       	adiw	r30, 0x04	; 4
							deck[i].opened = 1;
 a04:	ea 15       	cp	r30, r10
 a06:	fb 05       	cpc	r31, r11
		if(state == 9){ // state 5
			temp = p2_deck[(int)get_number_1[2]].number;
			if(temp == get_number_2[2]){
				USART0_Transmit_String("Correct\r\n");
				p2_deck[(int)get_number_1[2]].opened = 1;
				for(int i=0;i<NUM_CARD;i++){
 a08:	a1 f7       	brne	.-24     	; 0x9f2 <__LOCK_REGION_LENGTH__+0x5f2>
 a0a:	4e dc       	rcall	.-1892   	; 0x2a8 <showP2toP1>
 a0c:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <p2_opened_cnt>
							deck[i].opened = 1;
						}
					}
				}		
				showP2toP1();
				p2_opened_cnt++;
 a10:	8f 5f       	subi	r24, 0xFF	; 255
 a12:	80 93 c9 02 	sts	0x02C9, r24	; 0x8002c9 <p2_opened_cnt>
 a16:	91 e0       	ldi	r25, 0x01	; 1
 a18:	90 93 c7 02 	sts	0x02C7, r25	; 0x8002c7 <p1_corr_flag>
				p1_corr_flag = 1;
				if(p2_card_cnt == p2_opened_cnt) state = 30;
 a1c:	90 91 cb 02 	lds	r25, 0x02CB	; 0x8002cb <p2_card_cnt>
 a20:	89 13       	cpse	r24, r25
 a22:	07 c0       	rjmp	.+14     	; 0xa32 <__LOCK_REGION_LENGTH__+0x632>
 a24:	8e e1       	ldi	r24, 0x1E	; 30
 a26:	90 e0       	ldi	r25, 0x00	; 0
 a28:	90 93 ce 02 	sts	0x02CE, r25	; 0x8002ce <state+0x1>
 a2c:	80 93 cd 02 	sts	0x02CD, r24	; 0x8002cd <state>
				else state = 5;
 a30:	7e c0       	rjmp	.+252    	; 0xb2e <__LOCK_REGION_LENGTH__+0x72e>
 a32:	85 e0       	ldi	r24, 0x05	; 5
 a34:	90 e0       	ldi	r25, 0x00	; 0
 a36:	90 93 ce 02 	sts	0x02CE, r25	; 0x8002ce <state+0x1>
 a3a:	80 93 cd 02 	sts	0x02CD, r24	; 0x8002cd <state>
			}
			else{
				USART0_Transmit_String("Wrong\r\n");
 a3e:	77 c0       	rjmp	.+238    	; 0xb2e <__LOCK_REGION_LENGTH__+0x72e>
 a40:	84 e1       	ldi	r24, 0x14	; 20
 a42:	92 e0       	ldi	r25, 0x02	; 2
 a44:	53 db       	rcall	.-2394   	; 0xec <USART0_Transmit_String>
				USART0_Transmit_String("Player 2's Turn\r\n");
 a46:	8c e1       	ldi	r24, 0x1C	; 28
 a48:	92 e0       	ldi	r25, 0x02	; 2
 a4a:	50 db       	rcall	.-2400   	; 0xec <USART0_Transmit_String>
 a4c:	8f ea       	ldi	r24, 0xAF	; 175
				USART0_Transmit_String("-------------------------------------------\r\n");
 a4e:	91 e0       	ldi	r25, 0x01	; 1
 a50:	4d db       	rcall	.-2406   	; 0xec <USART0_Transmit_String>
 a52:	84 e0       	ldi	r24, 0x04	; 4
				state = 4;
 a54:	90 e0       	ldi	r25, 0x00	; 0
 a56:	90 93 ce 02 	sts	0x02CE, r25	; 0x8002ce <state+0x1>
 a5a:	80 93 cd 02 	sts	0x02CD, r24	; 0x8002cd <state>
			}
			
		}
		if(state == 10){ // state 10
 a5e:	67 c0       	rjmp	.+206    	; 0xb2e <__LOCK_REGION_LENGTH__+0x72e>
 a60:	0a 97       	sbiw	r24, 0x0a	; 10
			//_delay_ms(1);
			if(p2_corr_flag == 0) USART1_Transmit_String("Choose Card to Open : ");
 a62:	09 f0       	breq	.+2      	; 0xa66 <__LOCK_REGION_LENGTH__+0x666>
 a64:	3b c0       	rjmp	.+118    	; 0xadc <__LOCK_REGION_LENGTH__+0x6dc>
 a66:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <__data_end>
 a6a:	81 11       	cpse	r24, r1
 a6c:	04 c0       	rjmp	.+8      	; 0xa76 <__LOCK_REGION_LENGTH__+0x676>
 a6e:	87 e6       	ldi	r24, 0x67	; 103
 a70:	91 e0       	ldi	r25, 0x01	; 1
 a72:	61 db       	rcall	.-2366   	; 0x136 <USART1_Transmit_String>
			else if(p2_corr_flag == 1) USART1_Transmit_String("Choose Card to Open, Press P to Pass : "); // 몇 번째에 있는 카드 선택인지
 a74:	05 c0       	rjmp	.+10     	; 0xa80 <__LOCK_REGION_LENGTH__+0x680>
 a76:	81 30       	cpi	r24, 0x01	; 1
 a78:	19 f4       	brne	.+6      	; 0xa80 <__LOCK_REGION_LENGTH__+0x680>
 a7a:	8e e7       	ldi	r24, 0x7E	; 126
 a7c:	91 e0       	ldi	r25, 0x01	; 1
			rx = USART1_Receive();
 a7e:	5b db       	rcall	.-2378   	; 0x136 <USART1_Transmit_String>
 a80:	73 dc       	rcall	.-1818   	; 0x368 <USART1_Receive>
 a82:	80 93 ff 02 	sts	0x02FF, r24	; 0x8002ff <rx>
			USART1_Transmit(rx);
 a86:	4f db       	rcall	.-2402   	; 0x126 <USART1_Transmit>
			if((rx >= '0')&&(rx <= '9')){
 a88:	90 91 ff 02 	lds	r25, 0x02FF	; 0x8002ff <rx>
 a8c:	80 ed       	ldi	r24, 0xD0	; 208
 a8e:	89 0f       	add	r24, r25
 a90:	8a 30       	cpi	r24, 0x0A	; 10
 a92:	68 f4       	brcc	.+26     	; 0xaae <__LOCK_REGION_LENGTH__+0x6ae>
				get_number_1[0] = rx-48;
 a94:	f8 01       	movw	r30, r16
 a96:	80 83       	st	Z, r24
				state = 11;
 a98:	2b e0       	ldi	r18, 0x0B	; 11
 a9a:	30 e0       	ldi	r19, 0x00	; 0
 a9c:	30 93 ce 02 	sts	0x02CE, r19	; 0x8002ce <state+0x1>
 aa0:	20 93 cd 02 	sts	0x02CD, r18	; 0x8002cd <state>
			}
			if(p2_corr_flag == 1 && rx == 'P'){
 aa4:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <__data_end>
 aa8:	81 30       	cpi	r24, 0x01	; 1
 aaa:	f1 f4       	brne	.+60     	; 0xae8 <__LOCK_REGION_LENGTH__+0x6e8>
 aac:	fe c0       	rjmp	.+508    	; 0xcaa <__LOCK_REGION_LENGTH__+0x8aa>
 aae:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <__data_end>
 ab2:	81 30       	cpi	r24, 0x01	; 1
 ab4:	99 f4       	brne	.+38     	; 0xadc <__LOCK_REGION_LENGTH__+0x6dc>
 ab6:	90 35       	cpi	r25, 0x50	; 80
 ab8:	89 f4       	brne	.+34     	; 0xadc <__LOCK_REGION_LENGTH__+0x6dc>
				USART1_Transmit_String("\r\n");
 aba:	81 e9       	ldi	r24, 0x91	; 145
 abc:	92 e0       	ldi	r25, 0x02	; 2
 abe:	3b db       	rcall	.-2442   	; 0x136 <USART1_Transmit_String>
 ac0:	86 ea       	ldi	r24, 0xA6	; 166
				USART1_Transmit_String("Passed\r\n");
 ac2:	91 e0       	ldi	r25, 0x01	; 1
 ac4:	38 db       	rcall	.-2448   	; 0x136 <USART1_Transmit_String>
 ac6:	8f ea       	ldi	r24, 0xAF	; 175
				USART1_Transmit_String("-------------------------------------------\r\n");
 ac8:	91 e0       	ldi	r25, 0x01	; 1
 aca:	35 db       	rcall	.-2454   	; 0x136 <USART1_Transmit_String>
 acc:	8e e2       	ldi	r24, 0x2E	; 46
				USART0_Transmit_String("Player 2 Passed, It's your turn\r\n");
 ace:	92 e0       	ldi	r25, 0x02	; 2
 ad0:	0d db       	rcall	.-2534   	; 0xec <USART0_Transmit_String>
 ad2:	d0 92 ce 02 	sts	0x02CE, r13	; 0x8002ce <state+0x1>
				state = 3;
 ad6:	c0 92 cd 02 	sts	0x02CD, r12	; 0x8002cd <state>
 ada:	44 c0       	rjmp	.+136    	; 0xb64 <__LOCK_REGION_LENGTH__+0x764>
 adc:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <state>
			}
		} // state 10 end
		if(state == 11){ // state 11
 ae0:	90 91 ce 02 	lds	r25, 0x02CE	; 0x8002ce <state+0x1>
 ae4:	0b 97       	sbiw	r24, 0x0b	; 11
 ae6:	19 f5       	brne	.+70     	; 0xb2e <__LOCK_REGION_LENGTH__+0x72e>
 ae8:	10 92 c6 02 	sts	0x02C6, r1	; 0x8002c6 <__data_end>
			p2_corr_flag = 0;
 aec:	3d dc       	rcall	.-1926   	; 0x368 <USART1_Receive>
 aee:	80 93 ff 02 	sts	0x02FF, r24	; 0x8002ff <rx>
			rx = USART1_Receive();
 af2:	19 db       	rcall	.-2510   	; 0x126 <USART1_Transmit>
 af4:	81 e9       	ldi	r24, 0x91	; 145
			USART1_Transmit(rx);
 af6:	92 e0       	ldi	r25, 0x02	; 2
 af8:	1e db       	rcall	.-2500   	; 0x136 <USART1_Transmit_String>
			USART1_Transmit_String("\r\n");
 afa:	80 91 ff 02 	lds	r24, 0x02FF	; 0x8002ff <rx>
 afe:	80 53       	subi	r24, 0x30	; 48
			if((rx >= '0')&&(rx <= '9')){
 b00:	8a 30       	cpi	r24, 0x0A	; 10
 b02:	a8 f4       	brcc	.+42     	; 0xb2e <__LOCK_REGION_LENGTH__+0x72e>
 b04:	d8 01       	movw	r26, r16
 b06:	11 96       	adiw	r26, 0x01	; 1
 b08:	8c 93       	st	X, r24
				get_number_1[1] = rx-48;
 b0a:	11 97       	sbiw	r26, 0x01	; 1
 b0c:	9c 91       	ld	r25, X
 b0e:	99 0f       	add	r25, r25
 b10:	29 2f       	mov	r18, r25
				get_number_1[2] = get_number_1[0]*10 + get_number_1[1] - 1;
 b12:	22 0f       	add	r18, r18
 b14:	22 0f       	add	r18, r18
 b16:	92 0f       	add	r25, r18
 b18:	89 0f       	add	r24, r25
 b1a:	81 50       	subi	r24, 0x01	; 1
 b1c:	12 96       	adiw	r26, 0x02	; 2
 b1e:	8c 93       	st	X, r24
 b20:	8c e0       	ldi	r24, 0x0C	; 12
 b22:	90 e0       	ldi	r25, 0x00	; 0
 b24:	90 93 ce 02 	sts	0x02CE, r25	; 0x8002ce <state+0x1>
				//_delay_ms(1);
				state = 12;
 b28:	80 93 cd 02 	sts	0x02CD, r24	; 0x8002cd <state>
 b2c:	06 c0       	rjmp	.+12     	; 0xb3a <__LOCK_REGION_LENGTH__+0x73a>
 b2e:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <state>
 b32:	90 91 ce 02 	lds	r25, 0x02CE	; 0x8002ce <state+0x1>
			}
		} // state 11 end
		if(state == 12){ // state 12
 b36:	0c 97       	sbiw	r24, 0x0c	; 12
 b38:	a9 f4       	brne	.+42     	; 0xb64 <__LOCK_REGION_LENGTH__+0x764>
 b3a:	8f ef       	ldi	r24, 0xFF	; 255
 b3c:	91 e0       	ldi	r25, 0x01	; 1
 b3e:	fb da       	rcall	.-2570   	; 0x136 <USART1_Transmit_String>
			USART1_Transmit_String("Number? : "); // 카드가 무엇인지
 b40:	13 dc       	rcall	.-2010   	; 0x368 <USART1_Receive>
 b42:	80 93 ff 02 	sts	0x02FF, r24	; 0x8002ff <rx>
 b46:	ef da       	rcall	.-2594   	; 0x126 <USART1_Transmit>
			rx = USART1_Receive();
 b48:	80 91 ff 02 	lds	r24, 0x02FF	; 0x8002ff <rx>
 b4c:	80 53       	subi	r24, 0x30	; 48
 b4e:	8a 30       	cpi	r24, 0x0A	; 10
			USART1_Transmit(rx);
 b50:	48 f4       	brcc	.+18     	; 0xb64 <__LOCK_REGION_LENGTH__+0x764>
 b52:	f7 01       	movw	r30, r14
			if((rx >= '0')&&(rx <= '9')){
 b54:	80 83       	st	Z, r24
 b56:	8d e0       	ldi	r24, 0x0D	; 13
 b58:	90 e0       	ldi	r25, 0x00	; 0
 b5a:	90 93 ce 02 	sts	0x02CE, r25	; 0x8002ce <state+0x1>
				get_number_2[0] = rx-48;
 b5e:	80 93 cd 02 	sts	0x02CD, r24	; 0x8002cd <state>
				state = 13;
 b62:	06 c0       	rjmp	.+12     	; 0xb70 <__LOCK_REGION_LENGTH__+0x770>
 b64:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <state>
 b68:	90 91 ce 02 	lds	r25, 0x02CE	; 0x8002ce <state+0x1>
 b6c:	0d 97       	sbiw	r24, 0x0d	; 13
			}
		} // state 12 end
		if(state == 13){ // state 13
 b6e:	f1 f4       	brne	.+60     	; 0xbac <__LOCK_REGION_LENGTH__+0x7ac>
 b70:	fb db       	rcall	.-2058   	; 0x368 <USART1_Receive>
 b72:	80 93 ff 02 	sts	0x02FF, r24	; 0x8002ff <rx>
 b76:	d7 da       	rcall	.-2642   	; 0x126 <USART1_Transmit>
 b78:	81 e9       	ldi	r24, 0x91	; 145
			rx = USART1_Receive();
 b7a:	92 e0       	ldi	r25, 0x02	; 2
 b7c:	dc da       	rcall	.-2632   	; 0x136 <USART1_Transmit_String>
 b7e:	80 91 ff 02 	lds	r24, 0x02FF	; 0x8002ff <rx>
			USART1_Transmit(rx);
 b82:	80 53       	subi	r24, 0x30	; 48
 b84:	8a 30       	cpi	r24, 0x0A	; 10
			USART1_Transmit_String("\r\n");
 b86:	90 f4       	brcc	.+36     	; 0xbac <__LOCK_REGION_LENGTH__+0x7ac>
 b88:	d7 01       	movw	r26, r14
 b8a:	11 96       	adiw	r26, 0x01	; 1
 b8c:	8c 93       	st	X, r24
			if((rx >= '0')&&(rx <= '9')){
 b8e:	11 97       	sbiw	r26, 0x01	; 1
 b90:	9c 91       	ld	r25, X
 b92:	99 0f       	add	r25, r25
 b94:	29 2f       	mov	r18, r25
 b96:	22 0f       	add	r18, r18
				get_number_2[1] = rx-48;
 b98:	22 0f       	add	r18, r18
 b9a:	92 0f       	add	r25, r18
 b9c:	89 0f       	add	r24, r25
 b9e:	12 96       	adiw	r26, 0x02	; 2
				get_number_2[2] = get_number_2[0]*10 + get_number_2[1];
 ba0:	8c 93       	st	X, r24
 ba2:	30 92 ce 02 	sts	0x02CE, r3	; 0x8002ce <state+0x1>
 ba6:	20 92 cd 02 	sts	0x02CD, r2	; 0x8002cd <state>
 baa:	08 c0       	rjmp	.+16     	; 0xbbc <__LOCK_REGION_LENGTH__+0x7bc>
 bac:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <state>
				state = 14;
 bb0:	90 91 ce 02 	lds	r25, 0x02CE	; 0x8002ce <state+0x1>
 bb4:	8e 30       	cpi	r24, 0x0E	; 14
 bb6:	91 05       	cpc	r25, r1
 bb8:	09 f0       	breq	.+2      	; 0xbbc <__LOCK_REGION_LENGTH__+0x7bc>
			}
		} // state 13 end
		if(state == 14){ // state 14
 bba:	5f c0       	rjmp	.+190    	; 0xc7a <__LOCK_REGION_LENGTH__+0x87a>
 bbc:	d8 01       	movw	r26, r16
 bbe:	12 96       	adiw	r26, 0x02	; 2
 bc0:	ec 91       	ld	r30, X
 bc2:	f0 e0       	ldi	r31, 0x00	; 0
 bc4:	ee 0f       	add	r30, r30
 bc6:	ff 1f       	adc	r31, r31
 bc8:	ee 0f       	add	r30, r30
			temp = p1_deck[(int)get_number_1[2]].number;
 bca:	ff 1f       	adc	r31, r31
 bcc:	e1 53       	subi	r30, 0x31	; 49
 bce:	fd 4f       	sbci	r31, 0xFD	; 253
 bd0:	81 81       	ldd	r24, Z+1	; 0x01
 bd2:	80 93 c8 02 	sts	0x02C8, r24	; 0x8002c8 <temp>
 bd6:	f7 01       	movw	r30, r14
 bd8:	92 81       	ldd	r25, Z+2	; 0x02
 bda:	89 13       	cpse	r24, r25
 bdc:	40 c0       	rjmp	.+128    	; 0xc5e <__LOCK_REGION_LENGTH__+0x85e>
 bde:	8a e0       	ldi	r24, 0x0A	; 10
 be0:	92 e0       	ldi	r25, 0x02	; 2
			if(temp == get_number_2[2]){
 be2:	a9 da       	rcall	.-2734   	; 0x136 <USART1_Transmit_String>
 be4:	d8 01       	movw	r26, r16
 be6:	12 96       	adiw	r26, 0x02	; 2
				USART1_Transmit_String("Correct\r\n");
 be8:	cc 91       	ld	r28, X
 bea:	d0 e0       	ldi	r29, 0x00	; 0
 bec:	fe 01       	movw	r30, r28
				p1_deck[(int)get_number_1[2]].opened = 1;
 bee:	ee 0f       	add	r30, r30
 bf0:	ff 1f       	adc	r31, r31
 bf2:	ee 0f       	add	r30, r30
 bf4:	ff 1f       	adc	r31, r31
 bf6:	e1 53       	subi	r30, 0x31	; 49
 bf8:	fd 4f       	sbci	r31, 0xFD	; 253
 bfa:	81 e0       	ldi	r24, 0x01	; 1
 bfc:	83 83       	std	Z+3, r24	; 0x03
 bfe:	91 81       	ldd	r25, Z+1	; 0x01
 c00:	f2 01       	movw	r30, r4
 c02:	cc 0f       	add	r28, r28
				for(int i=0;i<NUM_CARD;i++){
					if(deck[i].number == p1_deck[(int)get_number_1[2]].number){
 c04:	dd 1f       	adc	r29, r29
 c06:	cc 0f       	add	r28, r28
						if(deck[i].color == p1_deck[(int)get_number_1[2]].color){
 c08:	dd 1f       	adc	r29, r29
 c0a:	c1 53       	subi	r28, 0x31	; 49
 c0c:	dd 4f       	sbci	r29, 0xFD	; 253
 c0e:	31 e0       	ldi	r19, 0x01	; 1
 c10:	81 81       	ldd	r24, Z+1	; 0x01
							deck[i].opened = 1;
 c12:	89 13       	cpse	r24, r25
			temp = p1_deck[(int)get_number_1[2]].number;
			if(temp == get_number_2[2]){
				USART1_Transmit_String("Correct\r\n");
				p1_deck[(int)get_number_1[2]].opened = 1;
				for(int i=0;i<NUM_CARD;i++){
					if(deck[i].number == p1_deck[(int)get_number_1[2]].number){
 c14:	05 c0       	rjmp	.+10     	; 0xc20 <__LOCK_REGION_LENGTH__+0x820>
 c16:	20 81       	ld	r18, Z
 c18:	88 81       	ld	r24, Y
						if(deck[i].color == p1_deck[(int)get_number_1[2]].color){
 c1a:	28 13       	cpse	r18, r24
 c1c:	01 c0       	rjmp	.+2      	; 0xc20 <__LOCK_REGION_LENGTH__+0x820>
 c1e:	33 83       	std	Z+3, r19	; 0x03
 c20:	34 96       	adiw	r30, 0x04	; 4
							deck[i].opened = 1;
 c22:	ea 15       	cp	r30, r10
 c24:	fb 05       	cpc	r31, r11
		if(state == 14){ // state 14
			temp = p1_deck[(int)get_number_1[2]].number;
			if(temp == get_number_2[2]){
				USART1_Transmit_String("Correct\r\n");
				p1_deck[(int)get_number_1[2]].opened = 1;
				for(int i=0;i<NUM_CARD;i++){
 c26:	a1 f7       	brne	.-24     	; 0xc10 <__LOCK_REGION_LENGTH__+0x810>
 c28:	6f db       	rcall	.-2338   	; 0x308 <showP1toP2>
 c2a:	80 91 ca 02 	lds	r24, 0x02CA	; 0x8002ca <p1_opened_cnt>
						if(deck[i].color == p1_deck[(int)get_number_1[2]].color){
							deck[i].opened = 1;
						}
					}
				}
				showP1toP2();
 c2e:	8f 5f       	subi	r24, 0xFF	; 255
				p1_opened_cnt++;
 c30:	80 93 ca 02 	sts	0x02CA, r24	; 0x8002ca <p1_opened_cnt>
 c34:	81 e0       	ldi	r24, 0x01	; 1
 c36:	80 93 c6 02 	sts	0x02C6, r24	; 0x8002c6 <__data_end>
				p2_corr_flag = 1;
 c3a:	90 91 cb 02 	lds	r25, 0x02CB	; 0x8002cb <p2_card_cnt>
 c3e:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <p2_opened_cnt>
				if(p2_card_cnt == p2_opened_cnt) state = 31;
 c42:	98 13       	cpse	r25, r24
 c44:	07 c0       	rjmp	.+14     	; 0xc54 <__LOCK_REGION_LENGTH__+0x854>
 c46:	8f e1       	ldi	r24, 0x1F	; 31
 c48:	90 e0       	ldi	r25, 0x00	; 0
 c4a:	90 93 ce 02 	sts	0x02CE, r25	; 0x8002ce <state+0x1>
 c4e:	80 93 cd 02 	sts	0x02CD, r24	; 0x8002cd <state>
 c52:	20 c0       	rjmp	.+64     	; 0xc94 <__LOCK_REGION_LENGTH__+0x894>
 c54:	70 92 ce 02 	sts	0x02CE, r7	; 0x8002ce <state+0x1>
 c58:	60 92 cd 02 	sts	0x02CD, r6	; 0x8002cd <state>
				else state = 10;
 c5c:	12 cc       	rjmp	.-2012   	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
 c5e:	84 e1       	ldi	r24, 0x14	; 20
 c60:	92 e0       	ldi	r25, 0x02	; 2
 c62:	69 da       	rcall	.-2862   	; 0x136 <USART1_Transmit_String>
			}
			else{
				USART1_Transmit_String("Wrong\r\n");
 c64:	80 e5       	ldi	r24, 0x50	; 80
 c66:	92 e0       	ldi	r25, 0x02	; 2
 c68:	66 da       	rcall	.-2868   	; 0x136 <USART1_Transmit_String>
 c6a:	8f ea       	ldi	r24, 0xAF	; 175
				USART1_Transmit_String("Player 1's Turn\r\n");
 c6c:	91 e0       	ldi	r25, 0x01	; 1
 c6e:	63 da       	rcall	.-2874   	; 0x136 <USART1_Transmit_String>
 c70:	d0 92 ce 02 	sts	0x02CE, r13	; 0x8002ce <state+0x1>
				USART1_Transmit_String("-------------------------------------------\r\n");
 c74:	c0 92 cd 02 	sts	0x02CD, r12	; 0x8002cd <state>
 c78:	04 cc       	rjmp	.-2040   	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
 c7a:	8e 31       	cpi	r24, 0x1E	; 30
				state = 3;
 c7c:	91 05       	cpc	r25, r1
 c7e:	39 f4       	brne	.+14     	; 0xc8e <__LOCK_REGION_LENGTH__+0x88e>
 c80:	82 e6       	ldi	r24, 0x62	; 98
 c82:	92 e0       	ldi	r25, 0x02	; 2
 c84:	33 da       	rcall	.-2970   	; 0xec <USART0_Transmit_String>
			}
			
		}
		if(state == 30){
 c86:	82 e6       	ldi	r24, 0x62	; 98
 c88:	92 e0       	ldi	r25, 0x02	; 2
 c8a:	55 da       	rcall	.-2902   	; 0x136 <USART1_Transmit_String>
			USART0_Transmit_String("******* P1 Win *******\r\n******* P2 Lose *******\r\n");
 c8c:	12 c0       	rjmp	.+36     	; 0xcb2 <__LOCK_REGION_LENGTH__+0x8b2>
 c8e:	4f 97       	sbiw	r24, 0x1f	; 31
 c90:	09 f0       	breq	.+2      	; 0xc94 <__LOCK_REGION_LENGTH__+0x894>
 c92:	f7 cb       	rjmp	.-2066   	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
			USART1_Transmit_String("******* P1 Win *******\r\n******* P2 Lose *******\r\n");
 c94:	84 e9       	ldi	r24, 0x94	; 148
 c96:	92 e0       	ldi	r25, 0x02	; 2
 c98:	29 da       	rcall	.-2990   	; 0xec <USART0_Transmit_String>
 c9a:	84 e9       	ldi	r24, 0x94	; 148
			break;
 c9c:	92 e0       	ldi	r25, 0x02	; 2
		}
		if(state == 31){
 c9e:	4b da       	rcall	.-2922   	; 0x136 <USART1_Transmit_String>
 ca0:	08 c0       	rjmp	.+16     	; 0xcb2 <__LOCK_REGION_LENGTH__+0x8b2>
 ca2:	90 35       	cpi	r25, 0x50	; 80
			USART0_Transmit_String("******* P2 Win *******\r\n******* P2 Lose *******\r\n");
 ca4:	09 f0       	breq	.+2      	; 0xca8 <__LOCK_REGION_LENGTH__+0x8a8>
 ca6:	15 ce       	rjmp	.-982    	; 0x8d2 <__LOCK_REGION_LENGTH__+0x4d2>
 ca8:	fb cd       	rjmp	.-1034   	; 0x8a0 <__LOCK_REGION_LENGTH__+0x4a0>
 caa:	90 35       	cpi	r25, 0x50	; 80
			USART1_Transmit_String("******* P2 Win *******\r\n******* P2 Lose *******\r\n");
 cac:	09 f0       	breq	.+2      	; 0xcb0 <__LOCK_REGION_LENGTH__+0x8b0>
 cae:	1c cf       	rjmp	.-456    	; 0xae8 <__LOCK_REGION_LENGTH__+0x6e8>
 cb0:	04 cf       	rjmp	.-504    	; 0xaba <__LOCK_REGION_LENGTH__+0x6ba>
 cb2:	80 e0       	ldi	r24, 0x00	; 0
 cb4:	90 e0       	ldi	r25, 0x00	; 0
			USART0_Transmit(rx);
			if((rx >= '0')&&(rx <= '9')){
				get_number_1[0] = rx-48;
				state = 6;	
			}
			if(p1_corr_flag == 1 && rx == 'P'){
 cb6:	df 91       	pop	r29
 cb8:	cf 91       	pop	r28
 cba:	1f 91       	pop	r17
 cbc:	0f 91       	pop	r16
			USART1_Transmit(rx);
			if((rx >= '0')&&(rx <= '9')){
				get_number_1[0] = rx-48;
				state = 11;
			}
			if(p2_corr_flag == 1 && rx == 'P'){
 cbe:	ff 90       	pop	r15
 cc0:	ef 90       	pop	r14
 cc2:	df 90       	pop	r13
 cc4:	cf 90       	pop	r12
			USART0_Transmit_String("******* P2 Win *******\r\n******* P2 Lose *******\r\n");
			USART1_Transmit_String("******* P2 Win *******\r\n******* P2 Lose *******\r\n");
			break;
		}
    } // while end
} // main end
 cc6:	bf 90       	pop	r11
 cc8:	af 90       	pop	r10
 cca:	9f 90       	pop	r9
 ccc:	8f 90       	pop	r8
 cce:	7f 90       	pop	r7
 cd0:	6f 90       	pop	r6
 cd2:	5f 90       	pop	r5
 cd4:	4f 90       	pop	r4
 cd6:	3f 90       	pop	r3
 cd8:	2f 90       	pop	r2
 cda:	08 95       	ret

00000cdc <_exit>:
 cdc:	f8 94       	cli

00000cde <__stop_program>:
 cde:	ff cf       	rjmp	.-2      	; 0xcde <__stop_program>
