
Game_DaVinci_Code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000e0  00800100  00000bf0  00000c84  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000bf0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000d0  008001e0  008001e0  00000d64  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d64  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000d94  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  00000dd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000168d  00000000  00000000  00000e50  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000092f  00000000  00000000  000024dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c44  00000000  00000000  00002e0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000124  00000000  00000000  00003a50  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000059e  00000000  00000000  00003b74  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008e6  00000000  00000000  00004112  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  000049f8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 ef       	ldi	r30, 0xF0	; 240
  a0:	fb e0       	ldi	r31, 0x0B	; 11
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 3e       	cpi	r26, 0xE0	; 224
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	22 e0       	ldi	r18, 0x02	; 2
  b4:	a0 ee       	ldi	r26, 0xE0	; 224
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a0 3b       	cpi	r26, 0xB0	; 176
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	5a d1       	rcall	.+692    	; 0x378 <main>
  c4:	93 c5       	rjmp	.+2854   	; 0xbec <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <Timer_Init>:
/*******************************************************************/
/*                         Timer Functions                         */
/*******************************************************************/

void Timer_Init(){
	TCCR0 = (1<<CS0);
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	83 bf       	out	0x33, r24	; 51
	TIMSK = (1<<TOIE0);
  cc:	87 bf       	out	0x37, r24	; 55
	TCNT0 = 0;
  ce:	12 be       	out	0x32, r1	; 50
  d0:	08 95       	ret

000000d2 <USART0_Init>:
/*******************************************************************/
/*                         USART Functions                         */
/*******************************************************************/

void USART0_Init(unsigned int ubrr){ // Set USART0 Registers
	UBRR0H = (unsigned char)(ubrr >> 8); // UBRR's High bits
  d2:	90 93 90 00 	sts	0x0090, r25	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L = (unsigned char)(ubrr);		 // UBRR;s Low bits -> UBRR : 103
  d6:	89 b9       	out	0x09, r24	; 9
	UCSR0B = (1<<RXEN0) | (1<<TXEN0); // Receive Enable, Transmit Enable
  d8:	88 e1       	ldi	r24, 0x18	; 24
  da:	8a b9       	out	0x0a, r24	; 10
	UCSR0C = (1<<UCSZ00) | (1<<UCSZ01);			// Set Data bits to 8 bits
  dc:	86 e0       	ldi	r24, 0x06	; 6
  de:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
  e2:	08 95       	ret

000000e4 <USART0_Transmit>:
}

void USART0_Transmit(char data){
	while(!((UCSR0A)  & (1<<UDRE0))); // Wait for Data Register empty
  e4:	5d 9b       	sbis	0x0b, 5	; 11
  e6:	fe cf       	rjmp	.-4      	; 0xe4 <USART0_Transmit>
	UDR0 = data;
  e8:	8c b9       	out	0x0c, r24	; 12
  ea:	08 95       	ret

000000ec <USART0_Transmit_String>:
}

void USART0_Transmit_String(char *str){
  ec:	cf 93       	push	r28
  ee:	df 93       	push	r29
  f0:	ec 01       	movw	r28, r24
	while(*str != '\0') USART0_Transmit(*str++);
  f2:	88 81       	ld	r24, Y
  f4:	88 23       	and	r24, r24
  f6:	29 f0       	breq	.+10     	; 0x102 <USART0_Transmit_String+0x16>
  f8:	21 96       	adiw	r28, 0x01	; 1
  fa:	f4 df       	rcall	.-24     	; 0xe4 <USART0_Transmit>
  fc:	89 91       	ld	r24, Y+
  fe:	81 11       	cpse	r24, r1
 100:	fc cf       	rjmp	.-8      	; 0xfa <USART0_Transmit_String+0xe>
}
 102:	df 91       	pop	r29
 104:	cf 91       	pop	r28
 106:	08 95       	ret

00000108 <USART0_Receive>:

char USART0_Receive(void){
	while(!(UCSR0A & (1<<RXC0))); // Wait for Receive Buffer is empty
 108:	5f 9b       	sbis	0x0b, 7	; 11
 10a:	fe cf       	rjmp	.-4      	; 0x108 <USART0_Receive>
	return UDR0;
 10c:	8c b1       	in	r24, 0x0c	; 12
}
 10e:	08 95       	ret

00000110 <USART1_Init>:

void USART1_Init(unsigned int ubrr){ // Set USART0 Registers
	UBRR1H = (unsigned char)(ubrr >> 8); // UBRR's High bits
 110:	90 93 98 00 	sts	0x0098, r25	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
	UBRR1L = (unsigned char)(ubrr);		 // UBRR;s Low bits -> UBRR : 103
 114:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
	UCSR1B = (1<<RXEN1) | (1<<TXEN1); // Receive Enable, Transmit Enable
 118:	88 e1       	ldi	r24, 0x18	; 24
 11a:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
	UCSR1C = (1<<UCSZ10) | (1<<UCSZ11);			// Set Data bits to 8 bits
 11e:	86 e0       	ldi	r24, 0x06	; 6
 120:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <__TEXT_REGION_LENGTH__+0x7e009d>
 124:	08 95       	ret

00000126 <USART1_Transmit>:
}

void USART1_Transmit(char data){
	while(!((UCSR1A)  & (1<<UDRE1))); // Wait for Data Register empty
 126:	eb e9       	ldi	r30, 0x9B	; 155
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	90 81       	ld	r25, Z
 12c:	95 ff       	sbrs	r25, 5
 12e:	fd cf       	rjmp	.-6      	; 0x12a <USART1_Transmit+0x4>
	UDR1 = data;
 130:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
 134:	08 95       	ret

00000136 <USART1_Transmit_String>:
}

void USART1_Transmit_String(char *str){
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
 13a:	ec 01       	movw	r28, r24
	while(*str != '\0') USART1_Transmit(*str++);
 13c:	88 81       	ld	r24, Y
 13e:	88 23       	and	r24, r24
 140:	29 f0       	breq	.+10     	; 0x14c <USART1_Transmit_String+0x16>
 142:	21 96       	adiw	r28, 0x01	; 1
 144:	f0 df       	rcall	.-32     	; 0x126 <USART1_Transmit>
 146:	89 91       	ld	r24, Y+
 148:	81 11       	cpse	r24, r1
 14a:	fc cf       	rjmp	.-8      	; 0x144 <USART1_Transmit_String+0xe>
}
 14c:	df 91       	pop	r29
 14e:	cf 91       	pop	r28
 150:	08 95       	ret

00000152 <USART_Transmit_number>:

/*******************************************************************/
/*                          USER Functions                         */
/*******************************************************************/
void USART_Transmit_number(char USART_NUM,char num){
	if(num == 0){
 152:	61 11       	cpse	r22, r1
 154:	0b c0       	rjmp	.+22     	; 0x16c <USART_Transmit_number+0x1a>
		if(USART_NUM == 0) USART0_Transmit('0');
 156:	81 11       	cpse	r24, r1
 158:	03 c0       	rjmp	.+6      	; 0x160 <USART_Transmit_number+0xe>
 15a:	80 e3       	ldi	r24, 0x30	; 48
 15c:	c3 cf       	rjmp	.-122    	; 0xe4 <USART0_Transmit>
 15e:	08 95       	ret
		else if(USART_NUM == 1) USART1_Transmit('0');
 160:	81 30       	cpi	r24, 0x01	; 1
 162:	09 f0       	breq	.+2      	; 0x166 <USART_Transmit_number+0x14>
 164:	a0 c0       	rjmp	.+320    	; 0x2a6 <USART_Transmit_number+0x154>
 166:	80 e3       	ldi	r24, 0x30	; 48
 168:	de cf       	rjmp	.-68     	; 0x126 <USART1_Transmit>
 16a:	08 95       	ret
	}
	else if(num == 1){
 16c:	61 30       	cpi	r22, 0x01	; 1
 16e:	59 f4       	brne	.+22     	; 0x186 <USART_Transmit_number+0x34>
		if(USART_NUM == 0) USART0_Transmit('1');
 170:	81 11       	cpse	r24, r1
 172:	03 c0       	rjmp	.+6      	; 0x17a <USART_Transmit_number+0x28>
 174:	81 e3       	ldi	r24, 0x31	; 49
 176:	b6 cf       	rjmp	.-148    	; 0xe4 <USART0_Transmit>
 178:	08 95       	ret
		else if(USART_NUM == 1) USART1_Transmit('1');
 17a:	81 30       	cpi	r24, 0x01	; 1
 17c:	09 f0       	breq	.+2      	; 0x180 <USART_Transmit_number+0x2e>
 17e:	93 c0       	rjmp	.+294    	; 0x2a6 <USART_Transmit_number+0x154>
 180:	81 e3       	ldi	r24, 0x31	; 49
 182:	d1 cf       	rjmp	.-94     	; 0x126 <USART1_Transmit>
 184:	08 95       	ret
	}
	else if(num == 2){
 186:	62 30       	cpi	r22, 0x02	; 2
		if(USART_NUM == 0) USART0_Transmit('2');
 188:	59 f4       	brne	.+22     	; 0x1a0 <USART_Transmit_number+0x4e>
 18a:	81 11       	cpse	r24, r1
 18c:	03 c0       	rjmp	.+6      	; 0x194 <USART_Transmit_number+0x42>
 18e:	82 e3       	ldi	r24, 0x32	; 50
 190:	a9 cf       	rjmp	.-174    	; 0xe4 <USART0_Transmit>
		else if(USART_NUM == 1) USART1_Transmit('2');
 192:	08 95       	ret
 194:	81 30       	cpi	r24, 0x01	; 1
 196:	09 f0       	breq	.+2      	; 0x19a <USART_Transmit_number+0x48>
 198:	86 c0       	rjmp	.+268    	; 0x2a6 <USART_Transmit_number+0x154>
 19a:	82 e3       	ldi	r24, 0x32	; 50
 19c:	c4 cf       	rjmp	.-120    	; 0x126 <USART1_Transmit>
	}
	else if(num == 3){
 19e:	08 95       	ret
 1a0:	63 30       	cpi	r22, 0x03	; 3
		if(USART_NUM == 0) USART0_Transmit('3');
 1a2:	59 f4       	brne	.+22     	; 0x1ba <USART_Transmit_number+0x68>
 1a4:	81 11       	cpse	r24, r1
 1a6:	03 c0       	rjmp	.+6      	; 0x1ae <USART_Transmit_number+0x5c>
 1a8:	83 e3       	ldi	r24, 0x33	; 51
 1aa:	9c cf       	rjmp	.-200    	; 0xe4 <USART0_Transmit>
		else if(USART_NUM == 1) USART1_Transmit('3');
 1ac:	08 95       	ret
 1ae:	81 30       	cpi	r24, 0x01	; 1
 1b0:	09 f0       	breq	.+2      	; 0x1b4 <USART_Transmit_number+0x62>
 1b2:	79 c0       	rjmp	.+242    	; 0x2a6 <USART_Transmit_number+0x154>
 1b4:	83 e3       	ldi	r24, 0x33	; 51
 1b6:	b7 cf       	rjmp	.-146    	; 0x126 <USART1_Transmit>
	}
	else if(num == 4){
 1b8:	08 95       	ret
 1ba:	64 30       	cpi	r22, 0x04	; 4
		if(USART_NUM == 0) USART0_Transmit('4');
 1bc:	59 f4       	brne	.+22     	; 0x1d4 <USART_Transmit_number+0x82>
 1be:	81 11       	cpse	r24, r1
 1c0:	03 c0       	rjmp	.+6      	; 0x1c8 <USART_Transmit_number+0x76>
 1c2:	84 e3       	ldi	r24, 0x34	; 52
 1c4:	8f cf       	rjmp	.-226    	; 0xe4 <USART0_Transmit>
		else if(USART_NUM == 1) USART1_Transmit('4');
 1c6:	08 95       	ret
 1c8:	81 30       	cpi	r24, 0x01	; 1
 1ca:	09 f0       	breq	.+2      	; 0x1ce <USART_Transmit_number+0x7c>
 1cc:	6c c0       	rjmp	.+216    	; 0x2a6 <USART_Transmit_number+0x154>
 1ce:	84 e3       	ldi	r24, 0x34	; 52
 1d0:	aa cf       	rjmp	.-172    	; 0x126 <USART1_Transmit>
	}
	else if(num == 5){
 1d2:	08 95       	ret
		if(USART_NUM == 0) USART0_Transmit('5');
 1d4:	65 30       	cpi	r22, 0x05	; 5
 1d6:	59 f4       	brne	.+22     	; 0x1ee <USART_Transmit_number+0x9c>
 1d8:	81 11       	cpse	r24, r1
 1da:	03 c0       	rjmp	.+6      	; 0x1e2 <USART_Transmit_number+0x90>
 1dc:	85 e3       	ldi	r24, 0x35	; 53
 1de:	82 cf       	rjmp	.-252    	; 0xe4 <USART0_Transmit>
		else if(USART_NUM == 1) USART1_Transmit('5');
 1e0:	08 95       	ret
 1e2:	81 30       	cpi	r24, 0x01	; 1
 1e4:	09 f0       	breq	.+2      	; 0x1e8 <USART_Transmit_number+0x96>
 1e6:	5f c0       	rjmp	.+190    	; 0x2a6 <USART_Transmit_number+0x154>
 1e8:	85 e3       	ldi	r24, 0x35	; 53
	}
	else if(num == 6){
 1ea:	9d cf       	rjmp	.-198    	; 0x126 <USART1_Transmit>
 1ec:	08 95       	ret
		if(USART_NUM == 0) USART0_Transmit('6');
 1ee:	66 30       	cpi	r22, 0x06	; 6
 1f0:	59 f4       	brne	.+22     	; 0x208 <USART_Transmit_number+0xb6>
 1f2:	81 11       	cpse	r24, r1
 1f4:	03 c0       	rjmp	.+6      	; 0x1fc <USART_Transmit_number+0xaa>
 1f6:	86 e3       	ldi	r24, 0x36	; 54
		else if(USART_NUM == 1) USART1_Transmit('6');
 1f8:	75 cf       	rjmp	.-278    	; 0xe4 <USART0_Transmit>
 1fa:	08 95       	ret
 1fc:	81 30       	cpi	r24, 0x01	; 1
 1fe:	09 f0       	breq	.+2      	; 0x202 <USART_Transmit_number+0xb0>
 200:	52 c0       	rjmp	.+164    	; 0x2a6 <USART_Transmit_number+0x154>
 202:	86 e3       	ldi	r24, 0x36	; 54
	}
	else if(num == 7){
 204:	90 cf       	rjmp	.-224    	; 0x126 <USART1_Transmit>
 206:	08 95       	ret
		if(USART_NUM == 0) USART0_Transmit('7');
 208:	67 30       	cpi	r22, 0x07	; 7
 20a:	59 f4       	brne	.+22     	; 0x222 <USART_Transmit_number+0xd0>
 20c:	81 11       	cpse	r24, r1
 20e:	03 c0       	rjmp	.+6      	; 0x216 <USART_Transmit_number+0xc4>
 210:	87 e3       	ldi	r24, 0x37	; 55
		else if(USART_NUM == 1) USART1_Transmit('7');
 212:	68 cf       	rjmp	.-304    	; 0xe4 <USART0_Transmit>
 214:	08 95       	ret
 216:	81 30       	cpi	r24, 0x01	; 1
 218:	09 f0       	breq	.+2      	; 0x21c <USART_Transmit_number+0xca>
 21a:	45 c0       	rjmp	.+138    	; 0x2a6 <USART_Transmit_number+0x154>
 21c:	87 e3       	ldi	r24, 0x37	; 55
	}
	else if(num == 8){
 21e:	83 cf       	rjmp	.-250    	; 0x126 <USART1_Transmit>
 220:	08 95       	ret
		if(USART_NUM == 0) USART0_Transmit('8');
 222:	68 30       	cpi	r22, 0x08	; 8
 224:	59 f4       	brne	.+22     	; 0x23c <USART_Transmit_number+0xea>
 226:	81 11       	cpse	r24, r1
 228:	03 c0       	rjmp	.+6      	; 0x230 <USART_Transmit_number+0xde>
		else if(USART_NUM == 1) USART1_Transmit('8');
 22a:	88 e3       	ldi	r24, 0x38	; 56
 22c:	5b cf       	rjmp	.-330    	; 0xe4 <USART0_Transmit>
 22e:	08 95       	ret
 230:	81 30       	cpi	r24, 0x01	; 1
 232:	09 f0       	breq	.+2      	; 0x236 <USART_Transmit_number+0xe4>
 234:	38 c0       	rjmp	.+112    	; 0x2a6 <USART_Transmit_number+0x154>
 236:	88 e3       	ldi	r24, 0x38	; 56
	}
	else if(num == 9){
 238:	76 cf       	rjmp	.-276    	; 0x126 <USART1_Transmit>
		if(USART_NUM == 0) USART0_Transmit('9');
 23a:	08 95       	ret
 23c:	69 30       	cpi	r22, 0x09	; 9
 23e:	51 f4       	brne	.+20     	; 0x254 <USART_Transmit_number+0x102>
 240:	81 11       	cpse	r24, r1
 242:	03 c0       	rjmp	.+6      	; 0x24a <USART_Transmit_number+0xf8>
		else if(USART_NUM == 1) USART1_Transmit('9');
 244:	89 e3       	ldi	r24, 0x39	; 57
 246:	4e cf       	rjmp	.-356    	; 0xe4 <USART0_Transmit>
 248:	08 95       	ret
 24a:	81 30       	cpi	r24, 0x01	; 1
 24c:	61 f5       	brne	.+88     	; 0x2a6 <USART_Transmit_number+0x154>
 24e:	89 e3       	ldi	r24, 0x39	; 57
	}
	else if(num == 10){
 250:	6a cf       	rjmp	.-300    	; 0x126 <USART1_Transmit>
		if(USART_NUM == 0) USART0_Transmit_String("10");
 252:	08 95       	ret
 254:	6a 30       	cpi	r22, 0x0A	; 10
 256:	61 f4       	brne	.+24     	; 0x270 <USART_Transmit_number+0x11e>
 258:	81 11       	cpse	r24, r1
 25a:	04 c0       	rjmp	.+8      	; 0x264 <USART_Transmit_number+0x112>
 25c:	80 e0       	ldi	r24, 0x00	; 0
		else if(USART_NUM == 1) USART1_Transmit_String("10");
 25e:	91 e0       	ldi	r25, 0x01	; 1
 260:	45 cf       	rjmp	.-374    	; 0xec <USART0_Transmit_String>
 262:	08 95       	ret
 264:	81 30       	cpi	r24, 0x01	; 1
 266:	f9 f4       	brne	.+62     	; 0x2a6 <USART_Transmit_number+0x154>
 268:	80 e0       	ldi	r24, 0x00	; 0
	}
	else if(num == 11){
 26a:	91 e0       	ldi	r25, 0x01	; 1
 26c:	64 cf       	rjmp	.-312    	; 0x136 <USART1_Transmit_String>
		if(USART_NUM == 0) USART0_Transmit_String("11");
 26e:	08 95       	ret
 270:	6b 30       	cpi	r22, 0x0B	; 11
 272:	61 f4       	brne	.+24     	; 0x28c <USART_Transmit_number+0x13a>
 274:	81 11       	cpse	r24, r1
 276:	04 c0       	rjmp	.+8      	; 0x280 <USART_Transmit_number+0x12e>
 278:	83 e0       	ldi	r24, 0x03	; 3
		else if(USART_NUM == 1) USART1_Transmit_String("11");
 27a:	91 e0       	ldi	r25, 0x01	; 1
 27c:	37 cf       	rjmp	.-402    	; 0xec <USART0_Transmit_String>
 27e:	08 95       	ret
 280:	81 30       	cpi	r24, 0x01	; 1
 282:	89 f4       	brne	.+34     	; 0x2a6 <USART_Transmit_number+0x154>
 284:	83 e0       	ldi	r24, 0x03	; 3
 286:	91 e0       	ldi	r25, 0x01	; 1
	}
	else if(num == 12){
 288:	56 cf       	rjmp	.-340    	; 0x136 <USART1_Transmit_String>
 28a:	08 95       	ret
		if(USART_NUM == 0) USART0_Transmit_String("12");
 28c:	6c 30       	cpi	r22, 0x0C	; 12
 28e:	59 f4       	brne	.+22     	; 0x2a6 <USART_Transmit_number+0x154>
 290:	81 11       	cpse	r24, r1
 292:	04 c0       	rjmp	.+8      	; 0x29c <USART_Transmit_number+0x14a>
 294:	86 e0       	ldi	r24, 0x06	; 6
 296:	91 e0       	ldi	r25, 0x01	; 1
 298:	29 cf       	rjmp	.-430    	; 0xec <USART0_Transmit_String>
		else if(USART_NUM == 1) USART1_Transmit_String("12");
 29a:	08 95       	ret
 29c:	81 30       	cpi	r24, 0x01	; 1
 29e:	19 f4       	brne	.+6      	; 0x2a6 <USART_Transmit_number+0x154>
 2a0:	86 e0       	ldi	r24, 0x06	; 6
 2a2:	91 e0       	ldi	r25, 0x01	; 1
 2a4:	48 cf       	rjmp	.-368    	; 0x136 <USART1_Transmit_String>
 2a6:	08 95       	ret

000002a8 <showP2toP1>:
	}
}

void showP2toP1 (void){
 2a8:	0f 93       	push	r16
 2aa:	1f 93       	push	r17
 2ac:	cf 93       	push	r28
 2ae:	df 93       	push	r29
	USART0_Transmit_String("P2 Deck : "); // display P2 deck to P1
 2b0:	89 e0       	ldi	r24, 0x09	; 9
 2b2:	91 e0       	ldi	r25, 0x01	; 1
 2b4:	1b df       	rcall	.-458    	; 0xec <USART0_Transmit_String>
	for(int jj=0; jj<p2_card_cnt; jj++){
 2b6:	80 91 e3 01 	lds	r24, 0x01E3	; 0x8001e3 <p2_card_cnt>
 2ba:	88 23       	and	r24, r24
 2bc:	e9 f0       	breq	.+58     	; 0x2f8 <showP2toP1+0x50>
 2be:	c0 e2       	ldi	r28, 0x20	; 32
 2c0:	d2 e0       	ldi	r29, 0x02	; 2
 2c2:	00 e0       	ldi	r16, 0x00	; 0
 2c4:	10 e0       	ldi	r17, 0x00	; 0
		if(p2_deck[jj].opened == 0) USART0_Transmit_String("XX");
 2c6:	8b 81       	ldd	r24, Y+3	; 0x03
 2c8:	81 11       	cpse	r24, r1
 2ca:	04 c0       	rjmp	.+8      	; 0x2d4 <showP2toP1+0x2c>
 2cc:	84 e1       	ldi	r24, 0x14	; 20
 2ce:	91 e0       	ldi	r25, 0x01	; 1
 2d0:	0d df       	rcall	.-486    	; 0xec <USART0_Transmit_String>
 2d2:	06 c0       	rjmp	.+12     	; 0x2e0 <showP2toP1+0x38>
		else{
			USART_Transmit_number(0, p2_deck[jj].color);
 2d4:	68 81       	ld	r22, Y
 2d6:	80 e0       	ldi	r24, 0x00	; 0
 2d8:	3c df       	rcall	.-392    	; 0x152 <USART_Transmit_number>
			USART_Transmit_number(0, p2_deck[jj].number);
 2da:	69 81       	ldd	r22, Y+1	; 0x01
 2dc:	80 e0       	ldi	r24, 0x00	; 0
 2de:	39 df       	rcall	.-398    	; 0x152 <USART_Transmit_number>
		}
		USART0_Transmit_String("   ");
 2e0:	87 e1       	ldi	r24, 0x17	; 23
 2e2:	91 e0       	ldi	r25, 0x01	; 1
 2e4:	03 df       	rcall	.-506    	; 0xec <USART0_Transmit_String>
 2e6:	0f 5f       	subi	r16, 0xFF	; 255
	}
}

void showP2toP1 (void){
	USART0_Transmit_String("P2 Deck : "); // display P2 deck to P1
	for(int jj=0; jj<p2_card_cnt; jj++){
 2e8:	1f 4f       	sbci	r17, 0xFF	; 255
 2ea:	24 96       	adiw	r28, 0x04	; 4
 2ec:	80 91 e3 01 	lds	r24, 0x01E3	; 0x8001e3 <p2_card_cnt>
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	08 17       	cp	r16, r24
 2f4:	19 07       	cpc	r17, r25
 2f6:	3c f3       	brlt	.-50     	; 0x2c6 <showP2toP1+0x1e>
			USART_Transmit_number(0, p2_deck[jj].color);
			USART_Transmit_number(0, p2_deck[jj].number);
		}
		USART0_Transmit_String("   ");
	}
	USART0_Transmit_String("\r\n");
 2f8:	8d e4       	ldi	r24, 0x4D	; 77
 2fa:	91 e0       	ldi	r25, 0x01	; 1
 2fc:	f7 de       	rcall	.-530    	; 0xec <USART0_Transmit_String>
 2fe:	df 91       	pop	r29
}
 300:	cf 91       	pop	r28
 302:	1f 91       	pop	r17
 304:	0f 91       	pop	r16
 306:	08 95       	ret

00000308 <showP1toP2>:
 308:	0f 93       	push	r16

void showP1toP2 (void){
 30a:	1f 93       	push	r17
 30c:	cf 93       	push	r28
 30e:	df 93       	push	r29
	USART1_Transmit_String("P1 Deck : "); // display P1 deck to P2
 310:	8b e1       	ldi	r24, 0x1B	; 27
 312:	91 e0       	ldi	r25, 0x01	; 1
 314:	10 df       	rcall	.-480    	; 0x136 <USART1_Transmit_String>
	for(int jj=0; jj<p1_card_cnt; jj++){
 316:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <p1_card_cnt>
 31a:	88 23       	and	r24, r24
 31c:	e9 f0       	breq	.+58     	; 0x358 <showP1toP2+0x50>
 31e:	c7 ee       	ldi	r28, 0xE7	; 231
 320:	d1 e0       	ldi	r29, 0x01	; 1
 322:	00 e0       	ldi	r16, 0x00	; 0
 324:	10 e0       	ldi	r17, 0x00	; 0
		if(p1_deck[jj].opened == 0) USART1_Transmit_String("XX");
 326:	8b 81       	ldd	r24, Y+3	; 0x03
 328:	81 11       	cpse	r24, r1
 32a:	04 c0       	rjmp	.+8      	; 0x334 <showP1toP2+0x2c>
 32c:	84 e1       	ldi	r24, 0x14	; 20
 32e:	91 e0       	ldi	r25, 0x01	; 1
 330:	02 df       	rcall	.-508    	; 0x136 <USART1_Transmit_String>
 332:	06 c0       	rjmp	.+12     	; 0x340 <showP1toP2+0x38>
		else{
			USART_Transmit_number(1, p1_deck[jj].color);
 334:	68 81       	ld	r22, Y
 336:	81 e0       	ldi	r24, 0x01	; 1
 338:	0c df       	rcall	.-488    	; 0x152 <USART_Transmit_number>
			USART_Transmit_number(1, p1_deck[jj].number);
 33a:	69 81       	ldd	r22, Y+1	; 0x01
 33c:	81 e0       	ldi	r24, 0x01	; 1
 33e:	09 df       	rcall	.-494    	; 0x152 <USART_Transmit_number>
		}
		USART1_Transmit_String("   ");
 340:	87 e1       	ldi	r24, 0x17	; 23
 342:	91 e0       	ldi	r25, 0x01	; 1
 344:	f8 de       	rcall	.-528    	; 0x136 <USART1_Transmit_String>
 346:	0f 5f       	subi	r16, 0xFF	; 255
	USART0_Transmit_String("\r\n");
}

void showP1toP2 (void){
	USART1_Transmit_String("P1 Deck : "); // display P1 deck to P2
	for(int jj=0; jj<p1_card_cnt; jj++){
 348:	1f 4f       	sbci	r17, 0xFF	; 255
 34a:	24 96       	adiw	r28, 0x04	; 4
 34c:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <p1_card_cnt>
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	08 17       	cp	r16, r24
 354:	19 07       	cpc	r17, r25
 356:	3c f3       	brlt	.-50     	; 0x326 <showP1toP2+0x1e>
			USART_Transmit_number(1, p1_deck[jj].color);
			USART_Transmit_number(1, p1_deck[jj].number);
		}
		USART1_Transmit_String("   ");
	}
	USART1_Transmit_String("\r\n");
 358:	8d e4       	ldi	r24, 0x4D	; 77
 35a:	91 e0       	ldi	r25, 0x01	; 1
 35c:	ec de       	rcall	.-552    	; 0x136 <USART1_Transmit_String>
 35e:	df 91       	pop	r29
}
 360:	cf 91       	pop	r28
 362:	1f 91       	pop	r17
 364:	0f 91       	pop	r16
 366:	08 95       	ret

00000368 <USART1_Receive>:
 368:	eb e9       	ldi	r30, 0x9B	; 155
void USART1_Transmit_String(char *str){
	while(*str != '\0') USART1_Transmit(*str++);
}

char USART1_Receive(void){
	while(!(UCSR1A & (1<<RXC1))); // Wait for Receive Buffer is empty
 36a:	f0 e0       	ldi	r31, 0x00	; 0
 36c:	80 81       	ld	r24, Z
 36e:	88 23       	and	r24, r24
 370:	ec f7       	brge	.-6      	; 0x36c <USART1_Receive+0x4>
	return UDR1;
 372:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
}
 376:	08 95       	ret

00000378 <main>:
struct card_deck p1_deck[NUM_CARD/2];
struct card_deck p2_deck[NUM_CARD/2];

int main(void)
{
	USART0_Init(103);
 378:	87 e6       	ldi	r24, 0x67	; 103
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	aa de       	rcall	.-684    	; 0xd2 <USART0_Init>
	USART1_Init(103);
 37e:	87 e6       	ldi	r24, 0x67	; 103
 380:	90 e0       	ldi	r25, 0x00	; 0
	Timer_Init();
 382:	c6 de       	rcall	.-628    	; 0x110 <USART1_Init>
 384:	a1 de       	rcall	.-702    	; 0xc8 <Timer_Init>
 386:	0f 2e       	mov	r0, r31
 388:	f0 e5       	ldi	r31, 0x50	; 80
 38a:	4f 2e       	mov	r4, r31
 38c:	f2 e0       	ldi	r31, 0x02	; 2
 38e:	5f 2e       	mov	r5, r31
 390:	f0 2d       	mov	r31, r0
 392:	f2 01       	movw	r30, r4
	
	for(int i=0;i<NUM_CARD;i++){				// 카드 덱 초기화
 394:	80 e0       	ldi	r24, 0x00	; 0
 396:	90 e0       	ldi	r25, 0x00	; 0
		if(i%2 == 0){
			deck[i].color = 0;
			deck[i].number = i/2;
		}
		else if(i%2 == 1){
			deck[i].color = 1;
 398:	41 e0       	ldi	r20, 0x01	; 1
	USART0_Init(103);
	USART1_Init(103);
	Timer_Init();
	
	for(int i=0;i<NUM_CARD;i++){				// 카드 덱 초기화
		if(i%2 == 0){
 39a:	80 fd       	sbrc	r24, 0
 39c:	0c c0       	rjmp	.+24     	; 0x3b6 <main+0x3e>
 39e:	df 01       	movw	r26, r30
			deck[i].color = 0;
 3a0:	10 82       	st	Z, r1
			deck[i].number = i/2;
 3a2:	9c 01       	movw	r18, r24
 3a4:	99 23       	and	r25, r25
 3a6:	14 f4       	brge	.+4      	; 0x3ac <main+0x34>
 3a8:	2f 5f       	subi	r18, 0xFF	; 255
 3aa:	3f 4f       	sbci	r19, 0xFF	; 255
 3ac:	35 95       	asr	r19
 3ae:	27 95       	ror	r18
 3b0:	11 96       	adiw	r26, 0x01	; 1
 3b2:	2c 93       	st	X, r18
 3b4:	19 c0       	rjmp	.+50     	; 0x3e8 <main+0x70>
		}
		else if(i%2 == 1){
 3b6:	9c 01       	movw	r18, r24
 3b8:	21 70       	andi	r18, 0x01	; 1
 3ba:	30 78       	andi	r19, 0x80	; 128
 3bc:	33 23       	and	r19, r19
 3be:	34 f4       	brge	.+12     	; 0x3cc <main+0x54>
 3c0:	21 50       	subi	r18, 0x01	; 1
 3c2:	31 09       	sbc	r19, r1
 3c4:	2e 6f       	ori	r18, 0xFE	; 254
 3c6:	3f 6f       	ori	r19, 0xFF	; 255
 3c8:	2f 5f       	subi	r18, 0xFF	; 255
 3ca:	3f 4f       	sbci	r19, 0xFF	; 255
 3cc:	21 30       	cpi	r18, 0x01	; 1
 3ce:	31 05       	cpc	r19, r1
 3d0:	59 f4       	brne	.+22     	; 0x3e8 <main+0x70>
 3d2:	df 01       	movw	r26, r30
			deck[i].color = 1;
 3d4:	40 83       	st	Z, r20
			deck[i].number = i/2;
 3d6:	9c 01       	movw	r18, r24
 3d8:	99 23       	and	r25, r25
 3da:	14 f4       	brge	.+4      	; 0x3e0 <main+0x68>
 3dc:	2f 5f       	subi	r18, 0xFF	; 255
 3de:	3f 4f       	sbci	r19, 0xFF	; 255
 3e0:	35 95       	asr	r19
 3e2:	27 95       	ror	r18
 3e4:	11 96       	adiw	r26, 0x01	; 1
 3e6:	2c 93       	st	X, r18
		}
		deck[i].owner = 0;
 3e8:	12 82       	std	Z+2, r1	; 0x02
		deck[i].opened = 0;
 3ea:	13 82       	std	Z+3, r1	; 0x03
{
	USART0_Init(103);
	USART1_Init(103);
	Timer_Init();
	
	for(int i=0;i<NUM_CARD;i++){				// 카드 덱 초기화
 3ec:	01 96       	adiw	r24, 0x01	; 1
 3ee:	34 96       	adiw	r30, 0x04	; 4
 3f0:	88 31       	cpi	r24, 0x18	; 24
 3f2:	91 05       	cpc	r25, r1
 3f4:	91 f6       	brne	.-92     	; 0x39a <main+0x22>
 3f6:	e7 ee       	ldi	r30, 0xE7	; 231
 3f8:	f1 e0       	ldi	r31, 0x01	; 1
 3fa:	8f ef       	ldi	r24, 0xFF	; 255
 3fc:	84 83       	std	Z+4, r24	; 0x04
 3fe:	85 83       	std	Z+5, r24	; 0x05
 400:	17 82       	std	Z+7, r1	; 0x07
 402:	82 e0       	ldi	r24, 0x02	; 2
 404:	86 83       	std	Z+6, r24	; 0x06
				get_number_2[2] = get_number_2[0]*10 + get_number_2[1];
				state = 14;
			}
		} // state 13 end
		if(state == 14){ // state 5
			temp = p1_deck[(int)get_number_1[2]].number;
 406:	0f 2e       	mov	r0, r31
 408:	f8 e1       	ldi	r31, 0x18	; 24
 40a:	ef 2e       	mov	r14, r31
 40c:	f2 e0       	ldi	r31, 0x02	; 2
 40e:	ff 2e       	mov	r15, r31
 410:	f0 2d       	mov	r31, r0
			USART1_Transmit_String("Target Number : ");
			USART_Transmit_number(1, temp);
			USART1_Transmit_String("\r\n");
			if(temp == get_number_2[2]){
 412:	0b e1       	ldi	r16, 0x1B	; 27
 414:	12 e0       	ldi	r17, 0x02	; 2
 416:	0f 2e       	mov	r0, r31
 418:	f0 eb       	ldi	r31, 0xB0	; 176
 41a:	af 2e       	mov	r10, r31
 41c:	f2 e0       	ldi	r31, 0x02	; 2
 41e:	bf 2e       	mov	r11, r31
 420:	f0 2d       	mov	r31, r0
			USART1_Transmit_String("Number? : "); // 카드가 무엇인지
			rx = USART1_Receive();
			USART1_Transmit(rx);
			if((rx >= '0')&&(rx <= '9')){
				get_number_2[0] = rx-48;
				state = 13;
 422:	0f 2e       	mov	r0, r31
 424:	fd e0       	ldi	r31, 0x0D	; 13
 426:	2f 2e       	mov	r2, r31
 428:	31 2c       	mov	r3, r1
 42a:	f0 2d       	mov	r31, r0
				else state = 10;
			}
			else{
				USART1_Transmit_String("Wrong\r\n");
				USART1_Transmit_String("Player 1's Turn\r\n");
				state = 3;
 42c:	0f 2e       	mov	r0, r31
 42e:	f3 e0       	ldi	r31, 0x03	; 3
 430:	cf 2e       	mov	r12, r31
 432:	d1 2c       	mov	r13, r1
 434:	f0 2d       	mov	r31, r0
					}
				}
				showP1toP2();
				p1_opened_cnt++;
				if(p1_card_cnt == p1_opened_cnt) state = 30;
				else state = 10;
 436:	0f 2e       	mov	r0, r31
 438:	fa e0       	ldi	r31, 0x0A	; 10
 43a:	6f 2e       	mov	r6, r31
 43c:	71 2c       	mov	r7, r1
 43e:	f0 2d       	mov	r31, r0
			state = 3;
		} // state 2 end
		if(state == 3){ // state : give 1 card to player 1
			temp = p1_card_cnt + 1;
			while(p1_card_cnt < temp){
				random_value = TCNT0%NUM_CARD;
 440:	0f 2e       	mov	r0, r31
 442:	fb ea       	ldi	r31, 0xAB	; 171
 444:	8f 2e       	mov	r8, r31
 446:	f0 2d       	mov	r31, r0
 448:	0f 2e       	mov	r0, r31
 44a:	f8 e1       	ldi	r31, 0x18	; 24
 44c:	9f 2e       	mov	r9, r31
 44e:	f0 2d       	mov	r31, r0
		p1_deck[1].owner = 2;
		p1_deck[1].opened = 0;
	}
    while (1) 
    {
		if(state == 0){ // state 0 : checking player 1 connected
 450:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <state>
 454:	90 91 e6 01 	lds	r25, 0x01E6	; 0x8001e6 <state+0x1>
 458:	89 2b       	or	r24, r25
			USART0_Transmit_String("Press Y to Start\r\n");
 45a:	91 f4       	brne	.+36     	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
 45c:	86 e2       	ldi	r24, 0x26	; 38
 45e:	91 e0       	ldi	r25, 0x01	; 1
			USART1_Transmit_String("Waiting for Player 1\r\n");
 460:	45 de       	rcall	.-886    	; 0xec <USART0_Transmit_String>
 462:	89 e3       	ldi	r24, 0x39	; 57
 464:	91 e0       	ldi	r25, 0x01	; 1
 466:	67 de       	rcall	.-818    	; 0x136 <USART1_Transmit_String>
			rx = USART0_Receive();
 468:	4f de       	rcall	.-866    	; 0x108 <USART0_Receive>
 46a:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <rx>
 46e:	89 35       	cpi	r24, 0x59	; 89
			if(rx == 'Y') state = 1;
 470:	39 f4       	brne	.+14     	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
 472:	81 e0       	ldi	r24, 0x01	; 1
 474:	90 e0       	ldi	r25, 0x00	; 0
 476:	90 93 e6 01 	sts	0x01E6, r25	; 0x8001e6 <state+0x1>
 47a:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <state>
 47e:	06 c0       	rjmp	.+12     	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
 480:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <state>
		} // state 0 end
		if(state == 1){ // state 1 : checking player 1 connected
 484:	90 91 e6 01 	lds	r25, 0x01E6	; 0x8001e6 <state+0x1>
 488:	01 97       	sbiw	r24, 0x01	; 1
 48a:	91 f4       	brne	.+36     	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
			USART0_Transmit_String("Waiting for Player 2\r\n");
 48c:	80 e5       	ldi	r24, 0x50	; 80
 48e:	91 e0       	ldi	r25, 0x01	; 1
 490:	2d de       	rcall	.-934    	; 0xec <USART0_Transmit_String>
			USART1_Transmit_String("Press Y to Start\r\n");
 492:	86 e2       	ldi	r24, 0x26	; 38
 494:	91 e0       	ldi	r25, 0x01	; 1
 496:	4f de       	rcall	.-866    	; 0x136 <USART1_Transmit_String>
 498:	67 df       	rcall	.-306    	; 0x368 <USART1_Receive>
			rx = USART1_Receive();
 49a:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <rx>
 49e:	89 35       	cpi	r24, 0x59	; 89
 4a0:	39 f4       	brne	.+14     	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
			if(rx == 'Y') state = 2;
 4a2:	82 e0       	ldi	r24, 0x02	; 2
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	90 93 e6 01 	sts	0x01E6, r25	; 0x8001e6 <state+0x1>
 4aa:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <state>
 4ae:	08 c0       	rjmp	.+16     	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
 4b0:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <state>
		} // state 1 end
		if(state == 2){ // state 2 : give card to players
 4b4:	90 91 e6 01 	lds	r25, 0x01E6	; 0x8001e6 <state+0x1>
 4b8:	82 30       	cpi	r24, 0x02	; 2
 4ba:	91 05       	cpc	r25, r1
 4bc:	09 f0       	breq	.+2      	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
 4be:	c7 c0       	rjmp	.+398    	; 0x64e <__LOCK_REGION_LENGTH__+0x24e>
 4c0:	31 e0       	ldi	r19, 0x01	; 1
 4c2:	22 c0       	rjmp	.+68     	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
			while(p1_card_cnt < 4){	// give Player 1 Cards
				random_value = TCNT0%NUM_CARD;
				if(deck[random_value].owner == 0){
					deck[random_value].owner = 1;
 4c4:	92 b7       	in	r25, 0x32	; 50
 4c6:	98 9d       	mul	r25, r8
			rx = USART1_Receive();
			if(rx == 'Y') state = 2;
		} // state 1 end
		if(state == 2){ // state 2 : give card to players
			while(p1_card_cnt < 4){	// give Player 1 Cards
				random_value = TCNT0%NUM_CARD;
 4c8:	81 2d       	mov	r24, r1
 4ca:	11 24       	eor	r1, r1
 4cc:	82 95       	swap	r24
 4ce:	8f 70       	andi	r24, 0x0F	; 15
 4d0:	89 9d       	mul	r24, r9
 4d2:	90 19       	sub	r25, r0
 4d4:	11 24       	eor	r1, r1
 4d6:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <random_value>
 4da:	89 2f       	mov	r24, r25
 4dc:	90 e0       	ldi	r25, 0x00	; 0
				if(deck[random_value].owner == 0){
 4de:	fc 01       	movw	r30, r24
 4e0:	ee 0f       	add	r30, r30
 4e2:	ff 1f       	adc	r31, r31
 4e4:	ee 0f       	add	r30, r30
 4e6:	ff 1f       	adc	r31, r31
 4e8:	e0 5b       	subi	r30, 0xB0	; 176
 4ea:	fd 4f       	sbci	r31, 0xFD	; 253
 4ec:	42 81       	ldd	r20, Z+2	; 0x02
 4ee:	41 11       	cpse	r20, r1
 4f0:	0d c0       	rjmp	.+26     	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
 4f2:	88 0f       	add	r24, r24
 4f4:	99 1f       	adc	r25, r25
					deck[random_value].owner = 1;
 4f6:	88 0f       	add	r24, r24
 4f8:	99 1f       	adc	r25, r25
 4fa:	fc 01       	movw	r30, r24
 4fc:	e0 5b       	subi	r30, 0xB0	; 176
 4fe:	fd 4f       	sbci	r31, 0xFD	; 253
 500:	32 83       	std	Z+2, r19	; 0x02
 502:	2f 5f       	subi	r18, 0xFF	; 255
 504:	20 93 e4 01 	sts	0x01E4, r18	; 0x8001e4 <p1_card_cnt>
					p1_card_cnt++;
 508:	20 91 e4 01 	lds	r18, 0x01E4	; 0x8001e4 <p1_card_cnt>
			USART1_Transmit_String("Press Y to Start\r\n");
			rx = USART1_Receive();
			if(rx == 'Y') state = 2;
		} // state 1 end
		if(state == 2){ // state 2 : give card to players
			while(p1_card_cnt < 4){	// give Player 1 Cards
 50c:	24 30       	cpi	r18, 0x04	; 4
 50e:	d0 f2       	brcs	.-76     	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
 510:	32 e0       	ldi	r19, 0x02	; 2
 512:	22 c0       	rjmp	.+68     	; 0x558 <__LOCK_REGION_LENGTH__+0x158>
				}
			}
			while(p2_card_cnt < 4){	// give Player 2 Cards
				random_value = TCNT0%NUM_CARD;
				if(deck[random_value].owner == 0){
					deck[random_value].owner = 2;
 514:	92 b7       	in	r25, 0x32	; 50
 516:	98 9d       	mul	r25, r8
					deck[random_value].owner = 1;
					p1_card_cnt++;
				}
			}
			while(p2_card_cnt < 4){	// give Player 2 Cards
				random_value = TCNT0%NUM_CARD;
 518:	81 2d       	mov	r24, r1
 51a:	11 24       	eor	r1, r1
 51c:	82 95       	swap	r24
 51e:	8f 70       	andi	r24, 0x0F	; 15
 520:	89 9d       	mul	r24, r9
 522:	90 19       	sub	r25, r0
 524:	11 24       	eor	r1, r1
 526:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <random_value>
 52a:	89 2f       	mov	r24, r25
 52c:	90 e0       	ldi	r25, 0x00	; 0
				if(deck[random_value].owner == 0){
 52e:	fc 01       	movw	r30, r24
 530:	ee 0f       	add	r30, r30
 532:	ff 1f       	adc	r31, r31
 534:	ee 0f       	add	r30, r30
 536:	ff 1f       	adc	r31, r31
 538:	e0 5b       	subi	r30, 0xB0	; 176
 53a:	fd 4f       	sbci	r31, 0xFD	; 253
 53c:	42 81       	ldd	r20, Z+2	; 0x02
 53e:	41 11       	cpse	r20, r1
 540:	0d c0       	rjmp	.+26     	; 0x55c <__LOCK_REGION_LENGTH__+0x15c>
 542:	88 0f       	add	r24, r24
 544:	99 1f       	adc	r25, r25
					deck[random_value].owner = 2;
 546:	88 0f       	add	r24, r24
 548:	99 1f       	adc	r25, r25
 54a:	fc 01       	movw	r30, r24
 54c:	e0 5b       	subi	r30, 0xB0	; 176
 54e:	fd 4f       	sbci	r31, 0xFD	; 253
 550:	32 83       	std	Z+2, r19	; 0x02
 552:	2f 5f       	subi	r18, 0xFF	; 255
 554:	20 93 e3 01 	sts	0x01E3, r18	; 0x8001e3 <p2_card_cnt>
					p2_card_cnt++;
 558:	20 91 e3 01 	lds	r18, 0x01E3	; 0x8001e3 <p2_card_cnt>
				if(deck[random_value].owner == 0){
					deck[random_value].owner = 1;
					p1_card_cnt++;
				}
			}
			while(p2_card_cnt < 4){	// give Player 2 Cards
 55c:	24 30       	cpi	r18, 0x04	; 4
 55e:	d0 f2       	brcs	.-76     	; 0x514 <__LOCK_REGION_LENGTH__+0x114>
 560:	10 92 e0 01 	sts	0x01E0, r1	; 0x8001e0 <__data_end>
				if(deck[random_value].owner == 0){
					deck[random_value].owner = 2;
					p2_card_cnt++;
				}
			}
			temp = 0;
 564:	8b e1       	ldi	r24, 0x1B	; 27
			USART0_Transmit_String("P1 Deck : "); // display P1 deck to P1
 566:	91 e0       	ldi	r25, 0x01	; 1
 568:	c1 dd       	rcall	.-1150   	; 0xec <USART0_Transmit_String>
 56a:	e2 01       	movw	r28, r4
 56c:	8a 81       	ldd	r24, Y+2	; 0x02
 56e:	81 30       	cpi	r24, 0x01	; 1
			for(int i=0; i<NUM_CARD; i++){
				if(deck[i].owner == 1){
 570:	41 f5       	brne	.+80     	; 0x5c2 <__LOCK_REGION_LENGTH__+0x1c2>
 572:	e0 91 e0 01 	lds	r30, 0x01E0	; 0x8001e0 <__data_end>
					p1_deck[temp] = deck[i];
 576:	f0 e0       	ldi	r31, 0x00	; 0
 578:	ee 0f       	add	r30, r30
 57a:	ff 1f       	adc	r31, r31
 57c:	ee 0f       	add	r30, r30
 57e:	ff 1f       	adc	r31, r31
 580:	e9 51       	subi	r30, 0x19	; 25
 582:	fe 4f       	sbci	r31, 0xFE	; 254
 584:	88 81       	ld	r24, Y
 586:	39 81       	ldd	r19, Y+1	; 0x01
 588:	2a 81       	ldd	r18, Y+2	; 0x02
 58a:	9b 81       	ldd	r25, Y+3	; 0x03
 58c:	68 2f       	mov	r22, r24
 58e:	80 83       	st	Z, r24
 590:	31 83       	std	Z+1, r19	; 0x01
 592:	22 83       	std	Z+2, r18	; 0x02
 594:	93 83       	std	Z+3, r25	; 0x03
 596:	80 e0       	ldi	r24, 0x00	; 0
					USART_Transmit_number(0, p1_deck[temp].color);
 598:	dc dd       	rcall	.-1096   	; 0x152 <USART_Transmit_number>
 59a:	e0 91 e0 01 	lds	r30, 0x01E0	; 0x8001e0 <__data_end>
					USART_Transmit_number(0, p1_deck[temp].number); 
 59e:	f0 e0       	ldi	r31, 0x00	; 0
 5a0:	ee 0f       	add	r30, r30
 5a2:	ff 1f       	adc	r31, r31
 5a4:	ee 0f       	add	r30, r30
 5a6:	ff 1f       	adc	r31, r31
 5a8:	e9 51       	subi	r30, 0x19	; 25
 5aa:	fe 4f       	sbci	r31, 0xFE	; 254
 5ac:	61 81       	ldd	r22, Z+1	; 0x01
 5ae:	80 e0       	ldi	r24, 0x00	; 0
 5b0:	d0 dd       	rcall	.-1120   	; 0x152 <USART_Transmit_number>
 5b2:	87 e1       	ldi	r24, 0x17	; 23
					USART0_Transmit_String("   ");
 5b4:	91 e0       	ldi	r25, 0x01	; 1
 5b6:	9a dd       	rcall	.-1228   	; 0xec <USART0_Transmit_String>
 5b8:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <__data_end>
					temp++;
 5bc:	8f 5f       	subi	r24, 0xFF	; 255
 5be:	80 93 e0 01 	sts	0x01E0, r24	; 0x8001e0 <__data_end>
 5c2:	24 96       	adiw	r28, 0x04	; 4
					p2_card_cnt++;
				}
			}
			temp = 0;
			USART0_Transmit_String("P1 Deck : "); // display P1 deck to P1
			for(int i=0; i<NUM_CARD; i++){
 5c4:	ca 15       	cp	r28, r10
 5c6:	db 05       	cpc	r29, r11
 5c8:	89 f6       	brne	.-94     	; 0x56c <__LOCK_REGION_LENGTH__+0x16c>
					USART_Transmit_number(0, p1_deck[temp].number); 
					USART0_Transmit_String("   ");
					temp++;
				}
			}
			USART0_Transmit_String("\r\n");
 5ca:	8d e4       	ldi	r24, 0x4D	; 77
 5cc:	91 e0       	ldi	r25, 0x01	; 1
 5ce:	8e dd       	rcall	.-1252   	; 0xec <USART0_Transmit_String>
 5d0:	10 92 e0 01 	sts	0x01E0, r1	; 0x8001e0 <__data_end>
			temp = 0;
 5d4:	89 e0       	ldi	r24, 0x09	; 9
			USART1_Transmit_String("P2 Deck : "); // display P2 deck to P2
 5d6:	91 e0       	ldi	r25, 0x01	; 1
 5d8:	ae dd       	rcall	.-1188   	; 0x136 <USART1_Transmit_String>
 5da:	e2 01       	movw	r28, r4
 5dc:	8a 81       	ldd	r24, Y+2	; 0x02
 5de:	82 30       	cpi	r24, 0x02	; 2
			for(int i=0; i<NUM_CARD; i++){
				if(deck[i].owner == 2){
 5e0:	41 f5       	brne	.+80     	; 0x632 <__LOCK_REGION_LENGTH__+0x232>
 5e2:	e0 91 e0 01 	lds	r30, 0x01E0	; 0x8001e0 <__data_end>
					p2_deck[temp] = deck[i];
 5e6:	f0 e0       	ldi	r31, 0x00	; 0
 5e8:	ee 0f       	add	r30, r30
 5ea:	ff 1f       	adc	r31, r31
 5ec:	ee 0f       	add	r30, r30
 5ee:	ff 1f       	adc	r31, r31
 5f0:	e0 5e       	subi	r30, 0xE0	; 224
 5f2:	fd 4f       	sbci	r31, 0xFD	; 253
 5f4:	88 81       	ld	r24, Y
 5f6:	39 81       	ldd	r19, Y+1	; 0x01
 5f8:	2a 81       	ldd	r18, Y+2	; 0x02
 5fa:	9b 81       	ldd	r25, Y+3	; 0x03
 5fc:	68 2f       	mov	r22, r24
 5fe:	80 83       	st	Z, r24
 600:	31 83       	std	Z+1, r19	; 0x01
 602:	22 83       	std	Z+2, r18	; 0x02
 604:	93 83       	std	Z+3, r25	; 0x03
					USART_Transmit_number(1, p2_deck[temp].color);
 606:	81 e0       	ldi	r24, 0x01	; 1
 608:	a4 dd       	rcall	.-1208   	; 0x152 <USART_Transmit_number>
					USART_Transmit_number(1, p2_deck[temp].number); 
 60a:	e0 91 e0 01 	lds	r30, 0x01E0	; 0x8001e0 <__data_end>
 60e:	f0 e0       	ldi	r31, 0x00	; 0
 610:	ee 0f       	add	r30, r30
 612:	ff 1f       	adc	r31, r31
 614:	ee 0f       	add	r30, r30
 616:	ff 1f       	adc	r31, r31
 618:	e0 5e       	subi	r30, 0xE0	; 224
 61a:	fd 4f       	sbci	r31, 0xFD	; 253
 61c:	61 81       	ldd	r22, Z+1	; 0x01
 61e:	81 e0       	ldi	r24, 0x01	; 1
					USART1_Transmit_String("   ");
 620:	98 dd       	rcall	.-1232   	; 0x152 <USART_Transmit_number>
 622:	87 e1       	ldi	r24, 0x17	; 23
 624:	91 e0       	ldi	r25, 0x01	; 1
 626:	87 dd       	rcall	.-1266   	; 0x136 <USART1_Transmit_String>
					temp++;
 628:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <__data_end>
 62c:	8f 5f       	subi	r24, 0xFF	; 255
 62e:	80 93 e0 01 	sts	0x01E0, r24	; 0x8001e0 <__data_end>
 632:	24 96       	adiw	r28, 0x04	; 4
				}
			}
			USART0_Transmit_String("\r\n");
			temp = 0;
			USART1_Transmit_String("P2 Deck : "); // display P2 deck to P2
			for(int i=0; i<NUM_CARD; i++){
 634:	ca 15       	cp	r28, r10
 636:	db 05       	cpc	r29, r11
 638:	89 f6       	brne	.-94     	; 0x5dc <__LOCK_REGION_LENGTH__+0x1dc>
					USART_Transmit_number(1, p2_deck[temp].number); 
					USART1_Transmit_String("   ");
					temp++;
				}
			}
			USART1_Transmit_String("\r\n");
 63a:	8d e4       	ldi	r24, 0x4D	; 77
 63c:	91 e0       	ldi	r25, 0x01	; 1
 63e:	7b dd       	rcall	.-1290   	; 0x136 <USART1_Transmit_String>
 640:	33 de       	rcall	.-922    	; 0x2a8 <showP2toP1>
			showP2toP1();
 642:	62 de       	rcall	.-828    	; 0x308 <showP1toP2>
 644:	d0 92 e6 01 	sts	0x01E6, r13	; 0x8001e6 <state+0x1>
			showP1toP2();				
 648:	c0 92 e5 01 	sts	0x01E5, r12	; 0x8001e5 <state>
			state = 3;
 64c:	04 c0       	rjmp	.+8      	; 0x656 <__LOCK_REGION_LENGTH__+0x256>
 64e:	83 30       	cpi	r24, 0x03	; 3
 650:	91 05       	cpc	r25, r1
 652:	09 f0       	breq	.+2      	; 0x656 <__LOCK_REGION_LENGTH__+0x256>
		} // state 2 end
		if(state == 3){ // state : give 1 card to player 1
 654:	6d c0       	rjmp	.+218    	; 0x730 <__LOCK_REGION_LENGTH__+0x330>
 656:	30 91 e4 01 	lds	r19, 0x01E4	; 0x8001e4 <p1_card_cnt>
 65a:	3f 5f       	subi	r19, 0xFF	; 255
			temp = p1_card_cnt + 1;
 65c:	30 93 e0 01 	sts	0x01E0, r19	; 0x8001e0 <__data_end>
 660:	41 e0       	ldi	r20, 0x01	; 1
 662:	22 c0       	rjmp	.+68     	; 0x6a8 <__LOCK_REGION_LENGTH__+0x2a8>
 664:	92 b7       	in	r25, 0x32	; 50
			while(p1_card_cnt < temp){
				random_value = TCNT0%NUM_CARD;
				if(deck[random_value].owner == 0){
					deck[random_value].owner = 1;
 666:	98 9d       	mul	r25, r8
			showP1toP2();				
			state = 3;
		} // state 2 end
		if(state == 3){ // state : give 1 card to player 1
			temp = p1_card_cnt + 1;
			while(p1_card_cnt < temp){
 668:	81 2d       	mov	r24, r1
				random_value = TCNT0%NUM_CARD;
 66a:	11 24       	eor	r1, r1
 66c:	82 95       	swap	r24
 66e:	8f 70       	andi	r24, 0x0F	; 15
 670:	89 9d       	mul	r24, r9
 672:	90 19       	sub	r25, r0
 674:	11 24       	eor	r1, r1
 676:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <random_value>
 67a:	89 2f       	mov	r24, r25
 67c:	90 e0       	ldi	r25, 0x00	; 0
 67e:	fc 01       	movw	r30, r24
				if(deck[random_value].owner == 0){
 680:	ee 0f       	add	r30, r30
 682:	ff 1f       	adc	r31, r31
 684:	ee 0f       	add	r30, r30
 686:	ff 1f       	adc	r31, r31
 688:	e0 5b       	subi	r30, 0xB0	; 176
 68a:	fd 4f       	sbci	r31, 0xFD	; 253
 68c:	52 81       	ldd	r21, Z+2	; 0x02
 68e:	51 11       	cpse	r21, r1
 690:	0d c0       	rjmp	.+26     	; 0x6ac <__LOCK_REGION_LENGTH__+0x2ac>
 692:	88 0f       	add	r24, r24
 694:	99 1f       	adc	r25, r25
					deck[random_value].owner = 1;
 696:	88 0f       	add	r24, r24
 698:	99 1f       	adc	r25, r25
 69a:	fc 01       	movw	r30, r24
 69c:	e0 5b       	subi	r30, 0xB0	; 176
 69e:	fd 4f       	sbci	r31, 0xFD	; 253
 6a0:	42 83       	std	Z+2, r20	; 0x02
 6a2:	2f 5f       	subi	r18, 0xFF	; 255
 6a4:	20 93 e4 01 	sts	0x01E4, r18	; 0x8001e4 <p1_card_cnt>
					p1_card_cnt++;
 6a8:	20 91 e4 01 	lds	r18, 0x01E4	; 0x8001e4 <p1_card_cnt>
			showP1toP2();				
			state = 3;
		} // state 2 end
		if(state == 3){ // state : give 1 card to player 1
			temp = p1_card_cnt + 1;
			while(p1_card_cnt < temp){
 6ac:	23 17       	cp	r18, r19
 6ae:	d0 f2       	brcs	.-76     	; 0x664 <__LOCK_REGION_LENGTH__+0x264>
 6b0:	10 92 e0 01 	sts	0x01E0, r1	; 0x8001e0 <__data_end>
				if(deck[random_value].owner == 0){
					deck[random_value].owner = 1;
					p1_card_cnt++;
				}
			}
			temp = 0;
 6b4:	8b e1       	ldi	r24, 0x1B	; 27
 6b6:	91 e0       	ldi	r25, 0x01	; 1
			USART0_Transmit_String("P1 Deck : ");
 6b8:	19 dd       	rcall	.-1486   	; 0xec <USART0_Transmit_String>
 6ba:	e2 01       	movw	r28, r4
 6bc:	8a 81       	ldd	r24, Y+2	; 0x02
 6be:	81 30       	cpi	r24, 0x01	; 1
 6c0:	41 f5       	brne	.+80     	; 0x712 <__LOCK_REGION_LENGTH__+0x312>
			for(int i=0; i<NUM_CARD; i++){
				if(deck[i].owner == 1){
 6c2:	e0 91 e0 01 	lds	r30, 0x01E0	; 0x8001e0 <__data_end>
					p1_deck[temp] = deck[i];
 6c6:	f0 e0       	ldi	r31, 0x00	; 0
 6c8:	ee 0f       	add	r30, r30
 6ca:	ff 1f       	adc	r31, r31
 6cc:	ee 0f       	add	r30, r30
 6ce:	ff 1f       	adc	r31, r31
 6d0:	e9 51       	subi	r30, 0x19	; 25
 6d2:	fe 4f       	sbci	r31, 0xFE	; 254
 6d4:	88 81       	ld	r24, Y
 6d6:	39 81       	ldd	r19, Y+1	; 0x01
 6d8:	2a 81       	ldd	r18, Y+2	; 0x02
 6da:	9b 81       	ldd	r25, Y+3	; 0x03
 6dc:	68 2f       	mov	r22, r24
 6de:	80 83       	st	Z, r24
 6e0:	31 83       	std	Z+1, r19	; 0x01
 6e2:	22 83       	std	Z+2, r18	; 0x02
 6e4:	93 83       	std	Z+3, r25	; 0x03
					USART_Transmit_number(0, p1_deck[temp].color);
 6e6:	80 e0       	ldi	r24, 0x00	; 0
 6e8:	34 dd       	rcall	.-1432   	; 0x152 <USART_Transmit_number>
 6ea:	e0 91 e0 01 	lds	r30, 0x01E0	; 0x8001e0 <__data_end>
					USART_Transmit_number(0, p1_deck[temp].number);
 6ee:	f0 e0       	ldi	r31, 0x00	; 0
 6f0:	ee 0f       	add	r30, r30
 6f2:	ff 1f       	adc	r31, r31
 6f4:	ee 0f       	add	r30, r30
 6f6:	ff 1f       	adc	r31, r31
 6f8:	e9 51       	subi	r30, 0x19	; 25
 6fa:	fe 4f       	sbci	r31, 0xFE	; 254
 6fc:	61 81       	ldd	r22, Z+1	; 0x01
 6fe:	80 e0       	ldi	r24, 0x00	; 0
 700:	28 dd       	rcall	.-1456   	; 0x152 <USART_Transmit_number>
					USART0_Transmit_String("   ");
 702:	87 e1       	ldi	r24, 0x17	; 23
 704:	91 e0       	ldi	r25, 0x01	; 1
 706:	f2 dc       	rcall	.-1564   	; 0xec <USART0_Transmit_String>
 708:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <__data_end>
					temp++;
 70c:	8f 5f       	subi	r24, 0xFF	; 255
 70e:	80 93 e0 01 	sts	0x01E0, r24	; 0x8001e0 <__data_end>
 712:	24 96       	adiw	r28, 0x04	; 4
 714:	ca 15       	cp	r28, r10
					p1_card_cnt++;
				}
			}
			temp = 0;
			USART0_Transmit_String("P1 Deck : ");
			for(int i=0; i<NUM_CARD; i++){
 716:	db 05       	cpc	r29, r11
 718:	89 f6       	brne	.-94     	; 0x6bc <__LOCK_REGION_LENGTH__+0x2bc>
 71a:	8d e4       	ldi	r24, 0x4D	; 77
					USART_Transmit_number(0, p1_deck[temp].number);
					USART0_Transmit_String("   ");
					temp++;
				}
			}
			USART0_Transmit_String("\r\n");
 71c:	91 e0       	ldi	r25, 0x01	; 1
 71e:	e6 dc       	rcall	.-1588   	; 0xec <USART0_Transmit_String>
 720:	c3 dd       	rcall	.-1146   	; 0x2a8 <showP2toP1>
 722:	85 e0       	ldi	r24, 0x05	; 5
			showP2toP1();
 724:	90 e0       	ldi	r25, 0x00	; 0
 726:	90 93 e6 01 	sts	0x01E6, r25	; 0x8001e6 <state+0x1>
			state = 5;
 72a:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <state>
 72e:	74 c0       	rjmp	.+232    	; 0x818 <__LOCK_REGION_LENGTH__+0x418>
 730:	04 97       	sbiw	r24, 0x04	; 4
 732:	09 f0       	breq	.+2      	; 0x736 <__LOCK_REGION_LENGTH__+0x336>
 734:	6b c0       	rjmp	.+214    	; 0x80c <__LOCK_REGION_LENGTH__+0x40c>
		}
		
		if(state == 4){ // state : give 1 card to player 2
 736:	30 91 e3 01 	lds	r19, 0x01E3	; 0x8001e3 <p2_card_cnt>
 73a:	3f 5f       	subi	r19, 0xFF	; 255
			temp = p2_card_cnt + 1;
 73c:	30 93 e0 01 	sts	0x01E0, r19	; 0x8001e0 <__data_end>
 740:	42 e0       	ldi	r20, 0x02	; 2
 742:	22 c0       	rjmp	.+68     	; 0x788 <__LOCK_REGION_LENGTH__+0x388>
 744:	92 b7       	in	r25, 0x32	; 50
			while(p2_card_cnt < temp){
				random_value = TCNT0%NUM_CARD;
				if(deck[random_value].owner == 0){
					deck[random_value].owner = 2;
 746:	98 9d       	mul	r25, r8
			state = 5;
		}
		
		if(state == 4){ // state : give 1 card to player 2
			temp = p2_card_cnt + 1;
			while(p2_card_cnt < temp){
 748:	81 2d       	mov	r24, r1
				random_value = TCNT0%NUM_CARD;
 74a:	11 24       	eor	r1, r1
 74c:	82 95       	swap	r24
 74e:	8f 70       	andi	r24, 0x0F	; 15
 750:	89 9d       	mul	r24, r9
 752:	90 19       	sub	r25, r0
 754:	11 24       	eor	r1, r1
 756:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <random_value>
 75a:	89 2f       	mov	r24, r25
 75c:	90 e0       	ldi	r25, 0x00	; 0
 75e:	fc 01       	movw	r30, r24
				if(deck[random_value].owner == 0){
 760:	ee 0f       	add	r30, r30
 762:	ff 1f       	adc	r31, r31
 764:	ee 0f       	add	r30, r30
 766:	ff 1f       	adc	r31, r31
 768:	e0 5b       	subi	r30, 0xB0	; 176
 76a:	fd 4f       	sbci	r31, 0xFD	; 253
 76c:	52 81       	ldd	r21, Z+2	; 0x02
 76e:	51 11       	cpse	r21, r1
 770:	0d c0       	rjmp	.+26     	; 0x78c <__LOCK_REGION_LENGTH__+0x38c>
 772:	88 0f       	add	r24, r24
 774:	99 1f       	adc	r25, r25
					deck[random_value].owner = 2;
 776:	88 0f       	add	r24, r24
 778:	99 1f       	adc	r25, r25
 77a:	fc 01       	movw	r30, r24
 77c:	e0 5b       	subi	r30, 0xB0	; 176
 77e:	fd 4f       	sbci	r31, 0xFD	; 253
 780:	42 83       	std	Z+2, r20	; 0x02
 782:	2f 5f       	subi	r18, 0xFF	; 255
 784:	20 93 e3 01 	sts	0x01E3, r18	; 0x8001e3 <p2_card_cnt>
					p2_card_cnt++;
 788:	20 91 e3 01 	lds	r18, 0x01E3	; 0x8001e3 <p2_card_cnt>
			state = 5;
		}
		
		if(state == 4){ // state : give 1 card to player 2
			temp = p2_card_cnt + 1;
			while(p2_card_cnt < temp){
 78c:	23 17       	cp	r18, r19
 78e:	d0 f2       	brcs	.-76     	; 0x744 <__LOCK_REGION_LENGTH__+0x344>
 790:	10 92 e0 01 	sts	0x01E0, r1	; 0x8001e0 <__data_end>
				if(deck[random_value].owner == 0){
					deck[random_value].owner = 2;
					p2_card_cnt++;
				}
			}
			temp = 0;
 794:	89 e0       	ldi	r24, 0x09	; 9
			USART1_Transmit_String("P2 Deck : ");
 796:	91 e0       	ldi	r25, 0x01	; 1
 798:	ce dc       	rcall	.-1636   	; 0x136 <USART1_Transmit_String>
 79a:	e2 01       	movw	r28, r4
 79c:	8a 81       	ldd	r24, Y+2	; 0x02
 79e:	82 30       	cpi	r24, 0x02	; 2
			for(int i=0; i<NUM_CARD; i++){
				if(deck[i].owner == 2){
 7a0:	41 f5       	brne	.+80     	; 0x7f2 <__LOCK_REGION_LENGTH__+0x3f2>
 7a2:	e0 91 e0 01 	lds	r30, 0x01E0	; 0x8001e0 <__data_end>
					p2_deck[temp] = deck[i];
 7a6:	f0 e0       	ldi	r31, 0x00	; 0
 7a8:	ee 0f       	add	r30, r30
 7aa:	ff 1f       	adc	r31, r31
 7ac:	ee 0f       	add	r30, r30
 7ae:	ff 1f       	adc	r31, r31
 7b0:	e0 5e       	subi	r30, 0xE0	; 224
 7b2:	fd 4f       	sbci	r31, 0xFD	; 253
 7b4:	88 81       	ld	r24, Y
 7b6:	39 81       	ldd	r19, Y+1	; 0x01
 7b8:	2a 81       	ldd	r18, Y+2	; 0x02
 7ba:	9b 81       	ldd	r25, Y+3	; 0x03
 7bc:	68 2f       	mov	r22, r24
 7be:	80 83       	st	Z, r24
 7c0:	31 83       	std	Z+1, r19	; 0x01
 7c2:	22 83       	std	Z+2, r18	; 0x02
 7c4:	93 83       	std	Z+3, r25	; 0x03
					USART_Transmit_number(1, p2_deck[temp].color);
 7c6:	81 e0       	ldi	r24, 0x01	; 1
					USART_Transmit_number(1, p2_deck[temp].number);
 7c8:	c4 dc       	rcall	.-1656   	; 0x152 <USART_Transmit_number>
 7ca:	e0 91 e0 01 	lds	r30, 0x01E0	; 0x8001e0 <__data_end>
 7ce:	f0 e0       	ldi	r31, 0x00	; 0
 7d0:	ee 0f       	add	r30, r30
 7d2:	ff 1f       	adc	r31, r31
 7d4:	ee 0f       	add	r30, r30
 7d6:	ff 1f       	adc	r31, r31
 7d8:	e0 5e       	subi	r30, 0xE0	; 224
 7da:	fd 4f       	sbci	r31, 0xFD	; 253
 7dc:	61 81       	ldd	r22, Z+1	; 0x01
 7de:	81 e0       	ldi	r24, 0x01	; 1
 7e0:	b8 dc       	rcall	.-1680   	; 0x152 <USART_Transmit_number>
					USART1_Transmit_String("   ");
 7e2:	87 e1       	ldi	r24, 0x17	; 23
 7e4:	91 e0       	ldi	r25, 0x01	; 1
 7e6:	a7 dc       	rcall	.-1714   	; 0x136 <USART1_Transmit_String>
 7e8:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <__data_end>
					temp++;
 7ec:	8f 5f       	subi	r24, 0xFF	; 255
 7ee:	80 93 e0 01 	sts	0x01E0, r24	; 0x8001e0 <__data_end>
					p2_card_cnt++;
				}
			}
			temp = 0;
			USART1_Transmit_String("P2 Deck : ");
			for(int i=0; i<NUM_CARD; i++){
 7f2:	24 96       	adiw	r28, 0x04	; 4
 7f4:	ca 15       	cp	r28, r10
 7f6:	db 05       	cpc	r29, r11
					USART_Transmit_number(1, p2_deck[temp].number);
					USART1_Transmit_String("   ");
					temp++;
				}
			}
			USART1_Transmit_String("\r\n");
 7f8:	89 f6       	brne	.-94     	; 0x79c <__LOCK_REGION_LENGTH__+0x39c>
 7fa:	8d e4       	ldi	r24, 0x4D	; 77
 7fc:	91 e0       	ldi	r25, 0x01	; 1
 7fe:	9b dc       	rcall	.-1738   	; 0x136 <USART1_Transmit_String>
			showP1toP2();
 800:	83 dd       	rcall	.-1274   	; 0x308 <showP1toP2>
 802:	70 92 e6 01 	sts	0x01E6, r7	; 0x8001e6 <state+0x1>
			state = 10;
 806:	60 92 e5 01 	sts	0x01E5, r6	; 0x8001e5 <state>
 80a:	4b c0       	rjmp	.+150    	; 0x8a2 <__LOCK_REGION_LENGTH__+0x4a2>
 80c:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <state>
		}
		if(state == 5){ // state 5 
 810:	90 91 e6 01 	lds	r25, 0x01E6	; 0x8001e6 <state+0x1>
 814:	05 97       	sbiw	r24, 0x05	; 5
 816:	d9 f4       	brne	.+54     	; 0x84e <__LOCK_REGION_LENGTH__+0x44e>
 818:	89 ef       	ldi	r24, 0xF9	; 249
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 81a:	90 e0       	ldi	r25, 0x00	; 0
 81c:	01 97       	sbiw	r24, 0x01	; 1
 81e:	f1 f7       	brne	.-4      	; 0x81c <__LOCK_REGION_LENGTH__+0x41c>
 820:	00 c0       	rjmp	.+0      	; 0x822 <__LOCK_REGION_LENGTH__+0x422>
			_delay_ms(1);
			USART0_Transmit_String("Choose Card to Open : "); // 몇 번째에 있는 카드 선택인지
 822:	00 00       	nop
 824:	87 e6       	ldi	r24, 0x67	; 103
 826:	91 e0       	ldi	r25, 0x01	; 1
			rx = USART0_Receive();
 828:	61 dc       	rcall	.-1854   	; 0xec <USART0_Transmit_String>
 82a:	6e dc       	rcall	.-1828   	; 0x108 <USART0_Receive>
 82c:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <rx>
			USART0_Transmit(rx);
 830:	59 dc       	rcall	.-1870   	; 0xe4 <USART0_Transmit>
 832:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <rx>
			if((rx >= '0')&&(rx <= '9')){
 836:	80 53       	subi	r24, 0x30	; 48
 838:	8a 30       	cpi	r24, 0x0A	; 10
 83a:	48 f4       	brcc	.+18     	; 0x84e <__LOCK_REGION_LENGTH__+0x44e>
 83c:	d7 01       	movw	r26, r14
				get_number_1[0] = rx-48;
 83e:	8c 93       	st	X, r24
 840:	86 e0       	ldi	r24, 0x06	; 6
				state = 6;	
 842:	90 e0       	ldi	r25, 0x00	; 0
 844:	90 93 e6 01 	sts	0x01E6, r25	; 0x8001e6 <state+0x1>
 848:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <state>
 84c:	06 c0       	rjmp	.+12     	; 0x85a <__LOCK_REGION_LENGTH__+0x45a>
 84e:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <state>
			}
		} // state 3 end
		if(state == 6){ // state 4
 852:	90 91 e6 01 	lds	r25, 0x01E6	; 0x8001e6 <state+0x1>
 856:	06 97       	sbiw	r24, 0x06	; 6
 858:	21 f5       	brne	.+72     	; 0x8a2 <__LOCK_REGION_LENGTH__+0x4a2>
 85a:	56 dc       	rcall	.-1876   	; 0x108 <USART0_Receive>
			rx = USART0_Receive();
 85c:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <rx>
 860:	41 dc       	rcall	.-1918   	; 0xe4 <USART0_Transmit>
 862:	8d e4       	ldi	r24, 0x4D	; 77
			USART0_Transmit(rx);
 864:	91 e0       	ldi	r25, 0x01	; 1
 866:	42 dc       	rcall	.-1916   	; 0xec <USART0_Transmit_String>
			USART0_Transmit_String("\r\n");
 868:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <rx>
 86c:	80 53       	subi	r24, 0x30	; 48
			if((rx >= '0')&&(rx <= '9')){
 86e:	8a 30       	cpi	r24, 0x0A	; 10
 870:	c0 f4       	brcc	.+48     	; 0x8a2 <__LOCK_REGION_LENGTH__+0x4a2>
 872:	f7 01       	movw	r30, r14
 874:	81 83       	std	Z+1, r24	; 0x01
				get_number_1[1] = rx-48;
 876:	90 81       	ld	r25, Z
 878:	99 0f       	add	r25, r25
				get_number_1[2] = get_number_1[0]*10 + get_number_1[1] - 1;
 87a:	29 2f       	mov	r18, r25
 87c:	22 0f       	add	r18, r18
 87e:	22 0f       	add	r18, r18
 880:	92 0f       	add	r25, r18
 882:	89 0f       	add	r24, r25
 884:	81 50       	subi	r24, 0x01	; 1
 886:	82 83       	std	Z+2, r24	; 0x02
 888:	89 ef       	ldi	r24, 0xF9	; 249
 88a:	90 e0       	ldi	r25, 0x00	; 0
 88c:	01 97       	sbiw	r24, 0x01	; 1
 88e:	f1 f7       	brne	.-4      	; 0x88c <__LOCK_REGION_LENGTH__+0x48c>
 890:	00 c0       	rjmp	.+0      	; 0x892 <__LOCK_REGION_LENGTH__+0x492>
 892:	00 00       	nop
 894:	87 e0       	ldi	r24, 0x07	; 7
 896:	90 e0       	ldi	r25, 0x00	; 0
				_delay_ms(1);
				state = 7;
 898:	90 93 e6 01 	sts	0x01E6, r25	; 0x8001e6 <state+0x1>
 89c:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <state>
 8a0:	06 c0       	rjmp	.+12     	; 0x8ae <__LOCK_REGION_LENGTH__+0x4ae>
			}			
		} // state 4 end
		if(state == 7){ // state 5
 8a2:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <state>
 8a6:	90 91 e6 01 	lds	r25, 0x01E6	; 0x8001e6 <state+0x1>
 8aa:	07 97       	sbiw	r24, 0x07	; 7
			USART0_Transmit_String("Number? : "); // 카드가 무엇인지
 8ac:	a9 f4       	brne	.+42     	; 0x8d8 <__LOCK_REGION_LENGTH__+0x4d8>
 8ae:	8e e7       	ldi	r24, 0x7E	; 126
 8b0:	91 e0       	ldi	r25, 0x01	; 1
 8b2:	1c dc       	rcall	.-1992   	; 0xec <USART0_Transmit_String>
			rx = USART0_Receive();
 8b4:	29 dc       	rcall	.-1966   	; 0x108 <USART0_Receive>
 8b6:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <rx>
 8ba:	14 dc       	rcall	.-2008   	; 0xe4 <USART0_Transmit>
			USART0_Transmit(rx);
 8bc:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <rx>
			if((rx >= '0')&&(rx <= '9')){
 8c0:	80 53       	subi	r24, 0x30	; 48
 8c2:	8a 30       	cpi	r24, 0x0A	; 10
 8c4:	48 f4       	brcc	.+18     	; 0x8d8 <__LOCK_REGION_LENGTH__+0x4d8>
 8c6:	d8 01       	movw	r26, r16
 8c8:	8c 93       	st	X, r24
				get_number_2[0] = rx-48;
 8ca:	88 e0       	ldi	r24, 0x08	; 8
 8cc:	90 e0       	ldi	r25, 0x00	; 0
				state = 8;
 8ce:	90 93 e6 01 	sts	0x01E6, r25	; 0x8001e6 <state+0x1>
 8d2:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <state>
 8d6:	06 c0       	rjmp	.+12     	; 0x8e4 <__LOCK_REGION_LENGTH__+0x4e4>
 8d8:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <state>
			}
		} // state 5 end
		if(state == 8){ // state 8
 8dc:	90 91 e6 01 	lds	r25, 0x01E6	; 0x8001e6 <state+0x1>
 8e0:	08 97       	sbiw	r24, 0x08	; 8
 8e2:	e9 f4       	brne	.+58     	; 0x91e <__LOCK_REGION_LENGTH__+0x51e>
 8e4:	11 dc       	rcall	.-2014   	; 0x108 <USART0_Receive>
 8e6:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <rx>
			rx = USART0_Receive();
 8ea:	fc db       	rcall	.-2056   	; 0xe4 <USART0_Transmit>
 8ec:	8d e4       	ldi	r24, 0x4D	; 77
 8ee:	91 e0       	ldi	r25, 0x01	; 1
			USART0_Transmit(rx);
 8f0:	fd db       	rcall	.-2054   	; 0xec <USART0_Transmit_String>
 8f2:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <rx>
			USART0_Transmit_String("\r\n");
 8f6:	80 53       	subi	r24, 0x30	; 48
 8f8:	8a 30       	cpi	r24, 0x0A	; 10
 8fa:	88 f4       	brcc	.+34     	; 0x91e <__LOCK_REGION_LENGTH__+0x51e>
			if((rx >= '0')&&(rx <= '9')){
 8fc:	f8 01       	movw	r30, r16
 8fe:	81 83       	std	Z+1, r24	; 0x01
 900:	90 81       	ld	r25, Z
 902:	99 0f       	add	r25, r25
				get_number_2[1] = rx-48;
 904:	29 2f       	mov	r18, r25
 906:	22 0f       	add	r18, r18
				get_number_2[2] = get_number_2[0]*10 + get_number_2[1];
 908:	22 0f       	add	r18, r18
 90a:	92 0f       	add	r25, r18
 90c:	89 0f       	add	r24, r25
 90e:	82 83       	std	Z+2, r24	; 0x02
 910:	89 e0       	ldi	r24, 0x09	; 9
 912:	90 e0       	ldi	r25, 0x00	; 0
 914:	90 93 e6 01 	sts	0x01E6, r25	; 0x8001e6 <state+0x1>
				state = 9;
 918:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <state>
 91c:	08 c0       	rjmp	.+16     	; 0x92e <__LOCK_REGION_LENGTH__+0x52e>
 91e:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <state>
			}
		} // state 8 end
		if(state == 9){ // state 5
 922:	90 91 e6 01 	lds	r25, 0x01E6	; 0x8001e6 <state+0x1>
 926:	89 30       	cpi	r24, 0x09	; 9
 928:	91 05       	cpc	r25, r1
 92a:	09 f0       	breq	.+2      	; 0x92e <__LOCK_REGION_LENGTH__+0x52e>
 92c:	67 c0       	rjmp	.+206    	; 0x9fc <__LOCK_REGION_LENGTH__+0x5fc>
 92e:	d7 01       	movw	r26, r14
 930:	12 96       	adiw	r26, 0x02	; 2
			temp = p2_deck[(int)get_number_1[2]].number;
 932:	ec 91       	ld	r30, X
 934:	f0 e0       	ldi	r31, 0x00	; 0
 936:	ee 0f       	add	r30, r30
 938:	ff 1f       	adc	r31, r31
 93a:	ee 0f       	add	r30, r30
 93c:	ff 1f       	adc	r31, r31
 93e:	e0 5e       	subi	r30, 0xE0	; 224
 940:	fd 4f       	sbci	r31, 0xFD	; 253
 942:	81 81       	ldd	r24, Z+1	; 0x01
 944:	80 93 e0 01 	sts	0x01E0, r24	; 0x8001e0 <__data_end>
 948:	89 e8       	ldi	r24, 0x89	; 137
 94a:	91 e0       	ldi	r25, 0x01	; 1
			USART0_Transmit_String("Target Number : ");
 94c:	cf db       	rcall	.-2146   	; 0xec <USART0_Transmit_String>
 94e:	60 91 e0 01 	lds	r22, 0x01E0	; 0x8001e0 <__data_end>
 952:	80 e0       	ldi	r24, 0x00	; 0
			USART_Transmit_number(0, temp);
 954:	fe db       	rcall	.-2052   	; 0x152 <USART_Transmit_number>
 956:	8d e4       	ldi	r24, 0x4D	; 77
 958:	91 e0       	ldi	r25, 0x01	; 1
 95a:	c8 db       	rcall	.-2160   	; 0xec <USART0_Transmit_String>
			USART0_Transmit_String("\r\n");
 95c:	f8 01       	movw	r30, r16
 95e:	92 81       	ldd	r25, Z+2	; 0x02
 960:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <__data_end>
			if(temp == get_number_2[2]){
 964:	98 13       	cpse	r25, r24
 966:	3d c0       	rjmp	.+122    	; 0x9e2 <__LOCK_REGION_LENGTH__+0x5e2>
 968:	8a e9       	ldi	r24, 0x9A	; 154
 96a:	91 e0       	ldi	r25, 0x01	; 1
 96c:	bf db       	rcall	.-2178   	; 0xec <USART0_Transmit_String>
 96e:	d7 01       	movw	r26, r14
				USART0_Transmit_String("Correct\r\n");
 970:	12 96       	adiw	r26, 0x02	; 2
 972:	cc 91       	ld	r28, X
 974:	d0 e0       	ldi	r29, 0x00	; 0
 976:	fe 01       	movw	r30, r28
				p2_deck[(int)get_number_1[2]].opened = 1;
 978:	ee 0f       	add	r30, r30
 97a:	ff 1f       	adc	r31, r31
 97c:	ee 0f       	add	r30, r30
 97e:	ff 1f       	adc	r31, r31
 980:	e0 5e       	subi	r30, 0xE0	; 224
 982:	fd 4f       	sbci	r31, 0xFD	; 253
 984:	81 e0       	ldi	r24, 0x01	; 1
 986:	83 83       	std	Z+3, r24	; 0x03
 988:	91 81       	ldd	r25, Z+1	; 0x01
 98a:	f2 01       	movw	r30, r4
 98c:	cc 0f       	add	r28, r28
 98e:	dd 1f       	adc	r29, r29
				for(int i=0;i<NUM_CARD;i++){
					if(deck[i].number == p2_deck[(int)get_number_1[2]].number){
 990:	cc 0f       	add	r28, r28
						if(deck[i].color == p2_deck[(int)get_number_1[2]].color){
 992:	dd 1f       	adc	r29, r29
 994:	c0 5e       	subi	r28, 0xE0	; 224
 996:	dd 4f       	sbci	r29, 0xFD	; 253
 998:	31 e0       	ldi	r19, 0x01	; 1
 99a:	81 81       	ldd	r24, Z+1	; 0x01
 99c:	89 13       	cpse	r24, r25
							deck[i].opened = 1;
 99e:	05 c0       	rjmp	.+10     	; 0x9aa <__LOCK_REGION_LENGTH__+0x5aa>
			USART0_Transmit_String("\r\n");
			if(temp == get_number_2[2]){
				USART0_Transmit_String("Correct\r\n");
				p2_deck[(int)get_number_1[2]].opened = 1;
				for(int i=0;i<NUM_CARD;i++){
					if(deck[i].number == p2_deck[(int)get_number_1[2]].number){
 9a0:	20 81       	ld	r18, Z
 9a2:	88 81       	ld	r24, Y
 9a4:	28 13       	cpse	r18, r24
						if(deck[i].color == p2_deck[(int)get_number_1[2]].color){
 9a6:	01 c0       	rjmp	.+2      	; 0x9aa <__LOCK_REGION_LENGTH__+0x5aa>
 9a8:	33 83       	std	Z+3, r19	; 0x03
 9aa:	34 96       	adiw	r30, 0x04	; 4
 9ac:	ea 15       	cp	r30, r10
							deck[i].opened = 1;
 9ae:	fb 05       	cpc	r31, r11
 9b0:	a1 f7       	brne	.-24     	; 0x99a <__LOCK_REGION_LENGTH__+0x59a>
			USART_Transmit_number(0, temp);
			USART0_Transmit_String("\r\n");
			if(temp == get_number_2[2]){
				USART0_Transmit_String("Correct\r\n");
				p2_deck[(int)get_number_1[2]].opened = 1;
				for(int i=0;i<NUM_CARD;i++){
 9b2:	7a dc       	rcall	.-1804   	; 0x2a8 <showP2toP1>
 9b4:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <p2_opened_cnt>
						if(deck[i].color == p2_deck[(int)get_number_1[2]].color){
							deck[i].opened = 1;
						}
					}
				}		
				showP2toP1();
 9b8:	8f 5f       	subi	r24, 0xFF	; 255
				p2_opened_cnt++;
 9ba:	80 93 e1 01 	sts	0x01E1, r24	; 0x8001e1 <p2_opened_cnt>
 9be:	90 91 e3 01 	lds	r25, 0x01E3	; 0x8001e3 <p2_card_cnt>
				if(p2_card_cnt == p2_opened_cnt) state = 30;
 9c2:	89 13       	cpse	r24, r25
 9c4:	07 c0       	rjmp	.+14     	; 0x9d4 <__LOCK_REGION_LENGTH__+0x5d4>
 9c6:	8e e1       	ldi	r24, 0x1E	; 30
 9c8:	90 e0       	ldi	r25, 0x00	; 0
 9ca:	90 93 e6 01 	sts	0x01E6, r25	; 0x8001e6 <state+0x1>
 9ce:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <state>
 9d2:	5b c0       	rjmp	.+182    	; 0xa8a <__LOCK_REGION_LENGTH__+0x68a>
 9d4:	85 e0       	ldi	r24, 0x05	; 5
 9d6:	90 e0       	ldi	r25, 0x00	; 0
				else state = 5;
 9d8:	90 93 e6 01 	sts	0x01E6, r25	; 0x8001e6 <state+0x1>
 9dc:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <state>
 9e0:	54 c0       	rjmp	.+168    	; 0xa8a <__LOCK_REGION_LENGTH__+0x68a>
 9e2:	84 ea       	ldi	r24, 0xA4	; 164
			}
			else{
				USART0_Transmit_String("Wrong\r\n");
 9e4:	91 e0       	ldi	r25, 0x01	; 1
 9e6:	82 db       	rcall	.-2300   	; 0xec <USART0_Transmit_String>
 9e8:	8c ea       	ldi	r24, 0xAC	; 172
				USART0_Transmit_String("Player 2's Turn\r\n");
 9ea:	91 e0       	ldi	r25, 0x01	; 1
 9ec:	7f db       	rcall	.-2306   	; 0xec <USART0_Transmit_String>
 9ee:	84 e0       	ldi	r24, 0x04	; 4
				state = 4;
 9f0:	90 e0       	ldi	r25, 0x00	; 0
 9f2:	90 93 e6 01 	sts	0x01E6, r25	; 0x8001e6 <state+0x1>
 9f6:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <state>
 9fa:	47 c0       	rjmp	.+142    	; 0xa8a <__LOCK_REGION_LENGTH__+0x68a>
 9fc:	0a 97       	sbiw	r24, 0x0a	; 10
			}
			
		}
		if(state == 10){ // state 10
 9fe:	d9 f4       	brne	.+54     	; 0xa36 <__LOCK_REGION_LENGTH__+0x636>
 a00:	e9 ef       	ldi	r30, 0xF9	; 249
 a02:	f0 e0       	ldi	r31, 0x00	; 0
 a04:	31 97       	sbiw	r30, 0x01	; 1
 a06:	f1 f7       	brne	.-4      	; 0xa04 <__LOCK_REGION_LENGTH__+0x604>
 a08:	00 c0       	rjmp	.+0      	; 0xa0a <__LOCK_REGION_LENGTH__+0x60a>
 a0a:	00 00       	nop
 a0c:	87 e6       	ldi	r24, 0x67	; 103
			_delay_ms(1);
			USART1_Transmit_String("Choose Card to Open : "); // 몇 번째에 있는 카드 선택인지
 a0e:	91 e0       	ldi	r25, 0x01	; 1
 a10:	92 db       	rcall	.-2268   	; 0x136 <USART1_Transmit_String>
 a12:	aa dc       	rcall	.-1708   	; 0x368 <USART1_Receive>
 a14:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <rx>
			rx = USART1_Receive();
 a18:	86 db       	rcall	.-2292   	; 0x126 <USART1_Transmit>
 a1a:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <rx>
			USART1_Transmit(rx);
 a1e:	80 53       	subi	r24, 0x30	; 48
 a20:	8a 30       	cpi	r24, 0x0A	; 10
			if((rx >= '0')&&(rx <= '9')){
 a22:	48 f4       	brcc	.+18     	; 0xa36 <__LOCK_REGION_LENGTH__+0x636>
 a24:	d7 01       	movw	r26, r14
 a26:	8c 93       	st	X, r24
 a28:	8b e0       	ldi	r24, 0x0B	; 11
 a2a:	90 e0       	ldi	r25, 0x00	; 0
				get_number_1[0] = rx-48;
 a2c:	90 93 e6 01 	sts	0x01E6, r25	; 0x8001e6 <state+0x1>
				state = 11;
 a30:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <state>
 a34:	06 c0       	rjmp	.+12     	; 0xa42 <__LOCK_REGION_LENGTH__+0x642>
 a36:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <state>
			}
		} // state 10 end
		if(state == 11){ // state 11
 a3a:	90 91 e6 01 	lds	r25, 0x01E6	; 0x8001e6 <state+0x1>
 a3e:	0b 97       	sbiw	r24, 0x0b	; 11
 a40:	21 f5       	brne	.+72     	; 0xa8a <__LOCK_REGION_LENGTH__+0x68a>
 a42:	92 dc       	rcall	.-1756   	; 0x368 <USART1_Receive>
 a44:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <rx>
			rx = USART1_Receive();
 a48:	6e db       	rcall	.-2340   	; 0x126 <USART1_Transmit>
 a4a:	8d e4       	ldi	r24, 0x4D	; 77
 a4c:	91 e0       	ldi	r25, 0x01	; 1
			USART1_Transmit(rx);
 a4e:	73 db       	rcall	.-2330   	; 0x136 <USART1_Transmit_String>
 a50:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <rx>
			USART1_Transmit_String("\r\n");
 a54:	80 53       	subi	r24, 0x30	; 48
 a56:	8a 30       	cpi	r24, 0x0A	; 10
 a58:	c0 f4       	brcc	.+48     	; 0xa8a <__LOCK_REGION_LENGTH__+0x68a>
			if((rx >= '0')&&(rx <= '9')){
 a5a:	f7 01       	movw	r30, r14
 a5c:	81 83       	std	Z+1, r24	; 0x01
 a5e:	90 81       	ld	r25, Z
 a60:	99 0f       	add	r25, r25
				get_number_1[1] = rx-48;
 a62:	29 2f       	mov	r18, r25
				get_number_1[2] = get_number_1[0]*10 + get_number_1[1] - 1;
 a64:	22 0f       	add	r18, r18
 a66:	22 0f       	add	r18, r18
 a68:	92 0f       	add	r25, r18
 a6a:	89 0f       	add	r24, r25
 a6c:	81 50       	subi	r24, 0x01	; 1
 a6e:	82 83       	std	Z+2, r24	; 0x02
 a70:	89 ef       	ldi	r24, 0xF9	; 249
 a72:	90 e0       	ldi	r25, 0x00	; 0
 a74:	01 97       	sbiw	r24, 0x01	; 1
 a76:	f1 f7       	brne	.-4      	; 0xa74 <__LOCK_REGION_LENGTH__+0x674>
 a78:	00 c0       	rjmp	.+0      	; 0xa7a <__LOCK_REGION_LENGTH__+0x67a>
 a7a:	00 00       	nop
 a7c:	8c e0       	ldi	r24, 0x0C	; 12
 a7e:	90 e0       	ldi	r25, 0x00	; 0
				_delay_ms(1);
				state = 12;
 a80:	90 93 e6 01 	sts	0x01E6, r25	; 0x8001e6 <state+0x1>
 a84:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <state>
 a88:	06 c0       	rjmp	.+12     	; 0xa96 <__LOCK_REGION_LENGTH__+0x696>
 a8a:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <state>
			}
		} // state 11 end
		if(state == 12){ // state 12
 a8e:	90 91 e6 01 	lds	r25, 0x01E6	; 0x8001e6 <state+0x1>
 a92:	0c 97       	sbiw	r24, 0x0c	; 12
 a94:	99 f4       	brne	.+38     	; 0xabc <__LOCK_REGION_LENGTH__+0x6bc>
 a96:	8e e7       	ldi	r24, 0x7E	; 126
 a98:	91 e0       	ldi	r25, 0x01	; 1
			USART1_Transmit_String("Number? : "); // 카드가 무엇인지
 a9a:	4d db       	rcall	.-2406   	; 0x136 <USART1_Transmit_String>
 a9c:	65 dc       	rcall	.-1846   	; 0x368 <USART1_Receive>
 a9e:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <rx>
			rx = USART1_Receive();
 aa2:	41 db       	rcall	.-2430   	; 0x126 <USART1_Transmit>
 aa4:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <rx>
 aa8:	80 53       	subi	r24, 0x30	; 48
			USART1_Transmit(rx);
 aaa:	8a 30       	cpi	r24, 0x0A	; 10
 aac:	38 f4       	brcc	.+14     	; 0xabc <__LOCK_REGION_LENGTH__+0x6bc>
			if((rx >= '0')&&(rx <= '9')){
 aae:	d8 01       	movw	r26, r16
 ab0:	8c 93       	st	X, r24
 ab2:	30 92 e6 01 	sts	0x01E6, r3	; 0x8001e6 <state+0x1>
 ab6:	20 92 e5 01 	sts	0x01E5, r2	; 0x8001e5 <state>
				get_number_2[0] = rx-48;
 aba:	06 c0       	rjmp	.+12     	; 0xac8 <__LOCK_REGION_LENGTH__+0x6c8>
				state = 13;
 abc:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <state>
 ac0:	90 91 e6 01 	lds	r25, 0x01E6	; 0x8001e6 <state+0x1>
			}
		} // state 12 end
		if(state == 13){ // state 13
 ac4:	0d 97       	sbiw	r24, 0x0d	; 13
 ac6:	e9 f4       	brne	.+58     	; 0xb02 <__LOCK_REGION_LENGTH__+0x702>
 ac8:	4f dc       	rcall	.-1890   	; 0x368 <USART1_Receive>
 aca:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <rx>
			rx = USART1_Receive();
 ace:	2b db       	rcall	.-2474   	; 0x126 <USART1_Transmit>
 ad0:	8d e4       	ldi	r24, 0x4D	; 77
 ad2:	91 e0       	ldi	r25, 0x01	; 1
			USART1_Transmit(rx);
 ad4:	30 db       	rcall	.-2464   	; 0x136 <USART1_Transmit_String>
 ad6:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <rx>
			USART1_Transmit_String("\r\n");
 ada:	80 53       	subi	r24, 0x30	; 48
 adc:	8a 30       	cpi	r24, 0x0A	; 10
			if((rx >= '0')&&(rx <= '9')){
 ade:	88 f4       	brcc	.+34     	; 0xb02 <__LOCK_REGION_LENGTH__+0x702>
 ae0:	f8 01       	movw	r30, r16
 ae2:	81 83       	std	Z+1, r24	; 0x01
 ae4:	90 81       	ld	r25, Z
 ae6:	99 0f       	add	r25, r25
				get_number_2[1] = rx-48;
 ae8:	29 2f       	mov	r18, r25
 aea:	22 0f       	add	r18, r18
				get_number_2[2] = get_number_2[0]*10 + get_number_2[1];
 aec:	22 0f       	add	r18, r18
 aee:	92 0f       	add	r25, r18
 af0:	89 0f       	add	r24, r25
 af2:	82 83       	std	Z+2, r24	; 0x02
 af4:	8e e0       	ldi	r24, 0x0E	; 14
 af6:	90 e0       	ldi	r25, 0x00	; 0
 af8:	90 93 e6 01 	sts	0x01E6, r25	; 0x8001e6 <state+0x1>
				state = 14;
 afc:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <state>
 b00:	08 c0       	rjmp	.+16     	; 0xb12 <__LOCK_REGION_LENGTH__+0x712>
 b02:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <state>
 b06:	90 91 e6 01 	lds	r25, 0x01E6	; 0x8001e6 <state+0x1>
			}
		} // state 13 end
		if(state == 14){ // state 5
 b0a:	8e 30       	cpi	r24, 0x0E	; 14
 b0c:	91 05       	cpc	r25, r1
 b0e:	09 f0       	breq	.+2      	; 0xb12 <__LOCK_REGION_LENGTH__+0x712>
 b10:	63 c0       	rjmp	.+198    	; 0xbd8 <__LOCK_REGION_LENGTH__+0x7d8>
 b12:	d7 01       	movw	r26, r14
 b14:	12 96       	adiw	r26, 0x02	; 2
 b16:	ec 91       	ld	r30, X
 b18:	f0 e0       	ldi	r31, 0x00	; 0
			temp = p1_deck[(int)get_number_1[2]].number;
 b1a:	ee 0f       	add	r30, r30
 b1c:	ff 1f       	adc	r31, r31
 b1e:	ee 0f       	add	r30, r30
 b20:	ff 1f       	adc	r31, r31
 b22:	e9 51       	subi	r30, 0x19	; 25
 b24:	fe 4f       	sbci	r31, 0xFE	; 254
 b26:	81 81       	ldd	r24, Z+1	; 0x01
 b28:	80 93 e0 01 	sts	0x01E0, r24	; 0x8001e0 <__data_end>
 b2c:	89 e8       	ldi	r24, 0x89	; 137
 b2e:	91 e0       	ldi	r25, 0x01	; 1
 b30:	02 db       	rcall	.-2556   	; 0x136 <USART1_Transmit_String>
			USART1_Transmit_String("Target Number : ");
 b32:	60 91 e0 01 	lds	r22, 0x01E0	; 0x8001e0 <__data_end>
 b36:	81 e0       	ldi	r24, 0x01	; 1
 b38:	0c db       	rcall	.-2536   	; 0x152 <USART_Transmit_number>
			USART_Transmit_number(1, temp);
 b3a:	8d e4       	ldi	r24, 0x4D	; 77
 b3c:	91 e0       	ldi	r25, 0x01	; 1
 b3e:	fb da       	rcall	.-2570   	; 0x136 <USART1_Transmit_String>
 b40:	f8 01       	movw	r30, r16
 b42:	92 81       	ldd	r25, Z+2	; 0x02
			USART1_Transmit_String("\r\n");
 b44:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <__data_end>
 b48:	98 13       	cpse	r25, r24
 b4a:	3b c0       	rjmp	.+118    	; 0xbc2 <__LOCK_REGION_LENGTH__+0x7c2>
			if(temp == get_number_2[2]){
 b4c:	8a e9       	ldi	r24, 0x9A	; 154
 b4e:	91 e0       	ldi	r25, 0x01	; 1
 b50:	f2 da       	rcall	.-2588   	; 0x136 <USART1_Transmit_String>
 b52:	d7 01       	movw	r26, r14
				USART1_Transmit_String("Correct\r\n");
 b54:	12 96       	adiw	r26, 0x02	; 2
 b56:	cc 91       	ld	r28, X
 b58:	d0 e0       	ldi	r29, 0x00	; 0
 b5a:	fe 01       	movw	r30, r28
				p1_deck[(int)get_number_1[2]].opened = 1;
 b5c:	ee 0f       	add	r30, r30
 b5e:	ff 1f       	adc	r31, r31
 b60:	ee 0f       	add	r30, r30
 b62:	ff 1f       	adc	r31, r31
 b64:	e9 51       	subi	r30, 0x19	; 25
 b66:	fe 4f       	sbci	r31, 0xFE	; 254
 b68:	81 e0       	ldi	r24, 0x01	; 1
 b6a:	83 83       	std	Z+3, r24	; 0x03
 b6c:	91 81       	ldd	r25, Z+1	; 0x01
 b6e:	f2 01       	movw	r30, r4
 b70:	cc 0f       	add	r28, r28
				for(int i=0;i<NUM_CARD;i++){
					if(deck[i].number == p1_deck[(int)get_number_1[2]].number){
 b72:	dd 1f       	adc	r29, r29
 b74:	cc 0f       	add	r28, r28
						if(deck[i].color == p1_deck[(int)get_number_1[2]].color){
 b76:	dd 1f       	adc	r29, r29
 b78:	c9 51       	subi	r28, 0x19	; 25
 b7a:	de 4f       	sbci	r29, 0xFE	; 254
 b7c:	31 e0       	ldi	r19, 0x01	; 1
 b7e:	81 81       	ldd	r24, Z+1	; 0x01
 b80:	89 13       	cpse	r24, r25
							deck[i].opened = 1;
 b82:	05 c0       	rjmp	.+10     	; 0xb8e <__LOCK_REGION_LENGTH__+0x78e>
			USART1_Transmit_String("\r\n");
			if(temp == get_number_2[2]){
				USART1_Transmit_String("Correct\r\n");
				p1_deck[(int)get_number_1[2]].opened = 1;
				for(int i=0;i<NUM_CARD;i++){
					if(deck[i].number == p1_deck[(int)get_number_1[2]].number){
 b84:	20 81       	ld	r18, Z
 b86:	88 81       	ld	r24, Y
 b88:	28 13       	cpse	r18, r24
						if(deck[i].color == p1_deck[(int)get_number_1[2]].color){
 b8a:	01 c0       	rjmp	.+2      	; 0xb8e <__LOCK_REGION_LENGTH__+0x78e>
 b8c:	33 83       	std	Z+3, r19	; 0x03
 b8e:	34 96       	adiw	r30, 0x04	; 4
 b90:	ea 15       	cp	r30, r10
							deck[i].opened = 1;
 b92:	fb 05       	cpc	r31, r11
 b94:	a1 f7       	brne	.-24     	; 0xb7e <__LOCK_REGION_LENGTH__+0x77e>
			USART_Transmit_number(1, temp);
			USART1_Transmit_String("\r\n");
			if(temp == get_number_2[2]){
				USART1_Transmit_String("Correct\r\n");
				p1_deck[(int)get_number_1[2]].opened = 1;
				for(int i=0;i<NUM_CARD;i++){
 b96:	b8 db       	rcall	.-2192   	; 0x308 <showP1toP2>
 b98:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <p1_opened_cnt>
						if(deck[i].color == p1_deck[(int)get_number_1[2]].color){
							deck[i].opened = 1;
						}
					}
				}
				showP1toP2();
 b9c:	8f 5f       	subi	r24, 0xFF	; 255
 b9e:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <p1_opened_cnt>
				p1_opened_cnt++;
 ba2:	90 91 e4 01 	lds	r25, 0x01E4	; 0x8001e4 <p1_card_cnt>
 ba6:	89 13       	cpse	r24, r25
 ba8:	07 c0       	rjmp	.+14     	; 0xbb8 <__LOCK_REGION_LENGTH__+0x7b8>
				if(p1_card_cnt == p1_opened_cnt) state = 30;
 baa:	8e e1       	ldi	r24, 0x1E	; 30
 bac:	90 e0       	ldi	r25, 0x00	; 0
 bae:	90 93 e6 01 	sts	0x01E6, r25	; 0x8001e6 <state+0x1>
 bb2:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <state>
 bb6:	13 c0       	rjmp	.+38     	; 0xbde <__LOCK_REGION_LENGTH__+0x7de>
 bb8:	70 92 e6 01 	sts	0x01E6, r7	; 0x8001e6 <state+0x1>
 bbc:	60 92 e5 01 	sts	0x01E5, r6	; 0x8001e5 <state>
				else state = 10;
 bc0:	47 cc       	rjmp	.-1906   	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 bc2:	84 ea       	ldi	r24, 0xA4	; 164
 bc4:	91 e0       	ldi	r25, 0x01	; 1
 bc6:	b7 da       	rcall	.-2706   	; 0x136 <USART1_Transmit_String>
 bc8:	8e eb       	ldi	r24, 0xBE	; 190
			}
			else{
				USART1_Transmit_String("Wrong\r\n");
 bca:	91 e0       	ldi	r25, 0x01	; 1
 bcc:	b4 da       	rcall	.-2712   	; 0x136 <USART1_Transmit_String>
 bce:	d0 92 e6 01 	sts	0x01E6, r13	; 0x8001e6 <state+0x1>
				USART1_Transmit_String("Player 1's Turn\r\n");
 bd2:	c0 92 e5 01 	sts	0x01E5, r12	; 0x8001e5 <state>
 bd6:	3c cc       	rjmp	.-1928   	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 bd8:	4e 97       	sbiw	r24, 0x1e	; 30
				state = 3;
 bda:	09 f0       	breq	.+2      	; 0xbde <__LOCK_REGION_LENGTH__+0x7de>
 bdc:	39 cc       	rjmp	.-1934   	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 bde:	80 ed       	ldi	r24, 0xD0	; 208
 be0:	91 e0       	ldi	r25, 0x01	; 1
 be2:	84 da       	rcall	.-2808   	; 0xec <USART0_Transmit_String>
			
		}
		
		
		
		if(state == 30){
 be4:	80 ed       	ldi	r24, 0xD0	; 208
 be6:	91 e0       	ldi	r25, 0x01	; 1
 be8:	a6 da       	rcall	.-2740   	; 0x136 <USART1_Transmit_String>
			USART0_Transmit_String("P1 Win\r\nP2 Lose");
 bea:	2a cc       	rjmp	.-1964   	; 0x440 <__LOCK_REGION_LENGTH__+0x40>

00000bec <_exit>:
 bec:	f8 94       	cli

00000bee <__stop_program>:
 bee:	ff cf       	rjmp	.-2      	; 0xbee <__stop_program>
