
Game_DaVinci_Code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000009e  00800100  0000078a  0000081e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000078a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  0080019e  0080019e  000008bc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008bc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000008ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00000928  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012ff  00000000  00000000  00000998  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000975  00000000  00000000  00001c97  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000091f  00000000  00000000  0000260c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f0  00000000  00000000  00002f2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000056d  00000000  00000000  0000301c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009de  00000000  00000000  00003589  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00003f67  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea e8       	ldi	r30, 0x8A	; 138
  a0:	f7 e0       	ldi	r31, 0x07	; 7
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ae 39       	cpi	r26, 0x9E	; 158
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ae e9       	ldi	r26, 0x9E	; 158
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a0 3a       	cpi	r26, 0xA0	; 160
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	fb d0       	rcall	.+502    	; 0x2ba <main>
  c4:	60 c3       	rjmp	.+1728   	; 0x786 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <Timer_Init>:
/*******************************************************************/
/*                         Timer Functions                         */
/*******************************************************************/

void Timer_Init(){
	TCCR0 = (4<<CS0);
  c8:	84 e0       	ldi	r24, 0x04	; 4
  ca:	83 bf       	out	0x33, r24	; 51
	TIMSK = (1<<TOIE0);
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	87 bf       	out	0x37, r24	; 55
	TCNT0 = 0;
  d0:	12 be       	out	0x32, r1	; 50
  d2:	08 95       	ret

000000d4 <USART0_Init>:
/*******************************************************************/
/*                         USART Functions                         */
/*******************************************************************/

void USART0_Init(unsigned int ubrr){ // Set USART0 Registers
	UBRR0H = (unsigned char)(ubrr >> 8); // UBRR's High bits
  d4:	90 93 90 00 	sts	0x0090, r25	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L = (unsigned char)(ubrr);		 // UBRR;s Low bits -> UBRR : 103
  d8:	89 b9       	out	0x09, r24	; 9
	UCSR0B = (1<<RXEN0) | (1<<TXEN0); // Receive Enable, Transmit Enable
  da:	88 e1       	ldi	r24, 0x18	; 24
  dc:	8a b9       	out	0x0a, r24	; 10
	UCSR0C = (1<<UCSZ00) | (1<<UCSZ01);			// Set Data bits to 8 bits
  de:	86 e0       	ldi	r24, 0x06	; 6
  e0:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
  e4:	08 95       	ret

000000e6 <USART0_Transmit>:
}

void USART0_Transmit(char data){
	while(!((UCSR0A)  & (1<<UDRE0))); // Wait for Data Register empty
  e6:	5d 9b       	sbis	0x0b, 5	; 11
  e8:	fe cf       	rjmp	.-4      	; 0xe6 <USART0_Transmit>
	UDR0 = data;
  ea:	8c b9       	out	0x0c, r24	; 12
  ec:	08 95       	ret

000000ee <USART0_Transmit_String>:
}

void USART0_Transmit_String(char *str){
  ee:	cf 93       	push	r28
  f0:	df 93       	push	r29
  f2:	ec 01       	movw	r28, r24
	while(*str != '\0') USART0_Transmit(*str++);
  f4:	88 81       	ld	r24, Y
  f6:	88 23       	and	r24, r24
  f8:	29 f0       	breq	.+10     	; 0x104 <USART0_Transmit_String+0x16>
  fa:	21 96       	adiw	r28, 0x01	; 1
  fc:	f4 df       	rcall	.-24     	; 0xe6 <USART0_Transmit>
  fe:	89 91       	ld	r24, Y+
 100:	81 11       	cpse	r24, r1
 102:	fc cf       	rjmp	.-8      	; 0xfc <USART0_Transmit_String+0xe>
}
 104:	df 91       	pop	r29
 106:	cf 91       	pop	r28
 108:	08 95       	ret

0000010a <USART0_Receive>:

char USART0_Receive(void){
	while(!(UCSR0A & (1<<RXC0))); // Wait for Receive Buffer is empty
 10a:	5f 9b       	sbis	0x0b, 7	; 11
 10c:	fe cf       	rjmp	.-4      	; 0x10a <USART0_Receive>
	return UDR0;
 10e:	8c b1       	in	r24, 0x0c	; 12
}
 110:	08 95       	ret

00000112 <USART1_Init>:

void USART1_Init(unsigned int ubrr){ // Set USART0 Registers
	UBRR1H = (unsigned char)(ubrr >> 8); // UBRR's High bits
 112:	90 93 98 00 	sts	0x0098, r25	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
	UBRR1L = (unsigned char)(ubrr);		 // UBRR;s Low bits -> UBRR : 103
 116:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
	UCSR1B = (1<<RXEN1) | (1<<TXEN1); // Receive Enable, Transmit Enable
 11a:	88 e1       	ldi	r24, 0x18	; 24
 11c:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
	UCSR1C = (1<<UCSZ10) | (1<<UCSZ11);			// Set Data bits to 8 bits
 120:	86 e0       	ldi	r24, 0x06	; 6
 122:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <__TEXT_REGION_LENGTH__+0x7e009d>
 126:	08 95       	ret

00000128 <USART1_Transmit>:
}

void USART1_Transmit(char data){
	while(!((UCSR1A)  & (1<<UDRE1))); // Wait for Data Register empty
 128:	eb e9       	ldi	r30, 0x9B	; 155
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	90 81       	ld	r25, Z
 12e:	95 ff       	sbrs	r25, 5
 130:	fd cf       	rjmp	.-6      	; 0x12c <USART1_Transmit+0x4>
	UDR1 = data;
 132:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
 136:	08 95       	ret

00000138 <USART_Transmit_number>:

/*******************************************************************/
/*                          USER Functions                         */
/*******************************************************************/
void USART_Transmit_number(char USART_NUM,char num){
	if(num == 0){
 138:	61 11       	cpse	r22, r1
 13a:	0b c0       	rjmp	.+22     	; 0x152 <USART_Transmit_number+0x1a>
		if(USART_NUM == 0) USART0_Transmit('0');
 13c:	81 11       	cpse	r24, r1
 13e:	03 c0       	rjmp	.+6      	; 0x146 <USART_Transmit_number+0xe>
 140:	80 e3       	ldi	r24, 0x30	; 48
 142:	d1 cf       	rjmp	.-94     	; 0xe6 <USART0_Transmit>
 144:	08 95       	ret
		else if(USART_NUM == 1) USART1_Transmit('0');
 146:	81 30       	cpi	r24, 0x01	; 1
 148:	09 f0       	breq	.+2      	; 0x14c <USART_Transmit_number+0x14>
 14a:	a0 c0       	rjmp	.+320    	; 0x28c <USART_Transmit_number+0x154>
 14c:	80 e3       	ldi	r24, 0x30	; 48
 14e:	ec cf       	rjmp	.-40     	; 0x128 <USART1_Transmit>
 150:	08 95       	ret
	}
	else if(num == 1){
 152:	61 30       	cpi	r22, 0x01	; 1
 154:	59 f4       	brne	.+22     	; 0x16c <USART_Transmit_number+0x34>
		if(USART_NUM == 0) USART0_Transmit('1');
 156:	81 11       	cpse	r24, r1
 158:	03 c0       	rjmp	.+6      	; 0x160 <USART_Transmit_number+0x28>
 15a:	81 e3       	ldi	r24, 0x31	; 49
 15c:	c4 cf       	rjmp	.-120    	; 0xe6 <USART0_Transmit>
 15e:	08 95       	ret
		else if(USART_NUM == 1) USART1_Transmit('1');
 160:	81 30       	cpi	r24, 0x01	; 1
 162:	09 f0       	breq	.+2      	; 0x166 <USART_Transmit_number+0x2e>
 164:	93 c0       	rjmp	.+294    	; 0x28c <USART_Transmit_number+0x154>
 166:	81 e3       	ldi	r24, 0x31	; 49
 168:	df cf       	rjmp	.-66     	; 0x128 <USART1_Transmit>
 16a:	08 95       	ret
	}
	else if(num == 2){
 16c:	62 30       	cpi	r22, 0x02	; 2
		if(USART_NUM == 0) USART0_Transmit('2');
 16e:	59 f4       	brne	.+22     	; 0x186 <USART_Transmit_number+0x4e>
 170:	81 11       	cpse	r24, r1
 172:	03 c0       	rjmp	.+6      	; 0x17a <USART_Transmit_number+0x42>
 174:	82 e3       	ldi	r24, 0x32	; 50
 176:	b7 cf       	rjmp	.-146    	; 0xe6 <USART0_Transmit>
		else if(USART_NUM == 1) USART1_Transmit('2');
 178:	08 95       	ret
 17a:	81 30       	cpi	r24, 0x01	; 1
 17c:	09 f0       	breq	.+2      	; 0x180 <USART_Transmit_number+0x48>
 17e:	86 c0       	rjmp	.+268    	; 0x28c <USART_Transmit_number+0x154>
 180:	82 e3       	ldi	r24, 0x32	; 50
 182:	d2 cf       	rjmp	.-92     	; 0x128 <USART1_Transmit>
	}
	else if(num == 3){
 184:	08 95       	ret
 186:	63 30       	cpi	r22, 0x03	; 3
		if(USART_NUM == 0) USART0_Transmit('3');
 188:	59 f4       	brne	.+22     	; 0x1a0 <USART_Transmit_number+0x68>
 18a:	81 11       	cpse	r24, r1
 18c:	03 c0       	rjmp	.+6      	; 0x194 <USART_Transmit_number+0x5c>
 18e:	83 e3       	ldi	r24, 0x33	; 51
 190:	aa cf       	rjmp	.-172    	; 0xe6 <USART0_Transmit>
		else if(USART_NUM == 1) USART1_Transmit('3');
 192:	08 95       	ret
 194:	81 30       	cpi	r24, 0x01	; 1
 196:	09 f0       	breq	.+2      	; 0x19a <USART_Transmit_number+0x62>
 198:	79 c0       	rjmp	.+242    	; 0x28c <USART_Transmit_number+0x154>
 19a:	83 e3       	ldi	r24, 0x33	; 51
 19c:	c5 cf       	rjmp	.-118    	; 0x128 <USART1_Transmit>
	}
	else if(num == 4){
 19e:	08 95       	ret
 1a0:	64 30       	cpi	r22, 0x04	; 4
		if(USART_NUM == 0) USART0_Transmit('4');
 1a2:	59 f4       	brne	.+22     	; 0x1ba <USART_Transmit_number+0x82>
 1a4:	81 11       	cpse	r24, r1
 1a6:	03 c0       	rjmp	.+6      	; 0x1ae <USART_Transmit_number+0x76>
 1a8:	84 e3       	ldi	r24, 0x34	; 52
 1aa:	9d cf       	rjmp	.-198    	; 0xe6 <USART0_Transmit>
		else if(USART_NUM == 1) USART1_Transmit('4');
 1ac:	08 95       	ret
 1ae:	81 30       	cpi	r24, 0x01	; 1
 1b0:	09 f0       	breq	.+2      	; 0x1b4 <USART_Transmit_number+0x7c>
 1b2:	6c c0       	rjmp	.+216    	; 0x28c <USART_Transmit_number+0x154>
 1b4:	84 e3       	ldi	r24, 0x34	; 52
 1b6:	b8 cf       	rjmp	.-144    	; 0x128 <USART1_Transmit>
	}
	else if(num == 5){
 1b8:	08 95       	ret
		if(USART_NUM == 0) USART0_Transmit('5');
 1ba:	65 30       	cpi	r22, 0x05	; 5
 1bc:	59 f4       	brne	.+22     	; 0x1d4 <USART_Transmit_number+0x9c>
 1be:	81 11       	cpse	r24, r1
 1c0:	03 c0       	rjmp	.+6      	; 0x1c8 <USART_Transmit_number+0x90>
 1c2:	85 e3       	ldi	r24, 0x35	; 53
 1c4:	90 cf       	rjmp	.-224    	; 0xe6 <USART0_Transmit>
		else if(USART_NUM == 1) USART1_Transmit('5');
 1c6:	08 95       	ret
 1c8:	81 30       	cpi	r24, 0x01	; 1
 1ca:	09 f0       	breq	.+2      	; 0x1ce <USART_Transmit_number+0x96>
 1cc:	5f c0       	rjmp	.+190    	; 0x28c <USART_Transmit_number+0x154>
 1ce:	85 e3       	ldi	r24, 0x35	; 53
	}
	else if(num == 6){
 1d0:	ab cf       	rjmp	.-170    	; 0x128 <USART1_Transmit>
 1d2:	08 95       	ret
		if(USART_NUM == 0) USART0_Transmit('6');
 1d4:	66 30       	cpi	r22, 0x06	; 6
 1d6:	59 f4       	brne	.+22     	; 0x1ee <USART_Transmit_number+0xb6>
 1d8:	81 11       	cpse	r24, r1
 1da:	03 c0       	rjmp	.+6      	; 0x1e2 <USART_Transmit_number+0xaa>
 1dc:	86 e3       	ldi	r24, 0x36	; 54
		else if(USART_NUM == 1) USART1_Transmit('6');
 1de:	83 cf       	rjmp	.-250    	; 0xe6 <USART0_Transmit>
 1e0:	08 95       	ret
 1e2:	81 30       	cpi	r24, 0x01	; 1
 1e4:	09 f0       	breq	.+2      	; 0x1e8 <USART_Transmit_number+0xb0>
 1e6:	52 c0       	rjmp	.+164    	; 0x28c <USART_Transmit_number+0x154>
 1e8:	86 e3       	ldi	r24, 0x36	; 54
	}
	else if(num == 7){
 1ea:	9e cf       	rjmp	.-196    	; 0x128 <USART1_Transmit>
 1ec:	08 95       	ret
		if(USART_NUM == 0) USART0_Transmit('7');
 1ee:	67 30       	cpi	r22, 0x07	; 7
 1f0:	59 f4       	brne	.+22     	; 0x208 <USART_Transmit_number+0xd0>
 1f2:	81 11       	cpse	r24, r1
 1f4:	03 c0       	rjmp	.+6      	; 0x1fc <USART_Transmit_number+0xc4>
 1f6:	87 e3       	ldi	r24, 0x37	; 55
		else if(USART_NUM == 1) USART1_Transmit('7');
 1f8:	76 cf       	rjmp	.-276    	; 0xe6 <USART0_Transmit>
 1fa:	08 95       	ret
 1fc:	81 30       	cpi	r24, 0x01	; 1
 1fe:	09 f0       	breq	.+2      	; 0x202 <USART_Transmit_number+0xca>
 200:	45 c0       	rjmp	.+138    	; 0x28c <USART_Transmit_number+0x154>
 202:	87 e3       	ldi	r24, 0x37	; 55
	}
	else if(num == 8){
 204:	91 cf       	rjmp	.-222    	; 0x128 <USART1_Transmit>
 206:	08 95       	ret
		if(USART_NUM == 0) USART0_Transmit('8');
 208:	68 30       	cpi	r22, 0x08	; 8
 20a:	59 f4       	brne	.+22     	; 0x222 <USART_Transmit_number+0xea>
 20c:	81 11       	cpse	r24, r1
 20e:	03 c0       	rjmp	.+6      	; 0x216 <USART_Transmit_number+0xde>
		else if(USART_NUM == 1) USART1_Transmit('8');
 210:	88 e3       	ldi	r24, 0x38	; 56
 212:	69 cf       	rjmp	.-302    	; 0xe6 <USART0_Transmit>
 214:	08 95       	ret
 216:	81 30       	cpi	r24, 0x01	; 1
 218:	09 f0       	breq	.+2      	; 0x21c <USART_Transmit_number+0xe4>
 21a:	38 c0       	rjmp	.+112    	; 0x28c <USART_Transmit_number+0x154>
 21c:	88 e3       	ldi	r24, 0x38	; 56
	}
	else if(num == 9){
 21e:	84 cf       	rjmp	.-248    	; 0x128 <USART1_Transmit>
		if(USART_NUM == 0) USART0_Transmit('9');
 220:	08 95       	ret
 222:	69 30       	cpi	r22, 0x09	; 9
 224:	51 f4       	brne	.+20     	; 0x23a <USART_Transmit_number+0x102>
 226:	81 11       	cpse	r24, r1
 228:	03 c0       	rjmp	.+6      	; 0x230 <USART_Transmit_number+0xf8>
		else if(USART_NUM == 1) USART1_Transmit('9');
 22a:	89 e3       	ldi	r24, 0x39	; 57
 22c:	5c cf       	rjmp	.-328    	; 0xe6 <USART0_Transmit>
 22e:	08 95       	ret
 230:	81 30       	cpi	r24, 0x01	; 1
 232:	61 f5       	brne	.+88     	; 0x28c <USART_Transmit_number+0x154>
 234:	89 e3       	ldi	r24, 0x39	; 57
	}
	else if(num == 10){
 236:	78 cf       	rjmp	.-272    	; 0x128 <USART1_Transmit>
		if(USART_NUM == 0) USART0_Transmit_String("10");
 238:	08 95       	ret
 23a:	6a 30       	cpi	r22, 0x0A	; 10
 23c:	61 f4       	brne	.+24     	; 0x256 <USART_Transmit_number+0x11e>
 23e:	81 11       	cpse	r24, r1
 240:	04 c0       	rjmp	.+8      	; 0x24a <USART_Transmit_number+0x112>
 242:	80 e0       	ldi	r24, 0x00	; 0
		else if(USART_NUM == 1) USART0_Transmit_String("10");
 244:	91 e0       	ldi	r25, 0x01	; 1
 246:	53 cf       	rjmp	.-346    	; 0xee <USART0_Transmit_String>
 248:	08 95       	ret
 24a:	81 30       	cpi	r24, 0x01	; 1
 24c:	f9 f4       	brne	.+62     	; 0x28c <USART_Transmit_number+0x154>
 24e:	80 e0       	ldi	r24, 0x00	; 0
	}
	else if(num == 11){
 250:	91 e0       	ldi	r25, 0x01	; 1
 252:	4d cf       	rjmp	.-358    	; 0xee <USART0_Transmit_String>
		if(USART_NUM == 0) USART0_Transmit_String("11");
 254:	08 95       	ret
 256:	6b 30       	cpi	r22, 0x0B	; 11
 258:	61 f4       	brne	.+24     	; 0x272 <USART_Transmit_number+0x13a>
 25a:	81 11       	cpse	r24, r1
 25c:	04 c0       	rjmp	.+8      	; 0x266 <USART_Transmit_number+0x12e>
 25e:	83 e0       	ldi	r24, 0x03	; 3
		else if(USART_NUM == 1) USART0_Transmit_String("11");
 260:	91 e0       	ldi	r25, 0x01	; 1
 262:	45 cf       	rjmp	.-374    	; 0xee <USART0_Transmit_String>
 264:	08 95       	ret
 266:	81 30       	cpi	r24, 0x01	; 1
 268:	89 f4       	brne	.+34     	; 0x28c <USART_Transmit_number+0x154>
 26a:	83 e0       	ldi	r24, 0x03	; 3
 26c:	91 e0       	ldi	r25, 0x01	; 1
	}
	else if(num == 12){
 26e:	3f cf       	rjmp	.-386    	; 0xee <USART0_Transmit_String>
 270:	08 95       	ret
		if(USART_NUM == 0) USART0_Transmit_String("12");
 272:	6c 30       	cpi	r22, 0x0C	; 12
 274:	59 f4       	brne	.+22     	; 0x28c <USART_Transmit_number+0x154>
 276:	81 11       	cpse	r24, r1
 278:	04 c0       	rjmp	.+8      	; 0x282 <USART_Transmit_number+0x14a>
 27a:	86 e0       	ldi	r24, 0x06	; 6
 27c:	91 e0       	ldi	r25, 0x01	; 1
 27e:	37 cf       	rjmp	.-402    	; 0xee <USART0_Transmit_String>
		else if(USART_NUM == 1) USART0_Transmit_String("12");
 280:	08 95       	ret
 282:	81 30       	cpi	r24, 0x01	; 1
 284:	19 f4       	brne	.+6      	; 0x28c <USART_Transmit_number+0x154>
 286:	86 e0       	ldi	r24, 0x06	; 6
 288:	91 e0       	ldi	r25, 0x01	; 1
 28a:	31 cf       	rjmp	.-414    	; 0xee <USART0_Transmit_String>
 28c:	08 95       	ret

0000028e <USART1_Transmit_String>:
void USART1_Transmit(char data){
	while(!((UCSR1A)  & (1<<UDRE1))); // Wait for Data Register empty
	UDR1 = data;
}

void USART1_Transmit_String(char *str){
 28e:	cf 93       	push	r28
 290:	df 93       	push	r29
 292:	ec 01       	movw	r28, r24
	while(*str != '\0') USART1_Transmit(*str++);
 294:	88 81       	ld	r24, Y
 296:	88 23       	and	r24, r24
 298:	29 f0       	breq	.+10     	; 0x2a4 <USART1_Transmit_String+0x16>
 29a:	21 96       	adiw	r28, 0x01	; 1
 29c:	45 df       	rcall	.-374    	; 0x128 <USART1_Transmit>
 29e:	89 91       	ld	r24, Y+
 2a0:	81 11       	cpse	r24, r1
 2a2:	fc cf       	rjmp	.-8      	; 0x29c <USART1_Transmit_String+0xe>
}
 2a4:	df 91       	pop	r29
 2a6:	cf 91       	pop	r28
 2a8:	08 95       	ret

000002aa <USART1_Receive>:

char USART1_Receive(void){
	while(!(UCSR1A & (1<<RXC1))); // Wait for Receive Buffer is empty
 2aa:	eb e9       	ldi	r30, 0x9B	; 155
 2ac:	f0 e0       	ldi	r31, 0x00	; 0
 2ae:	80 81       	ld	r24, Z
 2b0:	88 23       	and	r24, r24
 2b2:	ec f7       	brge	.-6      	; 0x2ae <USART1_Receive+0x4>
	return UDR1;
 2b4:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
}
 2b8:	08 95       	ret

000002ba <main>:
	char owner;		// 0 = none(on field), 1 = player1, 2 = player2
	char opened;	// 0 = not opened(alive), 1 = opened(dead)
};

int main(void)
{
 2ba:	cf 93       	push	r28
 2bc:	df 93       	push	r29
 2be:	cd b7       	in	r28, 0x3d	; 61
 2c0:	de b7       	in	r29, 0x3e	; 62
 2c2:	c6 5c       	subi	r28, 0xC6	; 198
 2c4:	d1 09       	sbc	r29, r1
 2c6:	0f b6       	in	r0, 0x3f	; 63
 2c8:	f8 94       	cli
 2ca:	de bf       	out	0x3e, r29	; 62
 2cc:	0f be       	out	0x3f, r0	; 63
 2ce:	cd bf       	out	0x3d, r28	; 61
	USART0_Init(103);
 2d0:	87 e6       	ldi	r24, 0x67	; 103
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	ff de       	rcall	.-514    	; 0xd4 <USART0_Init>
	USART1_Init(103);
 2d6:	87 e6       	ldi	r24, 0x67	; 103
 2d8:	90 e0       	ldi	r25, 0x00	; 0
	Timer_Init();
 2da:	1b df       	rcall	.-458    	; 0x112 <USART1_Init>
 2dc:	f5 de       	rcall	.-534    	; 0xc8 <Timer_Init>
 2de:	fe 01       	movw	r30, r28
 2e0:	37 96       	adiw	r30, 0x07	; 7
	
	struct card_deck deck[NUM_CARD];
	struct card_deck p1_deck[NUM_CARD/2];
	struct card_deck p2_deck[NUM_CARD/2];
	
	for(int i=0;i<NUM_CARD;i++){				// 카드 덱 초기화
 2e2:	80 e0       	ldi	r24, 0x00	; 0
 2e4:	90 e0       	ldi	r25, 0x00	; 0
		if(i%2 == 0){
			deck[i].color = 0;
			deck[i].number = i/2;
		}
		else if(i%2 == 1){
			deck[i].color = 1;
 2e6:	41 e0       	ldi	r20, 0x01	; 1
	struct card_deck deck[NUM_CARD];
	struct card_deck p1_deck[NUM_CARD/2];
	struct card_deck p2_deck[NUM_CARD/2];
	
	for(int i=0;i<NUM_CARD;i++){				// 카드 덱 초기화
		if(i%2 == 0){
 2e8:	80 fd       	sbrc	r24, 0
 2ea:	0c c0       	rjmp	.+24     	; 0x304 <main+0x4a>
 2ec:	df 01       	movw	r26, r30
			deck[i].color = 0;
 2ee:	10 82       	st	Z, r1
			deck[i].number = i/2;
 2f0:	9c 01       	movw	r18, r24
 2f2:	99 23       	and	r25, r25
 2f4:	14 f4       	brge	.+4      	; 0x2fa <main+0x40>
 2f6:	2f 5f       	subi	r18, 0xFF	; 255
 2f8:	3f 4f       	sbci	r19, 0xFF	; 255
 2fa:	35 95       	asr	r19
 2fc:	27 95       	ror	r18
 2fe:	11 96       	adiw	r26, 0x01	; 1
 300:	2c 93       	st	X, r18
 302:	19 c0       	rjmp	.+50     	; 0x336 <main+0x7c>
		}
		else if(i%2 == 1){
 304:	9c 01       	movw	r18, r24
 306:	21 70       	andi	r18, 0x01	; 1
 308:	30 78       	andi	r19, 0x80	; 128
 30a:	33 23       	and	r19, r19
 30c:	34 f4       	brge	.+12     	; 0x31a <main+0x60>
 30e:	21 50       	subi	r18, 0x01	; 1
 310:	31 09       	sbc	r19, r1
 312:	2e 6f       	ori	r18, 0xFE	; 254
 314:	3f 6f       	ori	r19, 0xFF	; 255
 316:	2f 5f       	subi	r18, 0xFF	; 255
 318:	3f 4f       	sbci	r19, 0xFF	; 255
 31a:	21 30       	cpi	r18, 0x01	; 1
 31c:	31 05       	cpc	r19, r1
 31e:	59 f4       	brne	.+22     	; 0x336 <main+0x7c>
 320:	df 01       	movw	r26, r30
			deck[i].color = 1;
 322:	40 83       	st	Z, r20
			deck[i].number = i/2;
 324:	9c 01       	movw	r18, r24
 326:	99 23       	and	r25, r25
 328:	14 f4       	brge	.+4      	; 0x32e <main+0x74>
 32a:	2f 5f       	subi	r18, 0xFF	; 255
 32c:	3f 4f       	sbci	r19, 0xFF	; 255
 32e:	35 95       	asr	r19
 330:	27 95       	ror	r18
 332:	11 96       	adiw	r26, 0x01	; 1
 334:	2c 93       	st	X, r18
		}
		deck[i].owner = 0;
 336:	12 82       	std	Z+2, r1	; 0x02
		deck[i].opened = 0;
 338:	13 82       	std	Z+3, r1	; 0x03
	
	struct card_deck deck[NUM_CARD];
	struct card_deck p1_deck[NUM_CARD/2];
	struct card_deck p2_deck[NUM_CARD/2];
	
	for(int i=0;i<NUM_CARD;i++){				// 카드 덱 초기화
 33a:	01 96       	adiw	r24, 0x01	; 1
 33c:	34 96       	adiw	r30, 0x04	; 4
 33e:	88 31       	cpi	r24, 0x18	; 24
 340:	91 05       	cpc	r25, r1
 342:	91 f6       	brne	.-92     	; 0x2e8 <main+0x2e>
 344:	8f ef       	ldi	r24, 0xFF	; 255
 346:	ac 96       	adiw	r28, 0x2c	; 44
 348:	8f af       	std	Y+63, r24	; 0x3f
 34a:	ac 97       	sbiw	r28, 0x2c	; 44
 34c:	ad 96       	adiw	r28, 0x2d	; 45
 34e:	8f af       	std	Y+63, r24	; 0x3f
 350:	ad 97       	sbiw	r28, 0x2d	; 45
 352:	a1 2c       	mov	r10, r1
 354:	71 2c       	mov	r7, r1
				_delay_ms(1);
				state = 7;
			}
		} // state 8 end
		if(state == 7){ // state 5
			USART_Transmit_number(1,p2_deck[(int)get_number_1].number);
 356:	ce 01       	movw	r24, r28
 358:	01 96       	adiw	r24, 0x01	; 1
 35a:	6c 01       	movw	r12, r24
 35c:	1c 01       	movw	r2, r24
 35e:	22 0c       	add	r2, r2
 360:	33 1c       	adc	r3, r3
 362:	22 0c       	add	r2, r2
 364:	33 1c       	adc	r3, r3
 366:	e7 e9       	ldi	r30, 0x97	; 151
 368:	f0 e0       	ldi	r31, 0x00	; 0
 36a:	ec 0f       	add	r30, r28
 36c:	fd 1f       	adc	r31, r29
 36e:	2e 0e       	add	r2, r30
 370:	3f 1e       	adc	r3, r31
 372:	ff ef       	ldi	r31, 0xFF	; 255
 374:	2f 1a       	sub	r2, r31
 376:	3f 0a       	sbc	r3, r31
			_delay_ms(1);
			if(p2_deck[(int)get_number_1].number == get_number_2) USART1_Transmit_String("\r\nCorrect\r\n");
 378:	2e 01       	movw	r4, r28
 37a:	84 e0       	ldi	r24, 0x04	; 4
 37c:	48 0e       	add	r4, r24
 37e:	51 1c       	adc	r5, r1
			if(rx == 'Y') state = 2;
		} // state 1 end
		if(state == 2){ // state 2 : give card to players
			while(p1_card_cnt < 4){	// give Player 1 Cards
				random_value = TCNT0%NUM_CARD;
				if(deck[random_value].owner == 0){
 380:	0f 2e       	mov	r0, r31
 382:	fb ea       	ldi	r31, 0xAB	; 171
 384:	bf 2e       	mov	r11, r31
 386:	f0 2d       	mov	r31, r0
 388:	7e 01       	movw	r14, r28
 38a:	97 e6       	ldi	r25, 0x67	; 103
 38c:	e9 0e       	add	r14, r25
 38e:	f1 1c       	adc	r15, r1
		p1_deck[1].owner = 2;
		p1_deck[1].opened = 0;
	}
    while (1) 
    {
		if(state == 0){ // state 0 : checking player 1 connected
 390:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <__data_end>
 394:	90 91 9f 01 	lds	r25, 0x019F	; 0x80019f <__data_end+0x1>
 398:	89 2b       	or	r24, r25
			USART0_Transmit_String("Press Y to Start\r\n");
 39a:	81 f4       	brne	.+32     	; 0x3bc <main+0x102>
 39c:	89 e0       	ldi	r24, 0x09	; 9
 39e:	91 e0       	ldi	r25, 0x01	; 1
			USART1_Transmit_String("Waiting for Player 1\r\n");
 3a0:	a6 de       	rcall	.-692    	; 0xee <USART0_Transmit_String>
 3a2:	8c e1       	ldi	r24, 0x1C	; 28
 3a4:	91 e0       	ldi	r25, 0x01	; 1
 3a6:	73 df       	rcall	.-282    	; 0x28e <USART1_Transmit_String>
			rx = USART0_Receive();
 3a8:	b0 de       	rcall	.-672    	; 0x10a <USART0_Receive>
 3aa:	89 35       	cpi	r24, 0x59	; 89
			if(rx == 'Y') state = 1;
 3ac:	39 f4       	brne	.+14     	; 0x3bc <main+0x102>
 3ae:	81 e0       	ldi	r24, 0x01	; 1
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	90 93 9f 01 	sts	0x019F, r25	; 0x80019f <__data_end+0x1>
 3b6:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <__data_end>
 3ba:	06 c0       	rjmp	.+12     	; 0x3c8 <main+0x10e>
 3bc:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <__data_end>
		} // state 0 end
		if(state == 1){ // state 1 : checking player 1 connected
 3c0:	90 91 9f 01 	lds	r25, 0x019F	; 0x80019f <__data_end+0x1>
 3c4:	01 97       	sbiw	r24, 0x01	; 1
 3c6:	81 f4       	brne	.+32     	; 0x3e8 <main+0x12e>
			USART0_Transmit_String("Waiting for Player 0\r\n");
 3c8:	83 e3       	ldi	r24, 0x33	; 51
 3ca:	91 e0       	ldi	r25, 0x01	; 1
 3cc:	90 de       	rcall	.-736    	; 0xee <USART0_Transmit_String>
			USART1_Transmit_String("Press Y to Start\r\n");
 3ce:	89 e0       	ldi	r24, 0x09	; 9
 3d0:	91 e0       	ldi	r25, 0x01	; 1
 3d2:	5d df       	rcall	.-326    	; 0x28e <USART1_Transmit_String>
 3d4:	6a df       	rcall	.-300    	; 0x2aa <USART1_Receive>
			rx = USART1_Receive();
 3d6:	89 35       	cpi	r24, 0x59	; 89
 3d8:	39 f4       	brne	.+14     	; 0x3e8 <main+0x12e>
			if(rx == 'Y') state = 2;
 3da:	82 e0       	ldi	r24, 0x02	; 2
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	90 93 9f 01 	sts	0x019F, r25	; 0x80019f <__data_end+0x1>
 3e2:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <__data_end>
 3e6:	08 c0       	rjmp	.+16     	; 0x3f8 <main+0x13e>
 3e8:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <__data_end>
		} // state 1 end
		if(state == 2){ // state 2 : give card to players
 3ec:	90 91 9f 01 	lds	r25, 0x019F	; 0x80019f <__data_end+0x1>
 3f0:	82 30       	cpi	r24, 0x02	; 2
 3f2:	91 05       	cpc	r25, r1
 3f4:	09 f0       	breq	.+2      	; 0x3f8 <main+0x13e>
 3f6:	0f c1       	rjmp	.+542    	; 0x616 <__LOCK_REGION_LENGTH__+0x216>
 3f8:	48 e1       	ldi	r20, 0x18	; 24
 3fa:	51 e0       	ldi	r21, 0x01	; 1
			while(p1_card_cnt < 4){	// give Player 1 Cards
				random_value = TCNT0%NUM_CARD;
				if(deck[random_value].owner == 0){
 3fc:	1d c0       	rjmp	.+58     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
					deck[random_value].owner = 1;
 3fe:	82 b7       	in	r24, 0x32	; 50
 400:	8b 9d       	mul	r24, r11
			rx = USART1_Receive();
			if(rx == 'Y') state = 2;
		} // state 1 end
		if(state == 2){ // state 2 : give card to players
			while(p1_card_cnt < 4){	// give Player 1 Cards
				random_value = TCNT0%NUM_CARD;
 402:	91 2d       	mov	r25, r1
				if(deck[random_value].owner == 0){
 404:	11 24       	eor	r1, r1
 406:	92 95       	swap	r25
 408:	9f 70       	andi	r25, 0x0F	; 15
 40a:	94 9f       	mul	r25, r20
 40c:	80 19       	sub	r24, r0
 40e:	11 24       	eor	r1, r1
 410:	28 2f       	mov	r18, r24
 412:	30 e0       	ldi	r19, 0x00	; 0
 414:	f6 01       	movw	r30, r12
 416:	94 e0       	ldi	r25, 0x04	; 4
 418:	89 9f       	mul	r24, r25
 41a:	e0 0d       	add	r30, r0
 41c:	f1 1d       	adc	r31, r1
 41e:	11 24       	eor	r1, r1
 420:	80 85       	ldd	r24, Z+8	; 0x08
 422:	81 11       	cpse	r24, r1
 424:	ec cf       	rjmp	.-40     	; 0x3fe <main+0x144>
 426:	22 0f       	add	r18, r18
 428:	33 1f       	adc	r19, r19
					deck[random_value].owner = 1;
 42a:	22 0f       	add	r18, r18
 42c:	33 1f       	adc	r19, r19
 42e:	f6 01       	movw	r30, r12
 430:	e2 0f       	add	r30, r18
 432:	f3 1f       	adc	r31, r19
 434:	50 87       	std	Z+8, r21	; 0x08
 436:	73 94       	inc	r7
 438:	e3 e0       	ldi	r30, 0x03	; 3
					p1_card_cnt++;
 43a:	e7 15       	cp	r30, r7
			USART1_Transmit_String("Press Y to Start\r\n");
			rx = USART1_Receive();
			if(rx == 'Y') state = 2;
		} // state 1 end
		if(state == 2){ // state 2 : give card to players
			while(p1_card_cnt < 4){	// give Player 1 Cards
 43c:	98 f1       	brcs	.+102    	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
 43e:	82 b7       	in	r24, 0x32	; 50
 440:	8b 9d       	mul	r24, r11
				random_value = TCNT0%NUM_CARD;
 442:	91 2d       	mov	r25, r1
				if(deck[random_value].owner == 0){
 444:	11 24       	eor	r1, r1
 446:	92 95       	swap	r25
 448:	9f 70       	andi	r25, 0x0F	; 15
 44a:	94 9f       	mul	r25, r20
 44c:	80 19       	sub	r24, r0
 44e:	11 24       	eor	r1, r1
 450:	28 2f       	mov	r18, r24
 452:	30 e0       	ldi	r19, 0x00	; 0
 454:	f6 01       	movw	r30, r12
 456:	94 e0       	ldi	r25, 0x04	; 4
 458:	89 9f       	mul	r24, r25
 45a:	e0 0d       	add	r30, r0
 45c:	f1 1d       	adc	r31, r1
 45e:	11 24       	eor	r1, r1
 460:	80 85       	ldd	r24, Z+8	; 0x08
 462:	81 11       	cpse	r24, r1
 464:	cc cf       	rjmp	.-104    	; 0x3fe <main+0x144>
 466:	df cf       	rjmp	.-66     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 468:	82 b7       	in	r24, 0x32	; 50
 46a:	8b 9d       	mul	r24, r11
					deck[random_value].owner = 1;
					p1_card_cnt++;
				}
			}
			while(p2_card_cnt < 4){	// give Player 2 Cards
				random_value = TCNT0%NUM_CARD;
 46c:	91 2d       	mov	r25, r1
				if(deck[random_value].owner == 0){
 46e:	11 24       	eor	r1, r1
 470:	92 95       	swap	r25
 472:	9f 70       	andi	r25, 0x0F	; 15
 474:	94 9f       	mul	r25, r20
 476:	80 19       	sub	r24, r0
 478:	11 24       	eor	r1, r1
 47a:	28 2f       	mov	r18, r24
 47c:	30 e0       	ldi	r19, 0x00	; 0
 47e:	f6 01       	movw	r30, r12
 480:	94 e0       	ldi	r25, 0x04	; 4
 482:	89 9f       	mul	r24, r25
 484:	e0 0d       	add	r30, r0
 486:	f1 1d       	adc	r31, r1
 488:	11 24       	eor	r1, r1
 48a:	80 85       	ldd	r24, Z+8	; 0x08
 48c:	81 11       	cpse	r24, r1
 48e:	ec cf       	rjmp	.-40     	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
 490:	22 0f       	add	r18, r18
 492:	33 1f       	adc	r19, r19
					deck[random_value].owner = 2;
 494:	22 0f       	add	r18, r18
 496:	33 1f       	adc	r19, r19
 498:	f6 01       	movw	r30, r12
 49a:	e2 0f       	add	r30, r18
 49c:	f3 1f       	adc	r31, r19
 49e:	50 87       	std	Z+8, r21	; 0x08
 4a0:	a3 94       	inc	r10
 4a2:	02 c0       	rjmp	.+4      	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
					p2_card_cnt++;
 4a4:	48 e1       	ldi	r20, 0x18	; 24
					p1_card_cnt++;
				}
			}
			while(p2_card_cnt < 4){	// give Player 2 Cards
				random_value = TCNT0%NUM_CARD;
				if(deck[random_value].owner == 0){
 4a6:	52 e0       	ldi	r21, 0x02	; 2
					deck[random_value].owner = 2;
 4a8:	e3 e0       	ldi	r30, 0x03	; 3
				if(deck[random_value].owner == 0){
					deck[random_value].owner = 1;
					p1_card_cnt++;
				}
			}
			while(p2_card_cnt < 4){	// give Player 2 Cards
 4aa:	ea 15       	cp	r30, r10
 4ac:	40 f4       	brcc	.+16     	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
 4ae:	8a e4       	ldi	r24, 0x4A	; 74
					deck[random_value].owner = 2;
					p2_card_cnt++;
				}
			}
			temp = 0;
			USART0_Transmit_String("P1 Deck : ");
 4b0:	91 e0       	ldi	r25, 0x01	; 1
 4b2:	1d de       	rcall	.-966    	; 0xee <USART0_Transmit_String>
 4b4:	8e 01       	movw	r16, r28
 4b6:	09 5f       	subi	r16, 0xF9	; 249
 4b8:	1f 4f       	sbci	r17, 0xFF	; 255
 4ba:	61 2c       	mov	r6, r1
 4bc:	15 c0       	rjmp	.+42     	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
				if(deck[random_value].owner == 0){
					deck[random_value].owner = 2;
					p2_card_cnt++;
				}
			}
			temp = 0;
 4be:	82 b7       	in	r24, 0x32	; 50
 4c0:	8b 9d       	mul	r24, r11
					deck[random_value].owner = 1;
					p1_card_cnt++;
				}
			}
			while(p2_card_cnt < 4){	// give Player 2 Cards
				random_value = TCNT0%NUM_CARD;
 4c2:	91 2d       	mov	r25, r1
				if(deck[random_value].owner == 0){
 4c4:	11 24       	eor	r1, r1
 4c6:	92 95       	swap	r25
 4c8:	9f 70       	andi	r25, 0x0F	; 15
 4ca:	94 9f       	mul	r25, r20
 4cc:	80 19       	sub	r24, r0
 4ce:	11 24       	eor	r1, r1
 4d0:	28 2f       	mov	r18, r24
 4d2:	30 e0       	ldi	r19, 0x00	; 0
 4d4:	f6 01       	movw	r30, r12
 4d6:	94 e0       	ldi	r25, 0x04	; 4
 4d8:	89 9f       	mul	r24, r25
 4da:	e0 0d       	add	r30, r0
 4dc:	f1 1d       	adc	r31, r1
 4de:	11 24       	eor	r1, r1
 4e0:	80 85       	ldd	r24, Z+8	; 0x08
 4e2:	81 11       	cpse	r24, r1
 4e4:	c1 cf       	rjmp	.-126    	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
 4e6:	d4 cf       	rjmp	.-88     	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
 4e8:	f8 01       	movw	r30, r16
 4ea:	82 81       	ldd	r24, Z+2	; 0x02
				}
			}
			temp = 0;
			USART0_Transmit_String("P1 Deck : ");
			for(int i=0; i<NUM_CARD; i++){
				if(deck[i].owner == 1){
 4ec:	81 30       	cpi	r24, 0x01	; 1
 4ee:	61 f5       	brne	.+88     	; 0x548 <__LOCK_REGION_LENGTH__+0x148>
 4f0:	97 01       	movw	r18, r14
 4f2:	f4 e0       	ldi	r31, 0x04	; 4
					p1_deck[temp] = deck[i];
 4f4:	6f 9e       	mul	r6, r31
 4f6:	20 0d       	add	r18, r0
 4f8:	31 1d       	adc	r19, r1
 4fa:	11 24       	eor	r1, r1
 4fc:	f8 01       	movw	r30, r16
 4fe:	80 81       	ld	r24, Z
 500:	91 81       	ldd	r25, Z+1	; 0x01
 502:	a2 81       	ldd	r26, Z+2	; 0x02
 504:	b3 81       	ldd	r27, Z+3	; 0x03
 506:	f9 01       	movw	r30, r18
 508:	80 83       	st	Z, r24
 50a:	91 83       	std	Z+1, r25	; 0x01
 50c:	a2 83       	std	Z+2, r26	; 0x02
 50e:	b3 83       	std	Z+3, r27	; 0x03
 510:	63 94       	inc	r6
 512:	47 01       	movw	r8, r14
					temp++;
 514:	f4 e0       	ldi	r31, 0x04	; 4
					USART_Transmit_number(0, p1_deck[temp].color);
 516:	6f 9e       	mul	r6, r31
 518:	80 0c       	add	r8, r0
 51a:	91 1c       	adc	r9, r1
 51c:	11 24       	eor	r1, r1
 51e:	f4 01       	movw	r30, r8
 520:	60 81       	ld	r22, Z
 522:	70 e0       	ldi	r23, 0x00	; 0
 524:	80 e0       	ldi	r24, 0x00	; 0
 526:	90 e0       	ldi	r25, 0x00	; 0
 528:	07 de       	rcall	.-1010   	; 0x138 <USART_Transmit_number>
					USART_Transmit_number(0, p1_deck[temp].number);
 52a:	f4 01       	movw	r30, r8
 52c:	61 81       	ldd	r22, Z+1	; 0x01
 52e:	70 e0       	ldi	r23, 0x00	; 0
 530:	80 e0       	ldi	r24, 0x00	; 0
 532:	90 e0       	ldi	r25, 0x00	; 0
 534:	01 de       	rcall	.-1022   	; 0x138 <USART_Transmit_number>
 536:	85 e5       	ldi	r24, 0x55	; 85
					USART0_Transmit_String("   ");
 538:	91 e0       	ldi	r25, 0x01	; 1
 53a:	d9 dd       	rcall	.-1102   	; 0xee <USART0_Transmit_String>
 53c:	83 ec       	ldi	r24, 0xC3	; 195
 53e:	99 e0       	ldi	r25, 0x09	; 9
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 540:	01 97       	sbiw	r24, 0x01	; 1
 542:	f1 f7       	brne	.-4      	; 0x540 <__LOCK_REGION_LENGTH__+0x140>
 544:	00 c0       	rjmp	.+0      	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
 546:	00 00       	nop
 548:	0c 5f       	subi	r16, 0xFC	; 252
 54a:	1f 4f       	sbci	r17, 0xFF	; 255
 54c:	e0 16       	cp	r14, r16
					p2_card_cnt++;
				}
			}
			temp = 0;
			USART0_Transmit_String("P1 Deck : ");
			for(int i=0; i<NUM_CARD; i++){
 54e:	f1 06       	cpc	r15, r17
 550:	59 f6       	brne	.-106    	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
 552:	89 e5       	ldi	r24, 0x59	; 89
					USART0_Transmit_String("   ");
					_delay_ms(10);
				}
			}
			temp = 0;
			USART1_Transmit_String("P2 Deck : ");
 554:	91 e0       	ldi	r25, 0x01	; 1
 556:	9b de       	rcall	.-714    	; 0x28e <USART1_Transmit_String>
 558:	8e 01       	movw	r16, r28
 55a:	09 5f       	subi	r16, 0xF9	; 249
 55c:	1f 4f       	sbci	r17, 0xFF	; 255
 55e:	61 2c       	mov	r6, r1
 560:	f8 01       	movw	r30, r16
					USART_Transmit_number(0, p1_deck[temp].number);
					USART0_Transmit_String("   ");
					_delay_ms(10);
				}
			}
			temp = 0;
 562:	82 81       	ldd	r24, Z+2	; 0x02
			USART1_Transmit_String("P2 Deck : ");
			for(int i=0; i<NUM_CARD; i++){
				if(deck[i].owner == 2){
 564:	82 30       	cpi	r24, 0x02	; 2
 566:	51 f5       	brne	.+84     	; 0x5bc <__LOCK_REGION_LENGTH__+0x1bc>
 568:	0f 2e       	mov	r0, r31
 56a:	f7 e9       	ldi	r31, 0x97	; 151
					p2_deck[temp] = deck[i];
 56c:	8f 2e       	mov	r8, r31
 56e:	91 2c       	mov	r9, r1
 570:	f0 2d       	mov	r31, r0
 572:	8c 0e       	add	r8, r28
 574:	9d 1e       	adc	r9, r29
 576:	f4 e0       	ldi	r31, 0x04	; 4
 578:	6f 9e       	mul	r6, r31
 57a:	80 0c       	add	r8, r0
 57c:	91 1c       	adc	r9, r1
 57e:	11 24       	eor	r1, r1
 580:	f8 01       	movw	r30, r16
 582:	60 81       	ld	r22, Z
 584:	21 81       	ldd	r18, Z+1	; 0x01
 586:	98 2f       	mov	r25, r24
 588:	83 81       	ldd	r24, Z+3	; 0x03
 58a:	f4 01       	movw	r30, r8
 58c:	60 83       	st	Z, r22
 58e:	21 83       	std	Z+1, r18	; 0x01
 590:	92 83       	std	Z+2, r25	; 0x02
 592:	83 83       	std	Z+3, r24	; 0x03
					USART_Transmit_number(1, p2_deck[temp].color);
 594:	70 e0       	ldi	r23, 0x00	; 0
 596:	81 e0       	ldi	r24, 0x01	; 1
 598:	90 e0       	ldi	r25, 0x00	; 0
 59a:	ce dd       	rcall	.-1124   	; 0x138 <USART_Transmit_number>
 59c:	f4 01       	movw	r30, r8
					USART_Transmit_number(1, p2_deck[temp].number);
 59e:	61 81       	ldd	r22, Z+1	; 0x01
 5a0:	70 e0       	ldi	r23, 0x00	; 0
 5a2:	81 e0       	ldi	r24, 0x01	; 1
 5a4:	90 e0       	ldi	r25, 0x00	; 0
 5a6:	c8 dd       	rcall	.-1136   	; 0x138 <USART_Transmit_number>
 5a8:	85 e5       	ldi	r24, 0x55	; 85
 5aa:	91 e0       	ldi	r25, 0x01	; 1
					USART1_Transmit_String("   ");
 5ac:	70 de       	rcall	.-800    	; 0x28e <USART1_Transmit_String>
 5ae:	83 ec       	ldi	r24, 0xC3	; 195
 5b0:	99 e0       	ldi	r25, 0x09	; 9
 5b2:	01 97       	sbiw	r24, 0x01	; 1
 5b4:	f1 f7       	brne	.-4      	; 0x5b2 <__LOCK_REGION_LENGTH__+0x1b2>
 5b6:	00 c0       	rjmp	.+0      	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
 5b8:	00 00       	nop
 5ba:	63 94       	inc	r6
					_delay_ms(10);
					temp++;
 5bc:	0c 5f       	subi	r16, 0xFC	; 252
 5be:	1f 4f       	sbci	r17, 0xFF	; 255
 5c0:	e0 16       	cp	r14, r16
					_delay_ms(10);
				}
			}
			temp = 0;
			USART1_Transmit_String("P2 Deck : ");
			for(int i=0; i<NUM_CARD; i++){
 5c2:	f1 06       	cpc	r15, r17
 5c4:	69 f6       	brne	.-102    	; 0x560 <__LOCK_REGION_LENGTH__+0x160>
 5c6:	87 e4       	ldi	r24, 0x47	; 71
					USART1_Transmit_String("   ");
					_delay_ms(10);
					temp++;
				}
			}
			USART1_Transmit_String("\r\n");
 5c8:	91 e0       	ldi	r25, 0x01	; 1
 5ca:	61 de       	rcall	.-830    	; 0x28e <USART1_Transmit_String>
 5cc:	89 e5       	ldi	r24, 0x59	; 89
			USART1_Transmit_String("P2 Deck : ");
 5ce:	91 e0       	ldi	r25, 0x01	; 1
 5d0:	5e de       	rcall	.-836    	; 0x28e <USART1_Transmit_String>
 5d2:	8e 01       	movw	r16, r28
 5d4:	09 56       	subi	r16, 0x69	; 105
 5d6:	1f 4f       	sbci	r17, 0xFF	; 255
 5d8:	48 01       	movw	r8, r16
 5da:	90 e1       	ldi	r25, 0x10	; 16
 5dc:	89 0e       	add	r8, r25
 5de:	91 1c       	adc	r9, r1
			for(int i=0;i<4;i++){
				USART_Transmit_number(1, p2_deck[i].color);
 5e0:	f8 01       	movw	r30, r16
 5e2:	60 81       	ld	r22, Z
 5e4:	70 e0       	ldi	r23, 0x00	; 0
 5e6:	81 e0       	ldi	r24, 0x01	; 1
 5e8:	90 e0       	ldi	r25, 0x00	; 0
 5ea:	a6 dd       	rcall	.-1204   	; 0x138 <USART_Transmit_number>
 5ec:	f8 01       	movw	r30, r16
				USART_Transmit_number(1, p2_deck[i].number);
 5ee:	61 81       	ldd	r22, Z+1	; 0x01
 5f0:	70 e0       	ldi	r23, 0x00	; 0
 5f2:	81 e0       	ldi	r24, 0x01	; 1
 5f4:	90 e0       	ldi	r25, 0x00	; 0
 5f6:	a0 dd       	rcall	.-1216   	; 0x138 <USART_Transmit_number>
 5f8:	85 e5       	ldi	r24, 0x55	; 85
				USART1_Transmit_String("   ");
 5fa:	91 e0       	ldi	r25, 0x01	; 1
 5fc:	48 de       	rcall	.-880    	; 0x28e <USART1_Transmit_String>
 5fe:	0c 5f       	subi	r16, 0xFC	; 252
 600:	1f 4f       	sbci	r17, 0xFF	; 255
 602:	08 15       	cp	r16, r8
 604:	19 05       	cpc	r17, r9
					temp++;
				}
			}
			USART1_Transmit_String("\r\n");
			USART1_Transmit_String("P2 Deck : ");
			for(int i=0;i<4;i++){
 606:	61 f7       	brne	.-40     	; 0x5e0 <__LOCK_REGION_LENGTH__+0x1e0>
 608:	83 e0       	ldi	r24, 0x03	; 3
 60a:	90 e0       	ldi	r25, 0x00	; 0
				USART_Transmit_number(1, p2_deck[i].color);
				USART_Transmit_number(1, p2_deck[i].number);
				USART1_Transmit_String("   ");
			}
			state = 3;
 60c:	90 93 9f 01 	sts	0x019F, r25	; 0x80019f <__data_end+0x1>
 610:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <__data_end>
 614:	02 c0       	rjmp	.+4      	; 0x61a <__LOCK_REGION_LENGTH__+0x21a>
 616:	03 97       	sbiw	r24, 0x03	; 3
 618:	79 f4       	brne	.+30     	; 0x638 <__LOCK_REGION_LENGTH__+0x238>
		} // state 2 end
		
		if(state == 3){ // state 3
 61a:	84 e6       	ldi	r24, 0x64	; 100
			USART0_Transmit_String("Choose Card to Open : "); // 몇 번째에 있는 카드 선택인지
 61c:	91 e0       	ldi	r25, 0x01	; 1
 61e:	67 dd       	rcall	.-1330   	; 0xee <USART0_Transmit_String>
 620:	74 dd       	rcall	.-1304   	; 0x10a <USART0_Receive>
 622:	80 53       	subi	r24, 0x30	; 48
			rx = USART0_Receive();
 624:	8a 30       	cpi	r24, 0x0A	; 10
 626:	40 f4       	brcc	.+16     	; 0x638 <__LOCK_REGION_LENGTH__+0x238>
			if((rx >= '0')&&(rx <= '9')){
 628:	89 83       	std	Y+1, r24	; 0x01
 62a:	84 e0       	ldi	r24, 0x04	; 4
 62c:	90 e0       	ldi	r25, 0x00	; 0
				get_number_1[0] = rx-48;
 62e:	90 93 9f 01 	sts	0x019F, r25	; 0x80019f <__data_end+0x1>
				state = 4;	
 632:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <__data_end>
 636:	06 c0       	rjmp	.+12     	; 0x644 <__LOCK_REGION_LENGTH__+0x244>
 638:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <__data_end>
			}
		} // state 3 end
		if(state == 4){ // state 4
 63c:	90 91 9f 01 	lds	r25, 0x019F	; 0x80019f <__data_end+0x1>
 640:	04 97       	sbiw	r24, 0x04	; 4
 642:	f9 f4       	brne	.+62     	; 0x682 <__LOCK_REGION_LENGTH__+0x282>
 644:	62 dd       	rcall	.-1340   	; 0x10a <USART0_Receive>
 646:	80 53       	subi	r24, 0x30	; 48
			rx = USART0_Receive();
 648:	8a 30       	cpi	r24, 0x0A	; 10
 64a:	d8 f4       	brcc	.+54     	; 0x682 <__LOCK_REGION_LENGTH__+0x282>
			if((rx >= '0')&&(rx <= '9')){
 64c:	8a 83       	std	Y+2, r24	; 0x02
 64e:	99 81       	ldd	r25, Y+1	; 0x01
 650:	99 0f       	add	r25, r25
				get_number_1[1] = rx-48;
 652:	69 2f       	mov	r22, r25
				get_number_1[2] = get_number_1[0]*10 + get_number_1[1];
 654:	66 0f       	add	r22, r22
 656:	66 0f       	add	r22, r22
 658:	69 0f       	add	r22, r25
 65a:	86 0f       	add	r24, r22
 65c:	8b 83       	std	Y+3, r24	; 0x03
 65e:	68 2f       	mov	r22, r24
 660:	70 e0       	ldi	r23, 0x00	; 0
 662:	81 e0       	ldi	r24, 0x01	; 1
				USART_Transmit_number(1,get_number_1[2]);
 664:	90 e0       	ldi	r25, 0x00	; 0
 666:	68 dd       	rcall	.-1328   	; 0x138 <USART_Transmit_number>
 668:	89 ef       	ldi	r24, 0xF9	; 249
 66a:	90 e0       	ldi	r25, 0x00	; 0
 66c:	01 97       	sbiw	r24, 0x01	; 1
 66e:	f1 f7       	brne	.-4      	; 0x66c <__LOCK_REGION_LENGTH__+0x26c>
 670:	00 c0       	rjmp	.+0      	; 0x672 <__LOCK_REGION_LENGTH__+0x272>
 672:	00 00       	nop
 674:	85 e0       	ldi	r24, 0x05	; 5
 676:	90 e0       	ldi	r25, 0x00	; 0
				_delay_ms(1);
				state = 5;
 678:	90 93 9f 01 	sts	0x019F, r25	; 0x80019f <__data_end+0x1>
 67c:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <__data_end>
 680:	06 c0       	rjmp	.+12     	; 0x68e <__LOCK_REGION_LENGTH__+0x28e>
 682:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <__data_end>
			}			
		} // state 4 end
		if(state == 5){ // state 5
 686:	90 91 9f 01 	lds	r25, 0x019F	; 0x80019f <__data_end+0x1>
 68a:	05 97       	sbiw	r24, 0x05	; 5
 68c:	79 f4       	brne	.+30     	; 0x6ac <__LOCK_REGION_LENGTH__+0x2ac>
 68e:	8b e7       	ldi	r24, 0x7B	; 123
			USART0_Transmit_String("\r\nNumber? : "); // 카드가 무엇인지
 690:	91 e0       	ldi	r25, 0x01	; 1
 692:	2d dd       	rcall	.-1446   	; 0xee <USART0_Transmit_String>
 694:	3a dd       	rcall	.-1420   	; 0x10a <USART0_Receive>
 696:	80 53       	subi	r24, 0x30	; 48
			rx = USART0_Receive();
 698:	8a 30       	cpi	r24, 0x0A	; 10
 69a:	40 f4       	brcc	.+16     	; 0x6ac <__LOCK_REGION_LENGTH__+0x2ac>
			if((rx >= '0')&&(rx <= '9')){
 69c:	8c 83       	std	Y+4, r24	; 0x04
 69e:	86 e0       	ldi	r24, 0x06	; 6
 6a0:	90 e0       	ldi	r25, 0x00	; 0
				get_number_2[0] = rx-48;
 6a2:	90 93 9f 01 	sts	0x019F, r25	; 0x80019f <__data_end+0x1>
				state = 6;
 6a6:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <__data_end>
 6aa:	06 c0       	rjmp	.+12     	; 0x6b8 <__LOCK_REGION_LENGTH__+0x2b8>
 6ac:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <__data_end>
			}
		} // state 5 end
		if(state == 6){ // state 8
 6b0:	90 91 9f 01 	lds	r25, 0x019F	; 0x80019f <__data_end+0x1>
 6b4:	06 97       	sbiw	r24, 0x06	; 6
 6b6:	f9 f4       	brne	.+62     	; 0x6f6 <__LOCK_REGION_LENGTH__+0x2f6>
 6b8:	28 dd       	rcall	.-1456   	; 0x10a <USART0_Receive>
 6ba:	80 53       	subi	r24, 0x30	; 48
			rx = USART0_Receive();
 6bc:	8a 30       	cpi	r24, 0x0A	; 10
 6be:	d8 f4       	brcc	.+54     	; 0x6f6 <__LOCK_REGION_LENGTH__+0x2f6>
			if((rx >= '0')&&(rx <= '9')){
 6c0:	8d 83       	std	Y+5, r24	; 0x05
 6c2:	9c 81       	ldd	r25, Y+4	; 0x04
 6c4:	99 0f       	add	r25, r25
				get_number_2[1] = rx-48;
 6c6:	69 2f       	mov	r22, r25
				get_number_2[2] = get_number_2[0]*10 + get_number_2[1];
 6c8:	66 0f       	add	r22, r22
 6ca:	66 0f       	add	r22, r22
 6cc:	69 0f       	add	r22, r25
 6ce:	86 0f       	add	r24, r22
 6d0:	8e 83       	std	Y+6, r24	; 0x06
 6d2:	68 2f       	mov	r22, r24
 6d4:	70 e0       	ldi	r23, 0x00	; 0
 6d6:	81 e0       	ldi	r24, 0x01	; 1
				USART_Transmit_number(1,get_number_2[2]);
 6d8:	90 e0       	ldi	r25, 0x00	; 0
 6da:	2e dd       	rcall	.-1444   	; 0x138 <USART_Transmit_number>
 6dc:	e9 ef       	ldi	r30, 0xF9	; 249
 6de:	f0 e0       	ldi	r31, 0x00	; 0
 6e0:	31 97       	sbiw	r30, 0x01	; 1
 6e2:	f1 f7       	brne	.-4      	; 0x6e0 <__LOCK_REGION_LENGTH__+0x2e0>
 6e4:	00 c0       	rjmp	.+0      	; 0x6e6 <__LOCK_REGION_LENGTH__+0x2e6>
 6e6:	00 00       	nop
 6e8:	87 e0       	ldi	r24, 0x07	; 7
 6ea:	90 e0       	ldi	r25, 0x00	; 0
 6ec:	90 93 9f 01 	sts	0x019F, r25	; 0x80019f <__data_end+0x1>
				_delay_ms(1);
				state = 7;
 6f0:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <__data_end>
 6f4:	08 c0       	rjmp	.+16     	; 0x706 <__LOCK_REGION_LENGTH__+0x306>
 6f6:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <__data_end>
			}
		} // state 8 end
		if(state == 7){ // state 5
 6fa:	90 91 9f 01 	lds	r25, 0x019F	; 0x80019f <__data_end+0x1>
 6fe:	87 30       	cpi	r24, 0x07	; 7
 700:	91 05       	cpc	r25, r1
 702:	09 f0       	breq	.+2      	; 0x706 <__LOCK_REGION_LENGTH__+0x306>
 704:	3c c0       	rjmp	.+120    	; 0x77e <__LOCK_REGION_LENGTH__+0x37e>
 706:	f1 01       	movw	r30, r2
			USART_Transmit_number(1,p2_deck[(int)get_number_1].number);
 708:	00 81       	ld	r16, Z
 70a:	10 e0       	ldi	r17, 0x00	; 0
 70c:	b8 01       	movw	r22, r16
 70e:	81 e0       	ldi	r24, 0x01	; 1
 710:	90 e0       	ldi	r25, 0x00	; 0
 712:	12 dd       	rcall	.-1500   	; 0x138 <USART_Transmit_number>
 714:	89 ef       	ldi	r24, 0xF9	; 249
 716:	90 e0       	ldi	r25, 0x00	; 0
 718:	01 97       	sbiw	r24, 0x01	; 1
 71a:	f1 f7       	brne	.-4      	; 0x718 <__LOCK_REGION_LENGTH__+0x318>
 71c:	00 c0       	rjmp	.+0      	; 0x71e <__LOCK_REGION_LENGTH__+0x31e>
 71e:	00 00       	nop
 720:	40 16       	cp	r4, r16
			_delay_ms(1);
			if(p2_deck[(int)get_number_1].number == get_number_2) USART1_Transmit_String("\r\nCorrect\r\n");
 722:	51 06       	cpc	r5, r17
 724:	21 f4       	brne	.+8      	; 0x72e <__LOCK_REGION_LENGTH__+0x32e>
 726:	88 e8       	ldi	r24, 0x88	; 136
 728:	91 e0       	ldi	r25, 0x01	; 1
 72a:	b1 dd       	rcall	.-1182   	; 0x28e <USART1_Transmit_String>
 72c:	03 c0       	rjmp	.+6      	; 0x734 <__LOCK_REGION_LENGTH__+0x334>
 72e:	84 e9       	ldi	r24, 0x94	; 148
			else USART1_Transmit_String("\r\nWRong\r\n");		
 730:	91 e0       	ldi	r25, 0x01	; 1
 732:	ad dd       	rcall	.-1190   	; 0x28e <USART1_Transmit_String>
 734:	88 e0       	ldi	r24, 0x08	; 8
			state = 8;
 736:	90 e0       	ldi	r25, 0x00	; 0
 738:	90 93 9f 01 	sts	0x019F, r25	; 0x80019f <__data_end+0x1>
 73c:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <__data_end>
 740:	8e 01       	movw	r16, r28
 742:	09 56       	subi	r16, 0x69	; 105
 744:	1f 4f       	sbci	r17, 0xFF	; 255
 746:	48 01       	movw	r8, r16
 748:	90 e1       	ldi	r25, 0x10	; 16
 74a:	89 0e       	add	r8, r25
 74c:	91 1c       	adc	r9, r1
 74e:	f8 01       	movw	r30, r16
		}
		if(state == 8){
			for(int i=0;i<4;i++){
				USART_Transmit_number(1,p2_deck[i].number);
 750:	61 81       	ldd	r22, Z+1	; 0x01
 752:	70 e0       	ldi	r23, 0x00	; 0
 754:	81 e0       	ldi	r24, 0x01	; 1
 756:	90 e0       	ldi	r25, 0x00	; 0
 758:	ef dc       	rcall	.-1570   	; 0x138 <USART_Transmit_number>
 75a:	86 e5       	ldi	r24, 0x56	; 86
 75c:	91 e0       	ldi	r25, 0x01	; 1
				USART1_Transmit_String("  ");
 75e:	97 dd       	rcall	.-1234   	; 0x28e <USART1_Transmit_String>
 760:	0c 5f       	subi	r16, 0xFC	; 252
 762:	1f 4f       	sbci	r17, 0xFF	; 255
 764:	08 15       	cp	r16, r8
 766:	19 05       	cpc	r17, r9
 768:	91 f7       	brne	.-28     	; 0x74e <__LOCK_REGION_LENGTH__+0x34e>
			if(p2_deck[(int)get_number_1].number == get_number_2) USART1_Transmit_String("\r\nCorrect\r\n");
			else USART1_Transmit_String("\r\nWRong\r\n");		
			state = 8;
		}
		if(state == 8){
			for(int i=0;i<4;i++){
 76a:	87 e4       	ldi	r24, 0x47	; 71
 76c:	91 e0       	ldi	r25, 0x01	; 1
 76e:	8f dd       	rcall	.-1250   	; 0x28e <USART1_Transmit_String>
				USART_Transmit_number(1,p2_deck[i].number);
				USART1_Transmit_String("  ");
			}
			USART1_Transmit_String("\r\n");
 770:	89 e0       	ldi	r24, 0x09	; 9
 772:	90 e0       	ldi	r25, 0x00	; 0
 774:	90 93 9f 01 	sts	0x019F, r25	; 0x80019f <__data_end+0x1>
			state = 9;
 778:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <__data_end>
 77c:	09 ce       	rjmp	.-1006   	; 0x390 <main+0xd6>
 77e:	08 97       	sbiw	r24, 0x08	; 8
 780:	09 f0       	breq	.+2      	; 0x784 <__LOCK_REGION_LENGTH__+0x384>
 782:	06 ce       	rjmp	.-1012   	; 0x390 <main+0xd6>
 784:	dd cf       	rjmp	.-70     	; 0x740 <__LOCK_REGION_LENGTH__+0x340>

00000786 <_exit>:
			_delay_ms(1);
			if(p2_deck[(int)get_number_1].number == get_number_2) USART1_Transmit_String("\r\nCorrect\r\n");
			else USART1_Transmit_String("\r\nWRong\r\n");		
			state = 8;
		}
		if(state == 8){
 786:	f8 94       	cli

00000788 <__stop_program>:
 788:	ff cf       	rjmp	.-2      	; 0x788 <__stop_program>
