
Game_DaVinci_Code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000058  00800100  00000536  000005ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000536  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800158  00800158  00000622  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000622  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000654  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00000690  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e9e  00000000  00000000  00000700  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008d5  00000000  00000000  0000159e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000719  00000000  00000000  00001e73  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000ec  00000000  00000000  0000258c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004ed  00000000  00000000  00002678  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000746  00000000  00000000  00002b65  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  000032ab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 e3       	ldi	r30, 0x36	; 54
  a0:	f5 e0       	ldi	r31, 0x05	; 5
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 35       	cpi	r26, 0x58	; 88
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a8 e5       	ldi	r26, 0x58	; 88
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	aa 35       	cpi	r26, 0x5A	; 90
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	fb d0       	rcall	.+502    	; 0x2ba <main>
  c4:	36 c2       	rjmp	.+1132   	; 0x532 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <Timer_Init>:
/*******************************************************************/
/*                         Timer Functions                         */
/*******************************************************************/

void Timer_Init(){
	TCCR0 = (4<<CS0);
  c8:	84 e0       	ldi	r24, 0x04	; 4
  ca:	83 bf       	out	0x33, r24	; 51
	TIMSK = (1<<TOIE0);
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	87 bf       	out	0x37, r24	; 55
	TCNT0 = 0;
  d0:	12 be       	out	0x32, r1	; 50
  d2:	08 95       	ret

000000d4 <USART0_Init>:
/*******************************************************************/
/*                         USART Functions                         */
/*******************************************************************/

void USART0_Init(unsigned int ubrr){ // Set USART0 Registers
	UBRR0H = (unsigned char)(ubrr >> 8); // UBRR's High bits
  d4:	90 93 90 00 	sts	0x0090, r25	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L = (unsigned char)(ubrr);		 // UBRR;s Low bits -> UBRR : 103
  d8:	89 b9       	out	0x09, r24	; 9
	UCSR0B = (1<<RXEN0) | (1<<TXEN0); // Receive Enable, Transmit Enable
  da:	88 e1       	ldi	r24, 0x18	; 24
  dc:	8a b9       	out	0x0a, r24	; 10
	UCSR0C = (1<<UCSZ00) | (1<<UCSZ01);			// Set Data bits to 8 bits
  de:	86 e0       	ldi	r24, 0x06	; 6
  e0:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
  e4:	08 95       	ret

000000e6 <USART0_Transmit>:
}

void USART0_Transmit(char data){
	while(!((UCSR0A)  & (1<<UDRE0))); // Wait for Data Register empty
  e6:	5d 9b       	sbis	0x0b, 5	; 11
  e8:	fe cf       	rjmp	.-4      	; 0xe6 <USART0_Transmit>
	UDR0 = data;
  ea:	8c b9       	out	0x0c, r24	; 12
  ec:	08 95       	ret

000000ee <USART0_Transmit_String>:
}

void USART0_Transmit_String(char *str){
  ee:	cf 93       	push	r28
  f0:	df 93       	push	r29
  f2:	ec 01       	movw	r28, r24
	while(*str != '\0') USART0_Transmit(*str++);
  f4:	88 81       	ld	r24, Y
  f6:	88 23       	and	r24, r24
  f8:	29 f0       	breq	.+10     	; 0x104 <USART0_Transmit_String+0x16>
  fa:	21 96       	adiw	r28, 0x01	; 1
  fc:	f4 df       	rcall	.-24     	; 0xe6 <USART0_Transmit>
  fe:	89 91       	ld	r24, Y+
 100:	81 11       	cpse	r24, r1
 102:	fc cf       	rjmp	.-8      	; 0xfc <USART0_Transmit_String+0xe>
}
 104:	df 91       	pop	r29
 106:	cf 91       	pop	r28
 108:	08 95       	ret

0000010a <USART0_Receive>:

char USART0_Receive(void){
	while(!(UCSR0A & (1<<RXC0))); // Wait for Receive Buffer is empty
 10a:	5f 9b       	sbis	0x0b, 7	; 11
 10c:	fe cf       	rjmp	.-4      	; 0x10a <USART0_Receive>
	return UDR0;
 10e:	8c b1       	in	r24, 0x0c	; 12
}
 110:	08 95       	ret

00000112 <USART1_Init>:

void USART1_Init(unsigned int ubrr){ // Set USART0 Registers
	UBRR1H = (unsigned char)(ubrr >> 8); // UBRR's High bits
 112:	90 93 98 00 	sts	0x0098, r25	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
	UBRR1L = (unsigned char)(ubrr);		 // UBRR;s Low bits -> UBRR : 103
 116:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
	UCSR1B = (1<<RXEN1) | (1<<TXEN1); // Receive Enable, Transmit Enable
 11a:	88 e1       	ldi	r24, 0x18	; 24
 11c:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
	UCSR1C = (1<<UCSZ10) | (1<<UCSZ11);			// Set Data bits to 8 bits
 120:	86 e0       	ldi	r24, 0x06	; 6
 122:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <__TEXT_REGION_LENGTH__+0x7e009d>
 126:	08 95       	ret

00000128 <USART1_Transmit>:
}

void USART1_Transmit(char data){
	while(!((UCSR1A)  & (1<<UDRE1))); // Wait for Data Register empty
 128:	eb e9       	ldi	r30, 0x9B	; 155
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	90 81       	ld	r25, Z
 12e:	95 ff       	sbrs	r25, 5
 130:	fd cf       	rjmp	.-6      	; 0x12c <USART1_Transmit+0x4>
	UDR1 = data;
 132:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
 136:	08 95       	ret

00000138 <USART_Transmit_number>:

/*******************************************************************/
/*                          USER Functions                         */
/*******************************************************************/
void USART_Transmit_number(char USART_NUM,char num){
	if(num == 0){
 138:	61 11       	cpse	r22, r1
 13a:	0b c0       	rjmp	.+22     	; 0x152 <USART_Transmit_number+0x1a>
		if(USART_NUM == 0) USART0_Transmit('0');
 13c:	81 11       	cpse	r24, r1
 13e:	03 c0       	rjmp	.+6      	; 0x146 <USART_Transmit_number+0xe>
 140:	80 e3       	ldi	r24, 0x30	; 48
 142:	d1 cf       	rjmp	.-94     	; 0xe6 <USART0_Transmit>
 144:	08 95       	ret
		else if(USART_NUM == 1) USART1_Transmit('0');
 146:	81 30       	cpi	r24, 0x01	; 1
 148:	09 f0       	breq	.+2      	; 0x14c <USART_Transmit_number+0x14>
 14a:	a0 c0       	rjmp	.+320    	; 0x28c <USART_Transmit_number+0x154>
 14c:	80 e3       	ldi	r24, 0x30	; 48
 14e:	ec cf       	rjmp	.-40     	; 0x128 <USART1_Transmit>
 150:	08 95       	ret
	}
	else if(num == 1){
 152:	61 30       	cpi	r22, 0x01	; 1
 154:	59 f4       	brne	.+22     	; 0x16c <USART_Transmit_number+0x34>
		if(USART_NUM == 0) USART0_Transmit('1');
 156:	81 11       	cpse	r24, r1
 158:	03 c0       	rjmp	.+6      	; 0x160 <USART_Transmit_number+0x28>
 15a:	81 e3       	ldi	r24, 0x31	; 49
 15c:	c4 cf       	rjmp	.-120    	; 0xe6 <USART0_Transmit>
 15e:	08 95       	ret
		else if(USART_NUM == 1) USART1_Transmit('1');
 160:	81 30       	cpi	r24, 0x01	; 1
 162:	09 f0       	breq	.+2      	; 0x166 <USART_Transmit_number+0x2e>
 164:	93 c0       	rjmp	.+294    	; 0x28c <USART_Transmit_number+0x154>
 166:	81 e3       	ldi	r24, 0x31	; 49
 168:	df cf       	rjmp	.-66     	; 0x128 <USART1_Transmit>
 16a:	08 95       	ret
	}
	else if(num == 2){
 16c:	62 30       	cpi	r22, 0x02	; 2
		if(USART_NUM == 0) USART0_Transmit('2');
 16e:	59 f4       	brne	.+22     	; 0x186 <USART_Transmit_number+0x4e>
 170:	81 11       	cpse	r24, r1
 172:	03 c0       	rjmp	.+6      	; 0x17a <USART_Transmit_number+0x42>
 174:	82 e3       	ldi	r24, 0x32	; 50
 176:	b7 cf       	rjmp	.-146    	; 0xe6 <USART0_Transmit>
		else if(USART_NUM == 1) USART1_Transmit('2');
 178:	08 95       	ret
 17a:	81 30       	cpi	r24, 0x01	; 1
 17c:	09 f0       	breq	.+2      	; 0x180 <USART_Transmit_number+0x48>
 17e:	86 c0       	rjmp	.+268    	; 0x28c <USART_Transmit_number+0x154>
 180:	82 e3       	ldi	r24, 0x32	; 50
 182:	d2 cf       	rjmp	.-92     	; 0x128 <USART1_Transmit>
	}
	else if(num == 3){
 184:	08 95       	ret
 186:	63 30       	cpi	r22, 0x03	; 3
		if(USART_NUM == 0) USART0_Transmit('3');
 188:	59 f4       	brne	.+22     	; 0x1a0 <USART_Transmit_number+0x68>
 18a:	81 11       	cpse	r24, r1
 18c:	03 c0       	rjmp	.+6      	; 0x194 <USART_Transmit_number+0x5c>
 18e:	83 e3       	ldi	r24, 0x33	; 51
 190:	aa cf       	rjmp	.-172    	; 0xe6 <USART0_Transmit>
		else if(USART_NUM == 1) USART1_Transmit('3');
 192:	08 95       	ret
 194:	81 30       	cpi	r24, 0x01	; 1
 196:	09 f0       	breq	.+2      	; 0x19a <USART_Transmit_number+0x62>
 198:	79 c0       	rjmp	.+242    	; 0x28c <USART_Transmit_number+0x154>
 19a:	83 e3       	ldi	r24, 0x33	; 51
 19c:	c5 cf       	rjmp	.-118    	; 0x128 <USART1_Transmit>
	}
	else if(num == 4){
 19e:	08 95       	ret
 1a0:	64 30       	cpi	r22, 0x04	; 4
		if(USART_NUM == 0) USART0_Transmit('4');
 1a2:	59 f4       	brne	.+22     	; 0x1ba <USART_Transmit_number+0x82>
 1a4:	81 11       	cpse	r24, r1
 1a6:	03 c0       	rjmp	.+6      	; 0x1ae <USART_Transmit_number+0x76>
 1a8:	84 e3       	ldi	r24, 0x34	; 52
 1aa:	9d cf       	rjmp	.-198    	; 0xe6 <USART0_Transmit>
		else if(USART_NUM == 1) USART1_Transmit('4');
 1ac:	08 95       	ret
 1ae:	81 30       	cpi	r24, 0x01	; 1
 1b0:	09 f0       	breq	.+2      	; 0x1b4 <USART_Transmit_number+0x7c>
 1b2:	6c c0       	rjmp	.+216    	; 0x28c <USART_Transmit_number+0x154>
 1b4:	84 e3       	ldi	r24, 0x34	; 52
 1b6:	b8 cf       	rjmp	.-144    	; 0x128 <USART1_Transmit>
	}
	else if(num == 5){
 1b8:	08 95       	ret
		if(USART_NUM == 0) USART0_Transmit('5');
 1ba:	65 30       	cpi	r22, 0x05	; 5
 1bc:	59 f4       	brne	.+22     	; 0x1d4 <USART_Transmit_number+0x9c>
 1be:	81 11       	cpse	r24, r1
 1c0:	03 c0       	rjmp	.+6      	; 0x1c8 <USART_Transmit_number+0x90>
 1c2:	85 e3       	ldi	r24, 0x35	; 53
 1c4:	90 cf       	rjmp	.-224    	; 0xe6 <USART0_Transmit>
		else if(USART_NUM == 1) USART1_Transmit('5');
 1c6:	08 95       	ret
 1c8:	81 30       	cpi	r24, 0x01	; 1
 1ca:	09 f0       	breq	.+2      	; 0x1ce <USART_Transmit_number+0x96>
 1cc:	5f c0       	rjmp	.+190    	; 0x28c <USART_Transmit_number+0x154>
 1ce:	85 e3       	ldi	r24, 0x35	; 53
	}
	else if(num == 6){
 1d0:	ab cf       	rjmp	.-170    	; 0x128 <USART1_Transmit>
 1d2:	08 95       	ret
		if(USART_NUM == 0) USART0_Transmit('6');
 1d4:	66 30       	cpi	r22, 0x06	; 6
 1d6:	59 f4       	brne	.+22     	; 0x1ee <USART_Transmit_number+0xb6>
 1d8:	81 11       	cpse	r24, r1
 1da:	03 c0       	rjmp	.+6      	; 0x1e2 <USART_Transmit_number+0xaa>
 1dc:	86 e3       	ldi	r24, 0x36	; 54
		else if(USART_NUM == 1) USART1_Transmit('6');
 1de:	83 cf       	rjmp	.-250    	; 0xe6 <USART0_Transmit>
 1e0:	08 95       	ret
 1e2:	81 30       	cpi	r24, 0x01	; 1
 1e4:	09 f0       	breq	.+2      	; 0x1e8 <USART_Transmit_number+0xb0>
 1e6:	52 c0       	rjmp	.+164    	; 0x28c <USART_Transmit_number+0x154>
 1e8:	86 e3       	ldi	r24, 0x36	; 54
	}
	else if(num == 7){
 1ea:	9e cf       	rjmp	.-196    	; 0x128 <USART1_Transmit>
 1ec:	08 95       	ret
		if(USART_NUM == 0) USART0_Transmit('7');
 1ee:	67 30       	cpi	r22, 0x07	; 7
 1f0:	59 f4       	brne	.+22     	; 0x208 <USART_Transmit_number+0xd0>
 1f2:	81 11       	cpse	r24, r1
 1f4:	03 c0       	rjmp	.+6      	; 0x1fc <USART_Transmit_number+0xc4>
 1f6:	87 e3       	ldi	r24, 0x37	; 55
		else if(USART_NUM == 1) USART1_Transmit('7');
 1f8:	76 cf       	rjmp	.-276    	; 0xe6 <USART0_Transmit>
 1fa:	08 95       	ret
 1fc:	81 30       	cpi	r24, 0x01	; 1
 1fe:	09 f0       	breq	.+2      	; 0x202 <USART_Transmit_number+0xca>
 200:	45 c0       	rjmp	.+138    	; 0x28c <USART_Transmit_number+0x154>
 202:	87 e3       	ldi	r24, 0x37	; 55
	}
	else if(num == 8){
 204:	91 cf       	rjmp	.-222    	; 0x128 <USART1_Transmit>
 206:	08 95       	ret
		if(USART_NUM == 0) USART0_Transmit('8');
 208:	68 30       	cpi	r22, 0x08	; 8
 20a:	59 f4       	brne	.+22     	; 0x222 <USART_Transmit_number+0xea>
 20c:	81 11       	cpse	r24, r1
 20e:	03 c0       	rjmp	.+6      	; 0x216 <USART_Transmit_number+0xde>
		else if(USART_NUM == 1) USART1_Transmit('8');
 210:	88 e3       	ldi	r24, 0x38	; 56
 212:	69 cf       	rjmp	.-302    	; 0xe6 <USART0_Transmit>
 214:	08 95       	ret
 216:	81 30       	cpi	r24, 0x01	; 1
 218:	09 f0       	breq	.+2      	; 0x21c <USART_Transmit_number+0xe4>
 21a:	38 c0       	rjmp	.+112    	; 0x28c <USART_Transmit_number+0x154>
 21c:	88 e3       	ldi	r24, 0x38	; 56
	}
	else if(num == 9){
 21e:	84 cf       	rjmp	.-248    	; 0x128 <USART1_Transmit>
		if(USART_NUM == 0) USART0_Transmit('9');
 220:	08 95       	ret
 222:	69 30       	cpi	r22, 0x09	; 9
 224:	51 f4       	brne	.+20     	; 0x23a <USART_Transmit_number+0x102>
 226:	81 11       	cpse	r24, r1
 228:	03 c0       	rjmp	.+6      	; 0x230 <USART_Transmit_number+0xf8>
		else if(USART_NUM == 1) USART1_Transmit('9');
 22a:	89 e3       	ldi	r24, 0x39	; 57
 22c:	5c cf       	rjmp	.-328    	; 0xe6 <USART0_Transmit>
 22e:	08 95       	ret
 230:	81 30       	cpi	r24, 0x01	; 1
 232:	61 f5       	brne	.+88     	; 0x28c <USART_Transmit_number+0x154>
 234:	89 e3       	ldi	r24, 0x39	; 57
	}
	else if(num == 10){
 236:	78 cf       	rjmp	.-272    	; 0x128 <USART1_Transmit>
		if(USART_NUM == 0) USART0_Transmit_String("10");
 238:	08 95       	ret
 23a:	6a 30       	cpi	r22, 0x0A	; 10
 23c:	61 f4       	brne	.+24     	; 0x256 <USART_Transmit_number+0x11e>
 23e:	81 11       	cpse	r24, r1
 240:	04 c0       	rjmp	.+8      	; 0x24a <USART_Transmit_number+0x112>
 242:	80 e0       	ldi	r24, 0x00	; 0
		else if(USART_NUM == 1) USART0_Transmit_String("10");
 244:	91 e0       	ldi	r25, 0x01	; 1
 246:	53 cf       	rjmp	.-346    	; 0xee <USART0_Transmit_String>
 248:	08 95       	ret
 24a:	81 30       	cpi	r24, 0x01	; 1
 24c:	f9 f4       	brne	.+62     	; 0x28c <USART_Transmit_number+0x154>
 24e:	80 e0       	ldi	r24, 0x00	; 0
	}
	else if(num == 11){
 250:	91 e0       	ldi	r25, 0x01	; 1
 252:	4d cf       	rjmp	.-358    	; 0xee <USART0_Transmit_String>
		if(USART_NUM == 0) USART0_Transmit_String("11");
 254:	08 95       	ret
 256:	6b 30       	cpi	r22, 0x0B	; 11
 258:	61 f4       	brne	.+24     	; 0x272 <USART_Transmit_number+0x13a>
 25a:	81 11       	cpse	r24, r1
 25c:	04 c0       	rjmp	.+8      	; 0x266 <USART_Transmit_number+0x12e>
 25e:	83 e0       	ldi	r24, 0x03	; 3
		else if(USART_NUM == 1) USART0_Transmit_String("11");
 260:	91 e0       	ldi	r25, 0x01	; 1
 262:	45 cf       	rjmp	.-374    	; 0xee <USART0_Transmit_String>
 264:	08 95       	ret
 266:	81 30       	cpi	r24, 0x01	; 1
 268:	89 f4       	brne	.+34     	; 0x28c <USART_Transmit_number+0x154>
 26a:	83 e0       	ldi	r24, 0x03	; 3
 26c:	91 e0       	ldi	r25, 0x01	; 1
	}
	else if(num == 12){
 26e:	3f cf       	rjmp	.-386    	; 0xee <USART0_Transmit_String>
 270:	08 95       	ret
		if(USART_NUM == 0) USART0_Transmit_String("12");
 272:	6c 30       	cpi	r22, 0x0C	; 12
 274:	59 f4       	brne	.+22     	; 0x28c <USART_Transmit_number+0x154>
 276:	81 11       	cpse	r24, r1
 278:	04 c0       	rjmp	.+8      	; 0x282 <USART_Transmit_number+0x14a>
 27a:	86 e0       	ldi	r24, 0x06	; 6
 27c:	91 e0       	ldi	r25, 0x01	; 1
 27e:	37 cf       	rjmp	.-402    	; 0xee <USART0_Transmit_String>
		else if(USART_NUM == 1) USART0_Transmit_String("12");
 280:	08 95       	ret
 282:	81 30       	cpi	r24, 0x01	; 1
 284:	19 f4       	brne	.+6      	; 0x28c <USART_Transmit_number+0x154>
 286:	86 e0       	ldi	r24, 0x06	; 6
 288:	91 e0       	ldi	r25, 0x01	; 1
 28a:	31 cf       	rjmp	.-414    	; 0xee <USART0_Transmit_String>
 28c:	08 95       	ret

0000028e <USART1_Transmit_String>:
void USART1_Transmit(char data){
	while(!((UCSR1A)  & (1<<UDRE1))); // Wait for Data Register empty
	UDR1 = data;
}

void USART1_Transmit_String(char *str){
 28e:	cf 93       	push	r28
 290:	df 93       	push	r29
 292:	ec 01       	movw	r28, r24
	while(*str != '\0') USART1_Transmit(*str++);
 294:	88 81       	ld	r24, Y
 296:	88 23       	and	r24, r24
 298:	29 f0       	breq	.+10     	; 0x2a4 <USART1_Transmit_String+0x16>
 29a:	21 96       	adiw	r28, 0x01	; 1
 29c:	45 df       	rcall	.-374    	; 0x128 <USART1_Transmit>
 29e:	89 91       	ld	r24, Y+
 2a0:	81 11       	cpse	r24, r1
 2a2:	fc cf       	rjmp	.-8      	; 0x29c <USART1_Transmit_String+0xe>
}
 2a4:	df 91       	pop	r29
 2a6:	cf 91       	pop	r28
 2a8:	08 95       	ret

000002aa <USART1_Receive>:

char USART1_Receive(void){
	while(!(UCSR1A & (1<<RXC1))); // Wait for Receive Buffer is empty
 2aa:	eb e9       	ldi	r30, 0x9B	; 155
 2ac:	f0 e0       	ldi	r31, 0x00	; 0
 2ae:	80 81       	ld	r24, Z
 2b0:	88 23       	and	r24, r24
 2b2:	ec f7       	brge	.-6      	; 0x2ae <USART1_Receive+0x4>
	return UDR1;
 2b4:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
}
 2b8:	08 95       	ret

000002ba <main>:
	char owner;		// 0 = none(on field), 1 = player1, 2 = player2
	char opened;	// 0 = not opened(alive), 1 = opened(dead)
};

int main(void)
{
 2ba:	cf 93       	push	r28
 2bc:	df 93       	push	r29
 2be:	cd b7       	in	r28, 0x3d	; 61
 2c0:	de b7       	in	r29, 0x3e	; 62
 2c2:	c8 56       	subi	r28, 0x68	; 104
 2c4:	d1 09       	sbc	r29, r1
 2c6:	0f b6       	in	r0, 0x3f	; 63
 2c8:	f8 94       	cli
 2ca:	de bf       	out	0x3e, r29	; 62
 2cc:	0f be       	out	0x3f, r0	; 63
 2ce:	cd bf       	out	0x3d, r28	; 61
	USART0_Init(103);
 2d0:	87 e6       	ldi	r24, 0x67	; 103
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	ff de       	rcall	.-514    	; 0xd4 <USART0_Init>
	USART1_Init(103);
 2d6:	87 e6       	ldi	r24, 0x67	; 103
 2d8:	90 e0       	ldi	r25, 0x00	; 0
	Timer_Init();
 2da:	1b df       	rcall	.-458    	; 0x112 <USART1_Init>
 2dc:	f5 de       	rcall	.-534    	; 0xc8 <Timer_Init>
 2de:	fe 01       	movw	r30, r28
 2e0:	31 96       	adiw	r30, 0x01	; 1
	char random_value;
	char p1_card_cnt = 0;
	char p2_card_cnt = 0;
	struct card_deck deck[26];
	
	for(int i=0;i<26;i++){				// 카드 덱 초기화
 2e2:	80 e0       	ldi	r24, 0x00	; 0
 2e4:	90 e0       	ldi	r25, 0x00	; 0
		if(i%2 == 0){
			deck[i].color = 0;
			deck[i].number = i/2;
		}
		else if(i%2 == 1){
			deck[i].color = 1;
 2e6:	41 e0       	ldi	r20, 0x01	; 1
	char p1_card_cnt = 0;
	char p2_card_cnt = 0;
	struct card_deck deck[26];
	
	for(int i=0;i<26;i++){				// 카드 덱 초기화
		if(i%2 == 0){
 2e8:	80 fd       	sbrc	r24, 0
 2ea:	0c c0       	rjmp	.+24     	; 0x304 <main+0x4a>
 2ec:	df 01       	movw	r26, r30
			deck[i].color = 0;
 2ee:	10 82       	st	Z, r1
			deck[i].number = i/2;
 2f0:	9c 01       	movw	r18, r24
 2f2:	99 23       	and	r25, r25
 2f4:	14 f4       	brge	.+4      	; 0x2fa <main+0x40>
 2f6:	2f 5f       	subi	r18, 0xFF	; 255
 2f8:	3f 4f       	sbci	r19, 0xFF	; 255
 2fa:	35 95       	asr	r19
 2fc:	27 95       	ror	r18
 2fe:	11 96       	adiw	r26, 0x01	; 1
 300:	2c 93       	st	X, r18
 302:	19 c0       	rjmp	.+50     	; 0x336 <main+0x7c>
		}
		else if(i%2 == 1){
 304:	9c 01       	movw	r18, r24
 306:	21 70       	andi	r18, 0x01	; 1
 308:	30 78       	andi	r19, 0x80	; 128
 30a:	33 23       	and	r19, r19
 30c:	34 f4       	brge	.+12     	; 0x31a <main+0x60>
 30e:	21 50       	subi	r18, 0x01	; 1
 310:	31 09       	sbc	r19, r1
 312:	2e 6f       	ori	r18, 0xFE	; 254
 314:	3f 6f       	ori	r19, 0xFF	; 255
 316:	2f 5f       	subi	r18, 0xFF	; 255
 318:	3f 4f       	sbci	r19, 0xFF	; 255
 31a:	21 30       	cpi	r18, 0x01	; 1
 31c:	31 05       	cpc	r19, r1
 31e:	59 f4       	brne	.+22     	; 0x336 <main+0x7c>
 320:	df 01       	movw	r26, r30
			deck[i].color = 1;
 322:	40 83       	st	Z, r20
			deck[i].number = i/2;
 324:	9c 01       	movw	r18, r24
 326:	99 23       	and	r25, r25
 328:	14 f4       	brge	.+4      	; 0x32e <main+0x74>
 32a:	2f 5f       	subi	r18, 0xFF	; 255
 32c:	3f 4f       	sbci	r19, 0xFF	; 255
 32e:	35 95       	asr	r19
 330:	27 95       	ror	r18
 332:	11 96       	adiw	r26, 0x01	; 1
 334:	2c 93       	st	X, r18
		}
		deck[i].owner = 0;
 336:	12 82       	std	Z+2, r1	; 0x02
	char random_value;
	char p1_card_cnt = 0;
	char p2_card_cnt = 0;
	struct card_deck deck[26];
	
	for(int i=0;i<26;i++){				// 카드 덱 초기화
 338:	01 96       	adiw	r24, 0x01	; 1
 33a:	34 96       	adiw	r30, 0x04	; 4
 33c:	8a 31       	cpi	r24, 0x1A	; 26
 33e:	91 05       	cpc	r25, r1
 340:	99 f6       	brne	.-90     	; 0x2e8 <main+0x2e>
 342:	c1 2c       	mov	r12, r1
 344:	d1 2c       	mov	r13, r1
    {
		if(state == 0){ // state 0 : checking player 1 connected
			USART0_Transmit_String("Press Y to Start\r\n");
			USART1_Transmit_String("Waiting for Player 1\r\n");
			rx = USART0_Receive();
			if(rx == 'Y') state = 1;
 346:	88 24       	eor	r8, r8
 348:	83 94       	inc	r8
 34a:	91 2c       	mov	r9, r1
		} // state 0 end
		if(state == 1){ // state 1 : checking player 1 connected
			USART0_Transmit_String("Waiting for Player 0\r\n");
			USART1_Transmit_String("Press Y to Start\r\n");
			rx = USART1_Receive();
			if(rx == 'Y') state = 2;
 34c:	68 94       	set
 34e:	aa 24       	eor	r10, r10
 350:	a1 f8       	bld	r10, 1
 352:	b1 2c       	mov	r11, r1
    {
		if(state == 0){ // state 0 : checking player 1 connected
			USART0_Transmit_String("Press Y to Start\r\n");
			USART1_Transmit_String("Waiting for Player 1\r\n");
			rx = USART0_Receive();
			if(rx == 'Y') state = 1;
 354:	48 2c       	mov	r4, r8
 356:	59 2c       	mov	r5, r9
		} // state 1 end
		if(state == 2){ // state 2 : give card to players
			USART0_Transmit_String("State 2\r\n");
			while(p1_card_cnt < 4){	// give Player 1 Cards
				random_value = TCNT0%26;
				if(deck[random_value].owner == 0){
 358:	0f e4       	ldi	r16, 0x4F	; 79
 35a:	1a e1       	ldi	r17, 0x1A	; 26
					deck[random_value].owner = 1;
 35c:	66 24       	eor	r6, r6
 35e:	63 94       	inc	r6
			}
			USART0_Transmit_String("\r\n");
			while(p2_card_cnt < 4){	// give Player 2 Cards
				random_value = TCNT0%26;
				if(deck[random_value].owner == 0){
					deck[random_value].owner = 2;
 360:	68 94       	set
 362:	77 24       	eor	r7, r7
 364:	71 f8       	bld	r7, 1
		deck[i].owner = 0;
		deck[i].opened = 0;
	}
    while (1) 
    {
		if(state == 0){ // state 0 : checking player 1 connected
 366:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <__data_end>
 36a:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <__data_end+0x1>
 36e:	89 2b       	or	r24, r25
			USART0_Transmit_String("Press Y to Start\r\n");
 370:	71 f4       	brne	.+28     	; 0x38e <main+0xd4>
 372:	89 e0       	ldi	r24, 0x09	; 9
 374:	91 e0       	ldi	r25, 0x01	; 1
			USART1_Transmit_String("Waiting for Player 1\r\n");
 376:	bb de       	rcall	.-650    	; 0xee <USART0_Transmit_String>
 378:	8c e1       	ldi	r24, 0x1C	; 28
 37a:	91 e0       	ldi	r25, 0x01	; 1
 37c:	88 df       	rcall	.-240    	; 0x28e <USART1_Transmit_String>
			rx = USART0_Receive();
 37e:	c5 de       	rcall	.-630    	; 0x10a <USART0_Receive>
 380:	89 35       	cpi	r24, 0x59	; 89
			if(rx == 'Y') state = 1;
 382:	29 f4       	brne	.+10     	; 0x38e <main+0xd4>
 384:	40 92 58 01 	sts	0x0158, r4	; 0x800158 <__data_end>
 388:	50 92 59 01 	sts	0x0159, r5	; 0x800159 <__data_end+0x1>
 38c:	06 c0       	rjmp	.+12     	; 0x39a <main+0xe0>
 38e:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <__data_end>
		} // state 0 end
		if(state == 1){ // state 1 : checking player 1 connected
 392:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <__data_end+0x1>
 396:	01 97       	sbiw	r24, 0x01	; 1
 398:	71 f4       	brne	.+28     	; 0x3b6 <main+0xfc>
			USART0_Transmit_String("Waiting for Player 0\r\n");
 39a:	83 e3       	ldi	r24, 0x33	; 51
 39c:	91 e0       	ldi	r25, 0x01	; 1
 39e:	a7 de       	rcall	.-690    	; 0xee <USART0_Transmit_String>
			USART1_Transmit_String("Press Y to Start\r\n");
 3a0:	89 e0       	ldi	r24, 0x09	; 9
 3a2:	91 e0       	ldi	r25, 0x01	; 1
 3a4:	74 df       	rcall	.-280    	; 0x28e <USART1_Transmit_String>
 3a6:	81 df       	rcall	.-254    	; 0x2aa <USART1_Receive>
			rx = USART1_Receive();
 3a8:	89 35       	cpi	r24, 0x59	; 89
 3aa:	29 f4       	brne	.+10     	; 0x3b6 <main+0xfc>
			if(rx == 'Y') state = 2;
 3ac:	b0 92 59 01 	sts	0x0159, r11	; 0x800159 <__data_end+0x1>
 3b0:	a0 92 58 01 	sts	0x0158, r10	; 0x800158 <__data_end>
 3b4:	06 c0       	rjmp	.+12     	; 0x3c2 <main+0x108>
 3b6:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <__data_end>
		} // state 1 end
		if(state == 2){ // state 2 : give card to players
 3ba:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <__data_end+0x1>
 3be:	02 97       	sbiw	r24, 0x02	; 2
 3c0:	91 f6       	brne	.-92     	; 0x366 <main+0xac>
 3c2:	8a e4       	ldi	r24, 0x4A	; 74
			USART0_Transmit_String("State 2\r\n");
 3c4:	91 e0       	ldi	r25, 0x01	; 1
 3c6:	93 de       	rcall	.-730    	; 0xee <USART0_Transmit_String>
 3c8:	36 c0       	rjmp	.+108    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 3ca:	82 b7       	in	r24, 0x32	; 50
			while(p1_card_cnt < 4){	// give Player 1 Cards
 3cc:	80 9f       	mul	r24, r16
				random_value = TCNT0%26;
 3ce:	91 2d       	mov	r25, r1
				if(deck[random_value].owner == 0){
 3d0:	11 24       	eor	r1, r1
 3d2:	96 95       	lsr	r25
 3d4:	96 95       	lsr	r25
 3d6:	96 95       	lsr	r25
 3d8:	91 9f       	mul	r25, r17
 3da:	80 19       	sub	r24, r0
 3dc:	11 24       	eor	r1, r1
 3de:	e8 2e       	mov	r14, r24
 3e0:	f1 2c       	mov	r15, r1
 3e2:	e1 e0       	ldi	r30, 0x01	; 1
 3e4:	f0 e0       	ldi	r31, 0x00	; 0
 3e6:	ec 0f       	add	r30, r28
 3e8:	fd 1f       	adc	r31, r29
 3ea:	94 e0       	ldi	r25, 0x04	; 4
 3ec:	89 9f       	mul	r24, r25
 3ee:	e0 0d       	add	r30, r0
 3f0:	f1 1d       	adc	r31, r1
 3f2:	11 24       	eor	r1, r1
 3f4:	82 81       	ldd	r24, Z+2	; 0x02
 3f6:	81 11       	cpse	r24, r1
 3f8:	e8 cf       	rjmp	.-48     	; 0x3ca <main+0x110>
 3fa:	ee 0c       	add	r14, r14
 3fc:	ff 1c       	adc	r15, r15
					deck[random_value].owner = 1;
 3fe:	ee 0c       	add	r14, r14
 400:	ff 1c       	adc	r15, r15
 402:	e1 e0       	ldi	r30, 0x01	; 1
 404:	f0 e0       	ldi	r31, 0x00	; 0
 406:	ec 0f       	add	r30, r28
 408:	fd 1f       	adc	r31, r29
 40a:	ee 0e       	add	r14, r30
 40c:	ff 1e       	adc	r15, r31
 40e:	f7 01       	movw	r30, r14
 410:	62 82       	std	Z+2, r6	; 0x02
					p1_card_cnt++;
 412:	d3 94       	inc	r13
					USART_Transmit_number(0, deck[random_value].color);
 414:	60 81       	ld	r22, Z
 416:	70 e0       	ldi	r23, 0x00	; 0
 418:	80 e0       	ldi	r24, 0x00	; 0
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	8d de       	rcall	.-742    	; 0x138 <USART_Transmit_number>
					USART0_Transmit_String("  ");
 41e:	84 e5       	ldi	r24, 0x54	; 84
 420:	91 e0       	ldi	r25, 0x01	; 1
 422:	65 de       	rcall	.-822    	; 0xee <USART0_Transmit_String>
					USART_Transmit_number(0, deck[random_value].number);
 424:	f7 01       	movw	r30, r14
 426:	61 81       	ldd	r22, Z+1	; 0x01
 428:	70 e0       	ldi	r23, 0x00	; 0
 42a:	80 e0       	ldi	r24, 0x00	; 0
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	84 de       	rcall	.-760    	; 0x138 <USART_Transmit_number>
					USART0_Transmit_String("  ");
 430:	84 e5       	ldi	r24, 0x54	; 84
 432:	91 e0       	ldi	r25, 0x01	; 1
 434:	5c de       	rcall	.-840    	; 0xee <USART0_Transmit_String>
 436:	f3 e0       	ldi	r31, 0x03	; 3
			rx = USART1_Receive();
			if(rx == 'Y') state = 2;
		} // state 1 end
		if(state == 2){ // state 2 : give card to players
			USART0_Transmit_String("State 2\r\n");
			while(p1_card_cnt < 4){	// give Player 1 Cards
 438:	fd 15       	cp	r31, r13
 43a:	20 f4       	brcc	.+8      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 43c:	87 e4       	ldi	r24, 0x47	; 71
					USART0_Transmit_String("  ");
					USART_Transmit_number(0, deck[random_value].number);
					USART0_Transmit_String("  ");
				}
			}
			USART0_Transmit_String("\r\n");
 43e:	91 e0       	ldi	r25, 0x01	; 1
 440:	56 de       	rcall	.-852    	; 0xee <USART0_Transmit_String>
 442:	50 c0       	rjmp	.+160    	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
 444:	82 b7       	in	r24, 0x32	; 50
			while(p2_card_cnt < 4){	// give Player 2 Cards
 446:	80 9f       	mul	r24, r16
			if(rx == 'Y') state = 2;
		} // state 1 end
		if(state == 2){ // state 2 : give card to players
			USART0_Transmit_String("State 2\r\n");
			while(p1_card_cnt < 4){	// give Player 1 Cards
				random_value = TCNT0%26;
 448:	91 2d       	mov	r25, r1
				if(deck[random_value].owner == 0){
 44a:	11 24       	eor	r1, r1
 44c:	96 95       	lsr	r25
 44e:	96 95       	lsr	r25
 450:	96 95       	lsr	r25
 452:	91 9f       	mul	r25, r17
 454:	80 19       	sub	r24, r0
 456:	11 24       	eor	r1, r1
 458:	e8 2e       	mov	r14, r24
 45a:	f1 2c       	mov	r15, r1
 45c:	e1 e0       	ldi	r30, 0x01	; 1
 45e:	f0 e0       	ldi	r31, 0x00	; 0
 460:	ec 0f       	add	r30, r28
 462:	fd 1f       	adc	r31, r29
 464:	94 e0       	ldi	r25, 0x04	; 4
 466:	89 9f       	mul	r24, r25
 468:	e0 0d       	add	r30, r0
 46a:	f1 1d       	adc	r31, r1
 46c:	11 24       	eor	r1, r1
 46e:	82 81       	ldd	r24, Z+2	; 0x02
 470:	88 23       	and	r24, r24
 472:	09 f4       	brne	.+2      	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
 474:	c2 cf       	rjmp	.-124    	; 0x3fa <main+0x140>
 476:	a9 cf       	rjmp	.-174    	; 0x3ca <main+0x110>
 478:	82 b7       	in	r24, 0x32	; 50
 47a:	80 9f       	mul	r24, r16
					USART0_Transmit_String("  ");
				}
			}
			USART0_Transmit_String("\r\n");
			while(p2_card_cnt < 4){	// give Player 2 Cards
				random_value = TCNT0%26;
 47c:	91 2d       	mov	r25, r1
				if(deck[random_value].owner == 0){
 47e:	11 24       	eor	r1, r1
 480:	96 95       	lsr	r25
 482:	96 95       	lsr	r25
 484:	96 95       	lsr	r25
 486:	91 9f       	mul	r25, r17
 488:	80 19       	sub	r24, r0
 48a:	11 24       	eor	r1, r1
 48c:	e8 2e       	mov	r14, r24
 48e:	f1 2c       	mov	r15, r1
 490:	e1 e0       	ldi	r30, 0x01	; 1
 492:	f0 e0       	ldi	r31, 0x00	; 0
 494:	ec 0f       	add	r30, r28
 496:	fd 1f       	adc	r31, r29
 498:	94 e0       	ldi	r25, 0x04	; 4
 49a:	89 9f       	mul	r24, r25
 49c:	e0 0d       	add	r30, r0
 49e:	f1 1d       	adc	r31, r1
 4a0:	11 24       	eor	r1, r1
 4a2:	82 81       	ldd	r24, Z+2	; 0x02
 4a4:	81 11       	cpse	r24, r1
 4a6:	e8 cf       	rjmp	.-48     	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
 4a8:	ee 0c       	add	r14, r14
 4aa:	ff 1c       	adc	r15, r15
					deck[random_value].owner = 2;
 4ac:	ee 0c       	add	r14, r14
 4ae:	ff 1c       	adc	r15, r15
 4b0:	e1 e0       	ldi	r30, 0x01	; 1
 4b2:	f0 e0       	ldi	r31, 0x00	; 0
 4b4:	ec 0f       	add	r30, r28
 4b6:	fd 1f       	adc	r31, r29
 4b8:	ee 0e       	add	r14, r30
 4ba:	ff 1e       	adc	r15, r31
 4bc:	f7 01       	movw	r30, r14
 4be:	72 82       	std	Z+2, r7	; 0x02
					p2_card_cnt++;
 4c0:	c3 94       	inc	r12
					USART_Transmit_number(1, deck[random_value].color);
 4c2:	60 81       	ld	r22, Z
 4c4:	70 e0       	ldi	r23, 0x00	; 0
 4c6:	88 2d       	mov	r24, r8
 4c8:	99 2d       	mov	r25, r9
 4ca:	36 de       	rcall	.-916    	; 0x138 <USART_Transmit_number>
					USART1_Transmit_String("  ");
 4cc:	84 e5       	ldi	r24, 0x54	; 84
 4ce:	91 e0       	ldi	r25, 0x01	; 1
 4d0:	de de       	rcall	.-580    	; 0x28e <USART1_Transmit_String>
					USART_Transmit_number(1, deck[random_value].number);
 4d2:	f7 01       	movw	r30, r14
 4d4:	61 81       	ldd	r22, Z+1	; 0x01
 4d6:	70 e0       	ldi	r23, 0x00	; 0
 4d8:	88 2d       	mov	r24, r8
 4da:	99 2d       	mov	r25, r9
 4dc:	2d de       	rcall	.-934    	; 0x138 <USART_Transmit_number>
 4de:	84 e5       	ldi	r24, 0x54	; 84
					USART1_Transmit_String("  ");
 4e0:	91 e0       	ldi	r25, 0x01	; 1
 4e2:	d5 de       	rcall	.-598    	; 0x28e <USART1_Transmit_String>
 4e4:	f3 e0       	ldi	r31, 0x03	; 3
 4e6:	fc 15       	cp	r31, r12
					USART_Transmit_number(0, deck[random_value].number);
					USART0_Transmit_String("  ");
				}
			}
			USART0_Transmit_String("\r\n");
			while(p2_card_cnt < 4){	// give Player 2 Cards
 4e8:	50 f4       	brcc	.+20     	; 0x4fe <__LOCK_REGION_LENGTH__+0xfe>
 4ea:	87 e4       	ldi	r24, 0x47	; 71
 4ec:	91 e0       	ldi	r25, 0x01	; 1
					USART1_Transmit_String("  ");
					USART_Transmit_number(1, deck[random_value].number);
					USART1_Transmit_String("  ");
				}
			}
			USART0_Transmit_String("\r\n");
 4ee:	ff dd       	rcall	.-1026   	; 0xee <USART0_Transmit_String>
 4f0:	83 e0       	ldi	r24, 0x03	; 3
 4f2:	90 e0       	ldi	r25, 0x00	; 0
 4f4:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <__data_end+0x1>
			state = 3;
 4f8:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <__data_end>
 4fc:	34 cf       	rjmp	.-408    	; 0x366 <main+0xac>
 4fe:	82 b7       	in	r24, 0x32	; 50
 500:	80 9f       	mul	r24, r16
 502:	91 2d       	mov	r25, r1
					USART0_Transmit_String("  ");
				}
			}
			USART0_Transmit_String("\r\n");
			while(p2_card_cnt < 4){	// give Player 2 Cards
				random_value = TCNT0%26;
 504:	11 24       	eor	r1, r1
				if(deck[random_value].owner == 0){
 506:	96 95       	lsr	r25
 508:	96 95       	lsr	r25
 50a:	96 95       	lsr	r25
 50c:	91 9f       	mul	r25, r17
 50e:	80 19       	sub	r24, r0
 510:	11 24       	eor	r1, r1
 512:	e8 2e       	mov	r14, r24
 514:	f1 2c       	mov	r15, r1
 516:	e1 e0       	ldi	r30, 0x01	; 1
 518:	f0 e0       	ldi	r31, 0x00	; 0
 51a:	ec 0f       	add	r30, r28
 51c:	fd 1f       	adc	r31, r29
 51e:	94 e0       	ldi	r25, 0x04	; 4
 520:	89 9f       	mul	r24, r25
 522:	e0 0d       	add	r30, r0
 524:	f1 1d       	adc	r31, r1
 526:	11 24       	eor	r1, r1
 528:	82 81       	ldd	r24, Z+2	; 0x02
 52a:	88 23       	and	r24, r24
 52c:	09 f4       	brne	.+2      	; 0x530 <__LOCK_REGION_LENGTH__+0x130>
 52e:	bc cf       	rjmp	.-136    	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
 530:	a3 cf       	rjmp	.-186    	; 0x478 <__LOCK_REGION_LENGTH__+0x78>

00000532 <_exit>:
 532:	f8 94       	cli

00000534 <__stop_program>:
 534:	ff cf       	rjmp	.-2      	; 0x534 <__stop_program>
