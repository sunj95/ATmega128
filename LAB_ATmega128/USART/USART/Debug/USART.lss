
USART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000142  000001b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000142  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001be  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001f0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000092e  00000000  00000000  00000274  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000870  00000000  00000000  00000ba2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002e4  00000000  00000000  00001412  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000084  00000000  00000000  000016f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000421  00000000  00000000  0000177c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000b7  00000000  00000000  00001b9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00001c54  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e4       	ldi	r30, 0x42	; 66
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 30       	cpi	r26, 0x08	; 8
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	15 d0       	rcall	.+42     	; 0xde <main>
  b4:	44 c0       	rjmp	.+136    	; 0x13e <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <USART_init>:
	DDRF = 0xFF; // use PORTF as output
	PORTF = 0x00; // initialize PORT as 0
}

void switch_init (void){ // function for switch initialization
	DDRC = 0x00; // use PORTC as input
  b8:	90 93 90 00 	sts	0x0090, r25	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
  bc:	89 b9       	out	0x09, r24	; 9
  be:	88 e1       	ldi	r24, 0x18	; 24
  c0:	8a b9       	out	0x0a, r24	; 10
  c2:	86 e0       	ldi	r24, 0x06	; 6
  c4:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
  c8:	08 95       	ret

000000ca <USART_Transmit>:
  ca:	5d 9b       	sbis	0x0b, 5	; 11
  cc:	fe cf       	rjmp	.-4      	; 0xca <USART_Transmit>
  ce:	8c b9       	out	0x0c, r24	; 12
  d0:	08 95       	ret

000000d2 <LED_init>:
  d2:	8f ef       	ldi	r24, 0xFF	; 255
  d4:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
  d8:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
  dc:	08 95       	ret

000000de <main>:
}

int main (void){
  de:	cf 93       	push	r28
  e0:	df 93       	push	r29
  e2:	cd b7       	in	r28, 0x3d	; 61
  e4:	de b7       	in	r29, 0x3e	; 62
  e6:	28 97       	sbiw	r28, 0x08	; 8
  e8:	0f b6       	in	r0, 0x3f	; 63
  ea:	f8 94       	cli
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	0f be       	out	0x3f, r0	; 63
  f0:	cd bf       	out	0x3d, r28	; 61
	USART_init(MYUBRR); // USART initialize with Baud rate 9600
  f2:	87 e6       	ldi	r24, 0x67	; 103
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	e0 df       	rcall	.-64     	; 0xb8 <USART_init>
	LED_init(); // LED initialize
  f8:	ec df       	rcall	.-40     	; 0xd2 <LED_init>
  fa:	14 ba       	out	0x14, r1	; 20
	DDRF = 0xFF; // use PORTF as output
	PORTF = 0x00; // initialize PORT as 0
}

void switch_init (void){ // function for switch initialization
	DDRC = 0x00; // use PORTC as input
  fc:	88 e0       	ldi	r24, 0x08	; 8

int main (void){
	USART_init(MYUBRR); // USART initialize with Baud rate 9600
	LED_init(); // LED initialize
	switch_init(); // switch initialize
	char array[8] = {0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80}; // array to use for loop
  fe:	e0 e0       	ldi	r30, 0x00	; 0
 100:	f1 e0       	ldi	r31, 0x01	; 1
 102:	de 01       	movw	r26, r28
 104:	11 96       	adiw	r26, 0x01	; 1
 106:	01 90       	ld	r0, Z+
 108:	0d 92       	st	X+, r0
 10a:	8a 95       	dec	r24
 10c:	e1 f7       	brne	.-8      	; 0x106 <main+0x28>
 10e:	0f 2e       	mov	r0, r31
	while(1){
		for(int i=0;i<8;i++){ // check switch for PC0~PC7
			if( (PINC & array[i]) == array[i]){ // check switch
				USART_Transmit((char)(i+48)); // transmit switch input to ascii code
				PORTF = array[i]; // Turn on LED on the corresponding switch
 110:	f2 e6       	ldi	r31, 0x62	; 98
 112:	cf 2e       	mov	r12, r31
 114:	d1 2c       	mov	r13, r1
 116:	f0 2d       	mov	r31, r0
 118:	ce 01       	movw	r24, r28
 11a:	01 96       	adiw	r24, 0x01	; 1
 11c:	7c 01       	movw	r14, r24
 11e:	10 e3       	ldi	r17, 0x30	; 48

void switch_init (void){ // function for switch initialization
	DDRC = 0x00; // use PORTC as input
}

int main (void){
 120:	83 b3       	in	r24, 0x13	; 19
	LED_init(); // LED initialize
	switch_init(); // switch initialize
	char array[8] = {0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80}; // array to use for loop
	while(1){
		for(int i=0;i<8;i++){ // check switch for PC0~PC7
			if( (PINC & array[i]) == array[i]){ // check switch
 122:	f7 01       	movw	r30, r14
 124:	01 91       	ld	r16, Z+
 126:	7f 01       	movw	r14, r30
 128:	80 23       	and	r24, r16
 12a:	08 13       	cpse	r16, r24
 12c:	04 c0       	rjmp	.+8      	; 0x136 <main+0x58>
				USART_Transmit((char)(i+48)); // transmit switch input to ascii code
 12e:	81 2f       	mov	r24, r17
 130:	cc df       	rcall	.-104    	; 0xca <USART_Transmit>
 132:	f6 01       	movw	r30, r12
				PORTF = array[i]; // Turn on LED on the corresponding switch
 134:	00 83       	st	Z, r16
 136:	1f 5f       	subi	r17, 0xFF	; 255
 138:	18 33       	cpi	r17, 0x38	; 56
	USART_init(MYUBRR); // USART initialize with Baud rate 9600
	LED_init(); // LED initialize
	switch_init(); // switch initialize
	char array[8] = {0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80}; // array to use for loop
	while(1){
		for(int i=0;i<8;i++){ // check switch for PC0~PC7
 13a:	91 f7       	brne	.-28     	; 0x120 <main+0x42>
 13c:	ed cf       	rjmp	.-38     	; 0x118 <main+0x3a>

0000013e <_exit>:
 13e:	f8 94       	cli

00000140 <__stop_program>:
 140:	ff cf       	rjmp	.-2      	; 0x140 <__stop_program>
